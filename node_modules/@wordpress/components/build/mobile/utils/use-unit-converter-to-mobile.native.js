"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useConvertUnitToMobile = exports.getValueAndUnit = exports.convertUnitToMobile = void 0;
var _reactNative = require("react-native");
var _element = require("@wordpress/element");
var _globalStylesContext = _interopRequireDefault(require("../global-styles-context"));
/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const getValueAndUnit = (value, unit) => {
  const regex = /(\d+\.?\d*)(.*)/;
  const splitValue = `${value}`?.match(regex)?.filter(v => v !== '');
  if (splitValue) {
    return {
      valueToConvert: splitValue[1],
      valueUnit: unit || splitValue[2]
    };
  }
  return undefined;
};
exports.getValueAndUnit = getValueAndUnit;
const convertUnitToMobile = (containerSize, globalStyles, value, unit) => {
  const {
    width,
    height
  } = containerSize;
  const {
    valueToConvert,
    valueUnit
  } = getValueAndUnit(value, unit) || {};
  const {
    fontSize = 16
  } = globalStyles || {};
  if (valueToConvert === undefined) {
    return undefined;
  }
  switch (valueUnit) {
    case 'rem':
    case 'em':
      return valueToConvert * fontSize;
    case '%':
      return Number(valueToConvert / 100) * width;
    case 'px':
      return Number(valueToConvert);
    case 'vw':
      const vw = width / 100;
      return Math.round(valueToConvert * vw);
    case 'vh':
      const vh = height / 100;
      return Math.round(valueToConvert * vh);
    default:
      return Number(valueToConvert / 100) * width;
  }
};
exports.convertUnitToMobile = convertUnitToMobile;
const useConvertUnitToMobile = (value, unit) => {
  const {
    globalStyles: styles
  } = (0, _element.useContext)(_globalStylesContext.default);
  const [windowSizes, setWindowSizes] = (0, _element.useState)(_reactNative.Dimensions.get('window'));
  (0, _element.useEffect)(() => {
    const dimensionsChangeSubscription = _reactNative.Dimensions.addEventListener('change', onDimensionsChange);
    return () => {
      dimensionsChangeSubscription.remove();
    };
    // Disable reason: deferring this refactor to the native team.
    // see https://github.com/WordPress/gutenberg/pull/41166
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  const onDimensionsChange = (0, _element.useCallback)(({
    window
  }) => {
    setWindowSizes(window);
  }, []);
  return (0, _element.useMemo)(() => {
    const {
      valueToConvert,
      valueUnit
    } = getValueAndUnit(value, unit) || {};
    return convertUnitToMobile(windowSizes, styles, valueToConvert, valueUnit);
    // Disable reason: deferring this refactor to the native team.
    // see https://github.com/WordPress/gutenberg/pull/41166
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [windowSizes, value, unit]);
};
exports.useConvertUnitToMobile = useConvertUnitToMobile;
//# sourceMappingURL=use-unit-converter-to-mobile.native.js.map