"use strict";Object.defineProperty(exports, "__esModule", {value: true});

var _I4JDDV3Vcjs = require('./I4JDDV3V.cjs');




var _CWY2PHPRcjs = require('./CWY2PHPR.cjs');




var _5WLTMVVQcjs = require('./5WLTMVVQ.cjs');




var _72I2GWXFcjs = require('./72I2GWXF.cjs');

// src/command/command.ts
var _react = require('react');
var _dom = require('@ariakit/core/utils/dom');




var _events = require('@ariakit/core/utils/events');
var _platform = require('@ariakit/core/utils/platform');
function isNativeClick(event) {
  if (!event.isTrusted)
    return false;
  const element = event.currentTarget;
  if (event.key === "Enter") {
    return _dom.isButton.call(void 0, element) || element.tagName === "SUMMARY" || element.tagName === "A";
  }
  if (event.key === " ") {
    return _dom.isButton.call(void 0, element) || element.tagName === "SUMMARY" || element.tagName === "INPUT" || element.tagName === "SELECT";
  }
  return false;
}
var useCommand = _CWY2PHPRcjs.createHook.call(void 0, 
  (_a) => {
    var _b = _a, { clickOnEnter = true, clickOnSpace = true } = _b, props = _72I2GWXFcjs.__objRest.call(void 0, _b, ["clickOnEnter", "clickOnSpace"]);
    const ref = _react.useRef.call(void 0, null);
    const tagName = _5WLTMVVQcjs.useTagName.call(void 0, ref, props.as);
    const type = props.type;
    const [isNativeButton, setIsNativeButton] = _react.useState.call(void 0, 
      () => !!tagName && _dom.isButton.call(void 0, { tagName, type })
    );
    _react.useEffect.call(void 0, () => {
      if (!ref.current)
        return;
      setIsNativeButton(_dom.isButton.call(void 0, ref.current));
    }, []);
    const [active, setActive] = _react.useState.call(void 0, false);
    const activeRef = _react.useRef.call(void 0, false);
    const isDuplicate = "data-command" in props;
    const onKeyDownProp = props.onKeyDown;
    const onKeyDown = _5WLTMVVQcjs.useEvent.call(void 0, (event) => {
      onKeyDownProp == null ? void 0 : onKeyDownProp(event);
      const element = event.currentTarget;
      if (event.defaultPrevented)
        return;
      if (isDuplicate)
        return;
      if (props.disabled)
        return;
      if (!_events.isSelfTarget.call(void 0, event))
        return;
      if (_dom.isTextField.call(void 0, element))
        return;
      if (element.isContentEditable)
        return;
      const isEnter = clickOnEnter && event.key === "Enter";
      const isSpace = clickOnSpace && event.key === " ";
      const shouldPreventEnter = event.key === "Enter" && !clickOnEnter;
      const shouldPreventSpace = event.key === " " && !clickOnSpace;
      if (shouldPreventEnter || shouldPreventSpace) {
        event.preventDefault();
        return;
      }
      if (isEnter || isSpace) {
        const nativeClick = isNativeClick(event);
        if (isEnter) {
          if (!nativeClick) {
            event.preventDefault();
            const _a2 = event, { view } = _a2, eventInit = _72I2GWXFcjs.__objRest.call(void 0, _a2, ["view"]);
            const click = () => _events.fireClickEvent.call(void 0, element, eventInit);
            if (_platform.isFirefox.call(void 0, )) {
              _events.queueBeforeEvent.call(void 0, element, "keyup", click);
            } else {
              queueMicrotask(click);
            }
          }
        } else if (isSpace) {
          activeRef.current = true;
          if (!nativeClick) {
            event.preventDefault();
            setActive(true);
          }
        }
      }
    });
    const onKeyUpProp = props.onKeyUp;
    const onKeyUp = _5WLTMVVQcjs.useEvent.call(void 0, (event) => {
      onKeyUpProp == null ? void 0 : onKeyUpProp(event);
      if (event.defaultPrevented)
        return;
      if (isDuplicate)
        return;
      if (props.disabled)
        return;
      if (event.metaKey)
        return;
      const isSpace = clickOnSpace && event.key === " ";
      if (activeRef.current && isSpace) {
        activeRef.current = false;
        if (!isNativeClick(event)) {
          setActive(false);
          const element = event.currentTarget;
          const _a2 = event, { view } = _a2, eventInit = _72I2GWXFcjs.__objRest.call(void 0, _a2, ["view"]);
          queueMicrotask(() => _events.fireClickEvent.call(void 0, element, eventInit));
        }
      }
    });
    props = _72I2GWXFcjs.__spreadProps.call(void 0, _72I2GWXFcjs.__spreadValues.call(void 0, {
      "data-command": "",
      "data-active": active ? "" : void 0,
      type: isNativeButton ? "button" : void 0
    }, props), {
      ref: _5WLTMVVQcjs.useMergeRefs.call(void 0, ref, props.ref),
      onKeyDown,
      onKeyUp
    });
    props = _I4JDDV3Vcjs.useFocusable.call(void 0, props);
    return props;
  }
);
var Command = _CWY2PHPRcjs.createComponent.call(void 0, (props) => {
  props = useCommand(props);
  return _CWY2PHPRcjs.createElement.call(void 0, "button", props);
});
if (process.env.NODE_ENV !== "production") {
  Command.displayName = "Command";
}




exports.useCommand = useCommand; exports.Command = Command;
