{"version":3,"names":["coreDataStore","createResolversCacheMiddleware","registry","reducerKey","next","action","resolvers","select","getCachedResolvers","Object","entries","forEach","selectorName","resolversByArgs","resolver","stores","shouldInvalidate","value","args","status","dispatch","invalidateResolution"],"sources":["@wordpress/data/src/resolvers-cache-middleware.js"],"sourcesContent":["/**\n * Internal dependencies\n */\nimport coreDataStore from './store';\n\n/** @typedef {import('./registry').WPDataRegistry} WPDataRegistry */\n\n/**\n * Creates a middleware handling resolvers cache invalidation.\n *\n * @param {WPDataRegistry} registry   The registry reference for which to create\n *                                    the middleware.\n * @param {string}         reducerKey The namespace for which to create the\n *                                    middleware.\n *\n * @return {Function} Middleware function.\n */\nconst createResolversCacheMiddleware =\n\t( registry, reducerKey ) => () => ( next ) => ( action ) => {\n\t\tconst resolvers = registry\n\t\t\t.select( coreDataStore )\n\t\t\t.getCachedResolvers( reducerKey );\n\t\tObject.entries( resolvers ).forEach(\n\t\t\t( [ selectorName, resolversByArgs ] ) => {\n\t\t\t\tconst resolver =\n\t\t\t\t\tregistry.stores?.[ reducerKey ]?.resolvers?.[\n\t\t\t\t\t\tselectorName\n\t\t\t\t\t];\n\t\t\t\tif ( ! resolver || ! resolver.shouldInvalidate ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tresolversByArgs.forEach( ( value, args ) => {\n\t\t\t\t\t// resolversByArgs is the map Map([ args ] => boolean) storing the cache resolution status for a given selector.\n\t\t\t\t\t// If the value is \"finished\" or \"error\" it means this resolver has finished its resolution which means we need\n\t\t\t\t\t// to invalidate it, if it's true it means it's inflight and the invalidation is not necessary.\n\t\t\t\t\tif (\n\t\t\t\t\t\t( value?.status !== 'finished' &&\n\t\t\t\t\t\t\tvalue?.status !== 'error' ) ||\n\t\t\t\t\t\t! resolver.shouldInvalidate( action, ...args )\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Trigger cache invalidation\n\t\t\t\t\tregistry\n\t\t\t\t\t\t.dispatch( coreDataStore )\n\t\t\t\t\t\t.invalidateResolution( reducerKey, selectorName, args );\n\t\t\t\t} );\n\t\t\t}\n\t\t);\n\t\treturn next( action );\n\t};\n\nexport default createResolversCacheMiddleware;\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,aAAa,MAAM,SAAS;;AAEnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,8BAA8B,GACnCA,CAAEC,QAAQ,EAAEC,UAAU,KAAM,MAAQC,IAAI,IAAQC,MAAM,IAAM;EAC3D,MAAMC,SAAS,GAAGJ,QAAQ,CACxBK,MAAM,CAAEP,aAAc,CAAC,CACvBQ,kBAAkB,CAAEL,UAAW,CAAC;EAClCM,MAAM,CAACC,OAAO,CAAEJ,SAAU,CAAC,CAACK,OAAO,CAClC,CAAE,CAAEC,YAAY,EAAEC,eAAe,CAAE,KAAM;IACxC,MAAMC,QAAQ,GACbZ,QAAQ,CAACa,MAAM,GAAIZ,UAAU,CAAE,EAAEG,SAAS,GACzCM,YAAY,CACZ;IACF,IAAK,CAAEE,QAAQ,IAAI,CAAEA,QAAQ,CAACE,gBAAgB,EAAG;MAChD;IACD;IACAH,eAAe,CAACF,OAAO,CAAE,CAAEM,KAAK,EAAEC,IAAI,KAAM;MAC3C;MACA;MACA;MACA,IACGD,KAAK,EAAEE,MAAM,KAAK,UAAU,IAC7BF,KAAK,EAAEE,MAAM,KAAK,OAAO,IAC1B,CAAEL,QAAQ,CAACE,gBAAgB,CAAEX,MAAM,EAAE,GAAGa,IAAK,CAAC,EAC7C;QACD;MACD;;MAEA;MACAhB,QAAQ,CACNkB,QAAQ,CAAEpB,aAAc,CAAC,CACzBqB,oBAAoB,CAAElB,UAAU,EAAES,YAAY,EAAEM,IAAK,CAAC;IACzD,CAAE,CAAC;EACJ,CACD,CAAC;EACD,OAAOd,IAAI,CAAEC,MAAO,CAAC;AACtB,CAAC;AAEF,eAAeJ,8BAA8B"}