import {
  selectTextField
} from "./OXPV2NBK.js";
import {
  createComponent,
  createElement,
  createHook
} from "./NQJBHION.js";
import {
  useEvent
} from "./J7Q2EO23.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "./PNRLI7OV.js";

// src/composite/composite-input.ts
import {
  getDocument,
  getTextboxSelection,
  isTextField
} from "@ariakit/core/utils/dom";
function getValueLength(element) {
  if (isTextField(element)) {
    return element.value.length;
  } else if (element.isContentEditable) {
    const range = getDocument(element).createRange();
    range.selectNodeContents(element);
    return range.toString().length;
  }
  return 0;
}
var useCompositeInput = createHook(
  (_a) => {
    var _b = _a, { store } = _b, props = __objRest(_b, ["store"]);
    const onKeyDownCaptureProp = props.onKeyDownCapture;
    const onKeyDownCapture = useEvent(
      (event) => {
        onKeyDownCaptureProp == null ? void 0 : onKeyDownCaptureProp(event);
        if (event.defaultPrevented)
          return;
        const element = event.currentTarget;
        if (!element.isContentEditable && !isTextField(element))
          return;
        const selection = getTextboxSelection(element);
        if (event.key === "ArrowRight" || event.key === "ArrowDown") {
          if (selection.end !== getValueLength(element)) {
            event.stopPropagation();
          }
        } else if (event.key === "ArrowLeft" || event.key === "ArrowUp") {
          if (selection.start !== 0) {
            event.stopPropagation();
          }
        }
      }
    );
    const onFocusProp = props.onFocus;
    const onFocus = useEvent((event) => {
      onFocusProp == null ? void 0 : onFocusProp(event);
      if (event.defaultPrevented)
        return;
      selectTextField(event.currentTarget);
    });
    props = __spreadProps(__spreadValues({}, props), {
      onKeyDownCapture,
      onFocus
    });
    return props;
  }
);
var CompositeInput = createComponent(
  (props) => {
    const htmlProps = useCompositeInput(props);
    return createElement("input", htmlProps);
  }
);
if (process.env.NODE_ENV !== "production") {
  CompositeInput.displayName = "CompositeInput";
}

export {
  useCompositeInput,
  CompositeInput
};
