import * as Core from "@ariakit/core/menu/menu-store";
import type { BivariantCallback, PickRequired } from "@ariakit/core/utils/types";
import type { CompositeStoreFunctions, CompositeStoreOptions, CompositeStoreState } from "../composite/composite-store.js";
import type { HovercardStoreFunctions, HovercardStoreOptions, HovercardStoreState } from "../hovercard/hovercard-store.js";
import type { Store } from "../utils/store.js";
type Values = Core.MenuStoreValues;
export declare function useMenuStoreOptions<T extends Values = Values>(props: MenuStoreProps<T>): {
    values: T | undefined;
    timeout: number;
    placement: (("left" | "right" | "bottom" | "top") | "left-start" | "right-start" | "bottom-start" | "top-start" | "left-end" | "right-end" | "bottom-end" | "top-end") | undefined;
    setOpen?: ((open: boolean) => void) | undefined;
    defaultOpen?: boolean | undefined;
    disclosure?: import("@ariakit/core/disclosure/disclosure-store").DisclosureStore | undefined;
    open?: boolean | undefined;
    animated?: number | boolean | undefined;
    setItems?: BivariantCallback<(items: ({
        id: string;
        element?: HTMLElement | null | undefined;
    } & {
        rowId?: string | undefined;
        disabled?: boolean | undefined;
        children?: string | undefined;
    })[]) => void> | undefined;
    defaultItems?: ({
        id: string;
        element?: HTMLElement | null | undefined;
    } & {
        rowId?: string | undefined;
        disabled?: boolean | undefined;
        children?: string | undefined;
    })[] | undefined;
    items?: ({
        id: string;
        element?: HTMLElement | null | undefined;
    } & {
        rowId?: string | undefined;
        disabled?: boolean | undefined;
        children?: string | undefined;
    })[] | undefined;
};
export declare function useMenuStoreProps<T extends Omit<MenuStore, "hideAll">>(store: T, props: MenuStoreProps): T & {
    hideAll: () => void;
};
/**
 * Creates a menu store.
 * @see https://ariakit.org/components/menu
 * @example
 * ```jsx
 * const menu = useMenuStore({ placement: "top" });
 * <MenuButton store={menu}>Edit</MenuButton>
 * <Menu store={menu}>
 *   <MenuItem>Undo</MenuItem>
 *   <MenuItem>Redo</MenuItem>
 * </Menu>
 * ```
 */
export declare function useMenuStore<T extends Values = Values>(props: PickRequired<MenuStoreProps<T>, "values" | "defaultValues">): MenuStore<T>;
export declare function useMenuStore(props?: MenuStoreProps): MenuStore;
export type MenuStoreValues = Core.MenuStoreValues;
export interface MenuStoreState<T extends Values = Values> extends Core.MenuStoreState<T>, CompositeStoreState, HovercardStoreState {
}
export interface MenuStoreFunctions<T extends Values = Values> extends Core.MenuStoreFunctions<T>, CompositeStoreFunctions, HovercardStoreFunctions {
    /**
     * Hides the menu and all its parent menus.
     */
    hideAll: () => void;
}
export interface MenuStoreOptions<T extends Values = Values> extends Core.MenuStoreOptions<T>, CompositeStoreOptions, HovercardStoreOptions {
    /**
     * A callback that gets called when the `values` state changes.
     * @param values The new values.
     * @example
     * const [values, setValues] = useState({});
     * const menu = useMenuStore({ values, setValues });
     */
    setValues?: BivariantCallback<(values: MenuStoreState<T>["values"]) => void>;
}
export type MenuStoreProps<T extends Values = Values> = MenuStoreOptions<T> & Core.MenuStoreProps<T>;
export type MenuStore<T extends Values = Values> = MenuStoreFunctions<T> & Store<Core.MenuStore<T>>;
export {};
