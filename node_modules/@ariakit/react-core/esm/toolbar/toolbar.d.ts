import type { CompositeOptions } from "../composite/composite.js";
import type { As, Props } from "../utils/types.js";
import type { ToolbarStore } from "./toolbar-store.js";
/**
 * Returns props to create a `Toolbar` component.
 * @see https://ariakit.org/components/toolbar
 * @example
 * ```jsx
 * const store = useToolbarStore();
 * const props = useToolbar({ store });
 * <Role {...props}>
 *   <ToolbarItem>Item 1</ToolbarItem>
 *   <ToolbarItem>Item 2</ToolbarItem>
 * </Role>
 * ```
 */
export declare const useToolbar: import("../utils/types.js").Hook<ToolbarOptions<"div">>;
/**
 * Renders a toolbar element that groups interactive elements together.
 * @see https://ariakit.org/components/toolbar
 * @example
 * ```jsx
 * const toolbar = useToolbarStore();
 * <Toolbar store={toolbar}>
 *   <ToolbarItem>Item 1</ToolbarItem>
 *   <ToolbarItem>Item 2</ToolbarItem>
 * </Toolbar>
 * ```
 */
export declare const Toolbar: import("../utils/types.js").Component<ToolbarOptions<"div">>;
export interface ToolbarOptions<T extends As = "div"> extends CompositeOptions<T> {
    /**
     * Object returned by the `useToolbarStore` hook.
     */
    store: ToolbarStore;
}
export type ToolbarProps<T extends As = "div"> = Props<ToolbarOptions<T>>;
