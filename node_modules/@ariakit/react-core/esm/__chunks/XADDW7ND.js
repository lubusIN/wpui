import {
  hasExpandedMenuButton
} from "./W7JXAQKF.js";
import {
  MenuBarContext,
  MenuContext
} from "./HVBRRKV4.js";
import {
  useCompositeHover
} from "./W5P7IKOU.js";
import {
  useCompositeItem
} from "./FVD2NJZN.js";
import {
  createElement,
  createHook,
  createMemoComponent
} from "./NQJBHION.js";
import {
  useStoreState
} from "./P63NRZ4A.js";
import {
  useBooleanEvent,
  useEvent
} from "./J7Q2EO23.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "./PNRLI7OV.js";

// src/menu/menu-item.ts
import { useContext } from "react";
import { getPopupItemRole } from "@ariakit/core/utils/dom";
import { isDownloading, isOpeningInNewTab } from "@ariakit/core/utils/events";
import { invariant } from "@ariakit/core/utils/misc";
var useMenuItem = createHook(
  (_a) => {
    var _b = _a, {
      store,
      hideOnClick = true,
      preventScrollOnKeyDown = true,
      focusOnHover
    } = _b, props = __objRest(_b, [
      "store",
      "hideOnClick",
      "preventScrollOnKeyDown",
      "focusOnHover"
    ]);
    const menuContext = useContext(MenuContext);
    const menuBarContext = useContext(MenuBarContext);
    store = store || menuContext || menuBarContext;
    invariant(
      store,
      process.env.NODE_ENV !== "production" && "MenuItem must be wrapped in a MenuList, Menu or MenuBar component"
    );
    const onClickProp = props.onClick;
    const hideOnClickProp = useBooleanEvent(hideOnClick);
    const hideMenu = "hideAll" in store ? store.hideAll : void 0;
    const isWithinMenu = !!hideMenu;
    const onClick = useEvent((event) => {
      onClickProp == null ? void 0 : onClickProp(event);
      if (event.defaultPrevented)
        return;
      if (isDownloading(event))
        return;
      if (isOpeningInNewTab(event))
        return;
      if (!hideMenu)
        return;
      const popupType = event.currentTarget.getAttribute("aria-haspopup");
      if (popupType === "menu")
        return;
      if (!hideOnClickProp(event))
        return;
      hideMenu();
    });
    const contentElement = useStoreState(
      store,
      (state) => "contentElement" in state ? state.contentElement : null
    );
    const role = getPopupItemRole(contentElement, "menuitem");
    props = __spreadProps(__spreadValues({
      role
    }, props), {
      onClick
    });
    props = useCompositeItem(__spreadValues({ store, preventScrollOnKeyDown }, props));
    props = useCompositeHover(__spreadProps(__spreadValues({
      store
    }, props), {
      focusOnHover: (event) => {
        if (typeof focusOnHover === "function")
          return focusOnHover(event);
        if (focusOnHover != null)
          return focusOnHover;
        if (event.type === "mouseleave")
          return isWithinMenu;
        const state = store == null ? void 0 : store.getState();
        if (isWithinMenu) {
          if (event.currentTarget.hasAttribute("aria-expanded")) {
            event.currentTarget.focus();
          }
          return true;
        } else if (hasExpandedMenuButton(state == null ? void 0 : state.items, event.currentTarget)) {
          event.currentTarget.focus();
          return true;
        }
        return false;
      }
    }));
    return props;
  }
);
var MenuItem = createMemoComponent((props) => {
  const htmlProps = useMenuItem(props);
  return createElement("div", htmlProps);
});
if (process.env.NODE_ENV !== "production") {
  MenuItem.displayName = "MenuItem";
}

export {
  useMenuItem,
  MenuItem
};
