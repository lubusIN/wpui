import type { DialogHeadingOptions } from "../dialog/dialog-heading.js";
import type { As, Props } from "../utils/types.js";
import type { PopoverStore } from "./popover-store.js";
/**
 * Returns props to create a `PopoverHeading` component. This hook must be used
 * in a component that's wrapped with `Popover` so the `aria-labelledby` prop is
 * properly set on the popover element.
 * @see https://ariakit.org/components/popover
 * @example
 * ```jsx
 * // This component must be wrapped with Popover
 * const props = usePopoverHeading();
 * <Role {...props}>Heading</Role>
 * ```
 */
export declare const usePopoverHeading: import("../utils/types.js").Hook<PopoverHeadingOptions<"h1">>;
/**
 * Renders a heading in a popover. This component must be wrapped with `Popover`
 * so the `aria-labelledby` prop is properly set on the popover element.
 * @see https://ariakit.org/components/popover
 * @example
 * ```jsx
 * const popover = usePopoverStore();
 * <Popover store={popover}>
 *   <PopoverHeading>Heading</PopoverHeading>
 * </Popover>
 * ```
 */
export declare const PopoverHeading: import("../utils/types.js").Component<PopoverHeadingOptions<"h1">>;
export interface PopoverHeadingOptions<T extends As = "h1"> extends DialogHeadingOptions<T> {
    /**
     * Object returned by the `usePopoverStore` hook. If not provided, the parent
     * `Popover` component's context will be used.
     */
    store?: PopoverStore;
}
export type PopoverHeadingProps<T extends As = "h1"> = Props<PopoverHeadingOptions<T>>;
