import type { As, Options, Props } from "../utils/types.js";
import type { SelectStore } from "./select-store.js";
/**
 * Returns props to create a `SelectLabel` component. Since it's not a native
 * select element, we can't use the native label element. The `SelectLabel`
 * component will move focus and click on the `Select` component when the user
 * clicks on the label.
 * @see https://ariakit.org/components/select
 * @example
 * ```jsx
 * const store = useSelectStore();
 * const props = useSelectLabel({ store });
 * <Role {...props}>Favorite fruit</Role>
 * <Select store={store} />
 * ```
 */
export declare const useSelectLabel: import("../utils/types.js").Hook<SelectLabelOptions<"div">>;
/**
 * Renders a label for the `Select` component. Since it's not a native select
 * element, we can't use the native label element. The `SelectLabel` component
 * will move focus and click on the `Select` component when the user clicks on
 * the label.
 * @see https://ariakit.org/components/select
 * @example
 * ```jsx
 * const select = useSelectStore({ defaultValue: "Apple" });
 * <SelectLabel store={select}>Favorite fruit</SelectLabel>
 * <Select store={select} />
 * <SelectPopover store={select}>
 *   <SelectItem value="Apple" />
 *   <SelectItem value="Orange" />
 * </SelectPopover>
 * ```
 */
export declare const SelectLabel: import("../utils/types.js").Component<SelectLabelOptions<"div">>;
export interface SelectLabelOptions<T extends As = "div"> extends Options<T> {
    /**
     * Object returned by the `useSelectStore` hook. If not provided, the parent
     * `Select` component's context will be used.
     */
    store: SelectStore;
}
export type SelectLabelProps<T extends As = "div"> = Props<SelectLabelOptions<T>>;
