import type { As, Options, Props } from "../utils/types.js";
import type { CompositeStore } from "./composite-store.js";
/**
 * Returns props to create a `CompositeTypeahead` component.
 * @see https://ariakit.org/components/composite
 * @example
 * ```jsx
 * const store = useCompositeStore();
 * const props = useCompositeTypeahead({ store });
 * <Composite store={store} {...props}>
 *   <CompositeItem>Item 1</CompositeItem>
 *   <CompositeItem>Item 2</CompositeItem>
 * </Composite>
 * ```
 */
export declare const useCompositeTypeahead: import("../utils/types.js").Hook<CompositeTypeaheadOptions<"div">>;
/**
 * Renders a component that adds typeahead functionality to composite
 * components.
 * @see https://ariakit.org/components/composite
 * @example
 * ```jsx
 * const composite = useCompositeStore();
 * <Composite store={composite} render={<CompositeTypeahead />}>
 *   <CompositeItem>Item 1</CompositeItem>
 *   <CompositeItem>Item 2</CompositeItem>
 * </Composite>
 * ```
 */
export declare const CompositeTypeahead: import("../utils/types.js").Component<CompositeTypeaheadOptions<"div">>;
export interface CompositeTypeaheadOptions<T extends As = "div"> extends Options<T> {
    /**
     * Object returned by the `useCompositeStore` hook. If not provided, the
     * parent `Composite` component's context will be used.
     */
    store?: CompositeStore;
    /**
     * Determines whether the typeahead behavior is enabled.
     *
     * Live examples:
     * - [Multi-selectable
     *   Combobox](https://ariakit.org/examples/combobox-multiple)
     * @default true
     */
    typeahead?: boolean;
}
export type CompositeTypeaheadProps<T extends As = "div"> = Props<CompositeTypeaheadOptions<T>>;
