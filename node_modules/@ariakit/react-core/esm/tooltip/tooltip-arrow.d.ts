import type { PopoverArrowOptions } from "../popover/popover-arrow.js";
import type { As, Props } from "../utils/types.js";
import type { TooltipStore } from "./tooltip-store.js";
/**
 * Returns props to create a `TooltipArrow` component.
 * @see https://ariakit.org/components/tooltip
 * @example
 * ```jsx
 * const store = useToolTipStore();
 * const props = useTooltipArrow({ store });
 * <TooltipAnchor store={store}>Anchor</TooltipAnchor>
 * <Tooltip store={store}>
 *   <Role {...props} />
 *   Tooltip
 * </Tooltip>
 * ```
 */
export declare const useTooltipArrow: import("../utils/types.js").Hook<TooltipArrowOptions<"div">>;
/**
 * Renders an arrow inside a `Tooltip` component.
 * @see https://ariakit.org/components/tooltip
 * @example
 * ```jsx
 * const tooltip = useTooltipStore();
 * <TooltipAnchor store={tooltip}>Anchor</TooltipAnchor>
 * <Tooltip store={tooltip}>
 *   <TooltipArrow />
 *   Tooltip
 * </Tooltip>
 * ```
 */
export declare const TooltipArrow: import("../utils/types.js").Component<TooltipArrowOptions<"div">>;
export interface TooltipArrowOptions<T extends As = "div"> extends PopoverArrowOptions<T> {
    /**
     * Object returned by the `useTooltipStore` hook. If not provided, the parent
     * `Tooltip` component's context will be used.
     */
    store?: TooltipStore;
}
export type TooltipArrowProps<T extends As = "div"> = Props<TooltipArrowOptions<T>>;
