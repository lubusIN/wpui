{"version":3,"names":[],"sources":["@wordpress/components/src/dropdown-menu-v2/types.ts"],"sourcesContent":["/**\n * External dependencies\n */\nimport type * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu';\n\nexport type DropdownMenuProps = {\n\t/**\n\t * The open state of the dropdown menu when it is initially rendered. Use when\n\t * you do not need to control its open state.\n\t *\n\t */\n\tdefaultOpen?: DropdownMenuPrimitive.DropdownMenuProps[ 'defaultOpen' ];\n\t/**\n\t * The controlled open state of the dropdown menu. Must be used in conjunction\n\t * with `onOpenChange`.\n\t */\n\topen?: DropdownMenuPrimitive.DropdownMenuProps[ 'open' ];\n\t/**\n\t * Event handler called when the open state of the dropdown menu changes.\n\t */\n\tonOpenChange?: DropdownMenuPrimitive.DropdownMenuProps[ 'onOpenChange' ];\n\t/**\n\t * The modality of the dropdown menu. When set to true, interaction with\n\t * outside elements will be disabled and only menu content will be visible to\n\t * screen readers.\n\t *\n\t * @default true\n\t */\n\tmodal?: DropdownMenuPrimitive.DropdownMenuProps[ 'modal' ];\n\t/**\n\t * The preferred side of the trigger to render against when open.\n\t * Will be reversed when collisions occur and avoidCollisions is enabled.\n\t *\n\t * @default 'bottom'\n\t */\n\tside?: DropdownMenuPrimitive.DropdownMenuContentProps[ 'side' ];\n\t/**\n\t * The distance in pixels from the trigger.\n\t *\n\t * @default 0\n\t */\n\tsideOffset?: DropdownMenuPrimitive.DropdownMenuContentProps[ 'sideOffset' ];\n\t/**\n\t * The preferred alignment against the trigger.\n\t * May change when collisions occur.\n\t *\n\t * @default 'start'\n\t */\n\talign?: DropdownMenuPrimitive.DropdownMenuContentProps[ 'align' ];\n\t/**\n\t * An offset in pixels from the \"start\" or \"end\" alignment options.\n\t *\n\t * @default 0\n\t */\n\talignOffset?: DropdownMenuPrimitive.DropdownMenuContentProps[ 'alignOffset' ];\n\t/**\n\t * The trigger button.\n\t */\n\ttrigger: React.ReactNode;\n\t/**\n\t * The contents of the dropdown\n\t */\n\tchildren: React.ReactNode;\n};\n\nexport type DropdownSubMenuTriggerProps = {\n\t/**\n\t * The contents of the item.\n\t */\n\tchildren: React.ReactNode;\n\t/**\n\t * The contents of the item's prefix.\n\t */\n\tprefix?: React.ReactNode;\n\t/**\n\t * The contents of the item's suffix.\n\t *\n\t * @default The standard chevron icon for a submenu trigger.\n\t */\n\tsuffix?: React.ReactNode;\n};\n\nexport type DropdownSubMenuProps = {\n\t/**\n\t * The open state of the submenu when it is initially rendered. Use when you\n\t * do not need to control its open state.\n\t */\n\tdefaultOpen?: DropdownMenuPrimitive.DropdownMenuSubProps[ 'defaultOpen' ];\n\t/**\n\t * The controlled open state of the submenu. Must be used in conjunction with\n\t * `onOpenChange`.\n\t */\n\topen?: DropdownMenuPrimitive.DropdownMenuSubProps[ 'open' ];\n\t/**\n\t * Event handler called when the open state of the submenu changes.\n\t */\n\tonOpenChange?: DropdownMenuPrimitive.DropdownMenuSubProps[ 'onOpenChange' ];\n\t/**\n\t * When `true`, prevents the user from interacting with the item.\n\t */\n\tdisabled?: DropdownMenuPrimitive.DropdownMenuSubTriggerProps[ 'disabled' ];\n\t/**\n\t * Optional text used for typeahead purposes for the trigger. By default the typeahead\n\t * behavior will use the `.textContent` of the trigger. Use this when the content\n\t * is complex, or you have non-textual content inside.\n\t */\n\ttextValue?: DropdownMenuPrimitive.DropdownMenuSubTriggerProps[ 'textValue' ];\n\t/**\n\t * The contents rendered inside the trigger. The trigger should be\n\t * an instance of the `DropdownSubMenuTriggerProps` component.\n\t */\n\ttrigger: React.ReactNode;\n\t/**\n\t * The contents of the dropdown sub menu\n\t */\n\tchildren: React.ReactNode;\n};\n\nexport type DropdownMenuItemProps = {\n\t/**\n\t * When true, prevents the user from interacting with the item.\n\t *\n\t * @default false\n\t */\n\tdisabled?: DropdownMenuPrimitive.DropdownMenuItemProps[ 'disabled' ];\n\t/**\n\t * Event handler called when the user selects an item (via mouse or keyboard).\n\t * Calling `event.preventDefault` in this handler will prevent the dropdown\n\t * menu from closing when selecting that item.\n\t */\n\tonSelect?: DropdownMenuPrimitive.DropdownMenuItemProps[ 'onSelect' ];\n\t/**\n\t * Optional text used for typeahead purposes. By default the typeahead\n\t * behavior will use the `.textContent` of the item. Use this when the content\n\t * is complex, or you have non-textual content inside.\n\t */\n\ttextValue?: DropdownMenuPrimitive.DropdownMenuItemProps[ 'textValue' ];\n\t/**\n\t * The contents of the item\n\t */\n\tchildren: React.ReactNode;\n\t/**\n\t * The contents of the item's prefix\n\t */\n\tprefix?: React.ReactNode;\n\t/**\n\t * The contents of the item's suffix\n\t */\n\tsuffix?: React.ReactNode;\n};\n\nexport type DropdownMenuCheckboxItemProps = {\n\t/**\n\t * The controlled checked state of the item.\n\t * Must be used in conjunction with `onCheckedChange`.\n\t *\n\t * @default false\n\t */\n\tchecked?: DropdownMenuPrimitive.DropdownMenuCheckboxItemProps[ 'checked' ];\n\t/**\n\t * Event handler called when the checked state changes.\n\t */\n\tonCheckedChange?: DropdownMenuPrimitive.DropdownMenuCheckboxItemProps[ 'onCheckedChange' ];\n\t/**\n\t * When `true`, prevents the user from interacting with the item.\n\t */\n\tdisabled?: DropdownMenuPrimitive.DropdownMenuCheckboxItemProps[ 'disabled' ];\n\t/**\n\t * Event handler called when the user selects an item (via mouse or keyboard).\n\t * Calling `event.preventDefault` in this handler will prevent the dropdown\n\t * \tmenu from closing when selecting that item.\n\t */\n\tonSelect?: DropdownMenuPrimitive.DropdownMenuCheckboxItemProps[ 'onSelect' ];\n\t/**\n\t * Optional text used for typeahead purposes. By default the typeahead\n\t * behavior will use the `.textContent` of the item. Use this when the content\n\t * is complex, or you have non-textual content inside.\n\t */\n\ttextValue?: DropdownMenuPrimitive.DropdownMenuCheckboxItemProps[ 'textValue' ];\n\t/**\n\t * The contents of the checkbox item\n\t */\n\tchildren: React.ReactNode;\n\t/**\n\t * The contents of the checkbox item's suffix\n\t */\n\tsuffix?: React.ReactNode;\n};\n\nexport type DropdownMenuRadioGroupProps = {\n\t/**\n\t * The value of the selected item in the group.\n\t */\n\tvalue?: DropdownMenuPrimitive.DropdownMenuRadioGroupProps[ 'value' ];\n\t/**\n\t * Event handler called when the value changes.\n\t */\n\tonValueChange?: DropdownMenuPrimitive.DropdownMenuRadioGroupProps[ 'onValueChange' ];\n\t/**\n\t * The contents of the radio group\n\t */\n\tchildren: React.ReactNode;\n};\n\nexport type DropdownMenuRadioItemProps = {\n\t/**\n\t * The unique value of the item.\n\t */\n\tvalue: DropdownMenuPrimitive.DropdownMenuRadioItemProps[ 'value' ];\n\t/**\n\t * When `true`, prevents the user from interacting with the item.\n\t */\n\tdisabled?: DropdownMenuPrimitive.DropdownMenuRadioItemProps[ 'disabled' ];\n\t/**\n\t * Event handler called when the user selects an item (via mouse or keyboard).\n\t * Calling `event.preventDefault` in this handler will prevent the dropdown\n\t * menu from closing when selecting that item.\n\t */\n\tonSelect?: DropdownMenuPrimitive.DropdownMenuRadioItemProps[ 'onSelect' ];\n\t/**\n\t * Optional text used for typeahead purposes. By default the typeahead\n\t * behavior will use the `.textContent` of the item. Use this when the content\n\t * is complex, or you have non-textual content inside.\n\t */\n\ttextValue?: DropdownMenuPrimitive.DropdownMenuRadioItemProps[ 'textValue' ];\n\t/**\n\t * The contents of the radio item\n\t */\n\tchildren: React.ReactNode;\n\t/**\n\t * The contents of the radio item's suffix\n\t */\n\tsuffix?: React.ReactNode;\n};\n\nexport type DropdownMenuLabelProps = {\n\t/**\n\t * The contents of the label\n\t */\n\tchildren: React.ReactNode;\n};\n\nexport type DropdownMenuGroupProps = {\n\t/**\n\t * The contents of the group\n\t */\n\tchildren: React.ReactNode;\n};\n\nexport type DropdownMenuSeparatorProps = {};\n\nexport type DropdownMenuInternalContext = {\n\t/**\n\t * This variant can be used to change the appearance of the component in\n\t * specific contexts, ie. when rendered inside the `Toolbar` component.\n\t */\n\tvariant?: 'toolbar';\n};\n\nexport type DropdownMenuPrivateContext = Pick<\n\tDropdownMenuInternalContext,\n\t'variant'\n> & {\n\tportalContainer: HTMLElement | null;\n};\n"],"mappings":""}