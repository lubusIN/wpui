import * as Core from "@ariakit/core/tab/tab-store";
import type { CompositeStoreFunctions, CompositeStoreOptions, CompositeStoreState } from "../composite/composite-store.js";
import type { Store } from "../utils/store.js";
type Item = Core.TabStoreItem;
export declare function useTabStoreOptions(props: TabStoreProps): Partial<import("../collection/collection-store.js").CollectionStoreOptions<{
    id: string;
    element?: HTMLElement | null | undefined;
} & {
    rowId?: string | undefined;
    disabled?: boolean | undefined;
    children?: string | undefined;
} & {
    dimmed?: boolean | undefined;
}>>;
export declare function useTabStoreProps<T extends Store<Core.TabStore>>(store: T, props: TabStoreProps): T & {
    panels: Store<import("@ariakit/core/collection/collection-store").CollectionStore<{
        id: string;
        element?: HTMLElement | null | undefined;
    } & {
        tabId?: string | null | undefined;
    }>>;
};
/**
 * Creates a tab store.
 * @see https://ariakit.org/components/tab
 * @example
 * ```jsx
 * const tab = useTabStore();
 * <TabList store={tab}>
 *   <Tab>Tab 1</Tab>
 *   <Tab>Tab 2</Tab>
 * </TabList>
 * <TabPanel store={tab}>Panel 1</TabPanel>
 * <TabPanel store={tab}>Panel 2</TabPanel>
 * ```
 */
export declare function useTabStore(props?: TabStoreProps): TabStore;
export type TabStoreItem = Item;
export interface TabStoreState extends Core.TabStoreState, CompositeStoreState<Item> {
}
export interface TabStoreFunctions extends Core.TabStoreFunctions, CompositeStoreFunctions<Item> {
    panels: Store<Core.TabStoreFunctions["panels"]>;
}
export interface TabStoreOptions extends Core.TabStoreOptions, CompositeStoreOptions<Item> {
    /**
     * Function that will be called when the `selectedId` state changes.
     * @param selectedId The new selected id.
     * @example
     * function Tabs({ visibleTab, onTabChange }) {
     *   const tab = useTabStore({
     *     selectedId: visibleTab,
     *     setSelectedId: onTabChange,
     *   });
     * }
     */
    setSelectedId?: (selectedId: TabStoreState["selectedId"]) => void;
}
export type TabStoreProps = TabStoreOptions & Core.TabStoreProps;
export type TabStore = TabStoreFunctions & Store<Core.TabStore>;
export {};
