/// <reference types="react" />
/**
 * External dependencies
 */
import type { Meta } from '@storybook/react';
/**
 * Internal dependencies
 */
import SearchControl from '..';
declare const meta: Meta<typeof SearchControl>;
export default meta;
export declare const Default: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0a347bb9").R, Pick<import("../../base-control/types").BaseControlProps, "label" | "help" | "__nextHasNoMarginBottom"> & {
    hideLabelFromVision?: boolean | undefined;
    onChange: (value: string) => void;
    onClose?: (() => void) | undefined;
    placeholder?: string | undefined;
    value?: string | undefined;
    size?: "default" | "compact" | undefined;
    __next40pxDefaultSize?: boolean | undefined;
} & Omit<Pick<import("react").DetailedHTMLProps<import("react").InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, "key" | keyof import("react").InputHTMLAttributes<HTMLInputElement>>, "children" | "label" | "onClose" | "help" | "onChange" | "size" | "as" | "placeholder" | "value" | "hideLabelFromVision" | "__nextHasNoMarginBottom" | "__next40pxDefaultSize"> & import("react").RefAttributes<HTMLInputElement>>;
/**
 * When an `onClose` callback is provided, the search control will render a close button
 * that will trigger the given callback.
 *
 * Use this if you want the button to trigger your own logic to close the search field entirely,
 * rather than just clearing the input value.
 */
export declare const WithOnClose: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0a347bb9").R, Pick<import("../../base-control/types").BaseControlProps, "label" | "help" | "__nextHasNoMarginBottom"> & {
    hideLabelFromVision?: boolean | undefined;
    onChange: (value: string) => void;
    onClose?: (() => void) | undefined;
    placeholder?: string | undefined;
    value?: string | undefined;
    size?: "default" | "compact" | undefined;
    __next40pxDefaultSize?: boolean | undefined;
} & Omit<Pick<import("react").DetailedHTMLProps<import("react").InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, "key" | keyof import("react").InputHTMLAttributes<HTMLInputElement>>, "children" | "label" | "onClose" | "help" | "onChange" | "size" | "as" | "placeholder" | "value" | "hideLabelFromVision" | "__nextHasNoMarginBottom" | "__next40pxDefaultSize"> & import("react").RefAttributes<HTMLInputElement>>;
//# sourceMappingURL=index.story.d.ts.map