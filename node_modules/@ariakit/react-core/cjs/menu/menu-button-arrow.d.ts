import type { PopoverDisclosureArrowOptions } from "../popover/popover-disclosure-arrow.js";
import type { As, Props } from "../utils/types.js";
import type { MenuStore } from "./menu-store.js";
/**
 * Returns props to create a `MenuButtonArrow` component.
 * @see https://ariakit.org/components/menu
 * @example
 * ```jsx
 * const store = useMenuStore();
 * const props = useMenuButtonArrow({ store });
 * <MenuButton store={store}>
 *   Edit
 *   <Role {...props} />
 * </MenuButton>
 * <Menu store={store}>
 *   <MenuItem>Undo</MenuItem>
 *   <MenuItem>Redo</MenuItem>
 * </Menu>
 * ```
 */
export declare const useMenuButtonArrow: import("../utils/types.js").Hook<MenuButtonArrowOptions<"span">>;
/**
 * Renders an arrow pointing to the menu position, usually inside a
 * `MenuButton`.
 * @see https://ariakit.org/components/menu
 * @example
 * ```jsx
 * const menu = useMenuStore();
 * <MenuButton store={menu}>
 *   Edit
 *   <MenuButtonArrow />
 * </MenuButton>
 * <Menu store={menu}>
 *   <MenuItem>Undo</MenuItem>
 *   <MenuItem>Redo</MenuItem>
 * </Menu>
 * ```
 */
export declare const MenuButtonArrow: import("../utils/types.js").Component<MenuButtonArrowOptions<"span">>;
export interface MenuButtonArrowOptions<T extends As = "span"> extends PopoverDisclosureArrowOptions<T> {
    /**
     * Object returned by the `useMenuStore` hook. If not provided, the parent
     * `MenuButton` component's context will be used.
     */
    store?: MenuStore;
}
export type MenuButtonArrowProps<T extends As = "span"> = Props<MenuButtonArrowOptions<T>>;
