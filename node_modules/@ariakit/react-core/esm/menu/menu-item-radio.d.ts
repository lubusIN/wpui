import type { RadioOptions } from "../radio/radio.js";
import type { As, Props } from "../utils/types.js";
import type { MenuItemOptions } from "./menu-item.js";
import type { MenuStore } from "./menu-store.js";
/**
 * Returns props to create a `MenuItemRadio` component.
 * @see https://ariakit.org/components/menu
 * @example
 * ```jsx
 * const store = useMenuStore({ defaultValues: { fruit: "apple" } });
 * const apple = useMenuItemRadio({ store, name: "fruit", value: "apple" });
 * const orange = useMenuItemRadio({ store, name: "fruit", value: "orange" });
 * <MenuButton store={store}>Fruit</MenuButton>
 * <Menu store={store}>
 *   <Role {...apple}>Apple</Role>
 *   <Role {...orange}>Orange</Role>
 * </Menu>
 * ```
 */
export declare const useMenuItemRadio: import("../utils/types.js").Hook<MenuItemRadioOptions<"div">>;
/**
 * Renders a menu item radio inside a menu.
 * @see https://ariakit.org/components/menu
 * @example
 * ```jsx
 * const menu = useMenuStore({ defaultValues: { fruit: "apple" } });
 * <MenuButton store={menu}>Fruit</MenuButton>
 * <Menu store={menu}>
 *   <MenuItemRadio name="fruit" value="apple">
 *     Apple
 *   </MenuItemRadio>
 *   <MenuItemRadio name="fruit" value="orange">
 *     Orange
 *   </MenuItemRadio>
 * </Menu>
 * ```
 */
export declare const MenuItemRadio: import("../utils/types.js").Component<MenuItemRadioOptions<"div">>;
export interface MenuItemRadioOptions<T extends As = "div"> extends MenuItemOptions<T>, Omit<RadioOptions<T>, "store"> {
    /**
     * Object returned by the `useMenuStore` hook. If not provided, the parent
     * `Menu` component's context will be used.
     */
    store?: MenuStore;
    /**
     * MenuItemRadio's name as in `menu.values`.
     */
    name: string;
    /**
     * @default false
     */
    hideOnClick?: MenuItemOptions<T>["hideOnClick"];
}
export type MenuItemRadioProps<T extends As = "div"> = Props<MenuItemRadioOptions<T>>;
