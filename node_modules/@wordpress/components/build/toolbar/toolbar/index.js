"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Toolbar = void 0;
var _element = require("@wordpress/element");
var _classnames = _interopRequireDefault(require("classnames"));
var _deprecated = _interopRequireDefault(require("@wordpress/deprecated"));
var _toolbarGroup = _interopRequireDefault(require("../toolbar-group"));
var _toolbarContainer = _interopRequireDefault(require("./toolbar-container"));
var _context = require("../../ui/context");
/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const CONTEXT_SYSTEM_VALUE = {
  DropdownMenu: {
    variant: 'toolbar'
  },
  Dropdown: {
    variant: 'toolbar'
  }
};
function UnforwardedToolbar({
  className,
  label,
  ...props
}, ref) {
  if (!label) {
    (0, _deprecated.default)('Using Toolbar without label prop', {
      since: '5.6',
      alternative: 'ToolbarGroup component',
      link: 'https://developer.wordpress.org/block-editor/components/toolbar/'
    });
    // Extracting title from `props` because `ToolbarGroup` doesn't accept it.
    const {
      title: _title,
      ...restProps
    } = props;
    return (0, _element.createElement)(_toolbarGroup.default, {
      isCollapsed: false,
      ...restProps,
      className: className
    });
  }
  // `ToolbarGroup` already uses components-toolbar for compatibility reasons.
  const finalClassName = (0, _classnames.default)('components-accessible-toolbar', className);
  return (0, _element.createElement)(_context.ContextSystemProvider, {
    value: CONTEXT_SYSTEM_VALUE
  }, (0, _element.createElement)(_toolbarContainer.default, {
    className: finalClassName,
    label: label,
    ref: ref,
    ...props
  }));
}

/**
 * Renders a toolbar.
 *
 * To add controls, simply pass `ToolbarButton` components as children.
 *
 * ```jsx
 * import { Toolbar, ToolbarButton } from '@wordpress/components';
 * import { formatBold, formatItalic, link } from '@wordpress/icons';
 *
 * function MyToolbar() {
 *   return (
 *     <Toolbar label="Options">
 *       <ToolbarButton icon={ formatBold } label="Bold" />
 *       <ToolbarButton icon={ formatItalic } label="Italic" />
 *       <ToolbarButton icon={ link } label="Link" />
 *     </Toolbar>
 *   );
 * }
 * ```
 */
const Toolbar = (0, _element.forwardRef)(UnforwardedToolbar);
exports.Toolbar = Toolbar;
var _default = Toolbar;
exports.default = _default;
//# sourceMappingURL=index.js.map