"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _element = require("@wordpress/element");
var _components = require("@wordpress/components");
var _icons = require("@wordpress/icons");
/**
 * WordPress dependencies
 */

/**
 * Toolbar button component that, upon a long press, opens a Picker
 * to allow selecting from among multiple options.
 *
 * @param {Object} props         Component props.
 * @param {Object} props.options Options to pick from.
 */
function ToolbarButtonWithOptions({
  options
}) {
  const picker = (0, _element.useRef)();
  function presentPicker() {
    if (picker.current) {
      picker.current.presentPicker();
    }
  }
  function onValueSelected(selectedValue) {
    const selectedOption = options.find(op => op.value === selectedValue);
    if (selectedOption) {
      selectedOption.onClick();
    }
  }
  if (!options || options.length === 0) {
    return null;
  }
  const firstOption = options[0];
  const enablePicker = options.length > 1;
  return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_components.ToolbarGroup, null, (0, _element.createElement)(_components.ToolbarButton, {
    title: firstOption.title,
    icon: (0, _element.createElement)(_icons.Icon, {
      icon: firstOption.icon
    }),
    onClick: firstOption.onClick,
    onLongPress: enablePicker ? presentPicker : undefined
  })), enablePicker && (0, _element.createElement)(_components.Picker, {
    ref: picker,
    options: options,
    onChange: onValueSelected,
    hideCancelButton: true
  }));
}
var _default = ToolbarButtonWithOptions;
exports.default = _default;
//# sourceMappingURL=toolbar-button-with-options.native.js.map