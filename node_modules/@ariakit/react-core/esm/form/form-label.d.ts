import type { StringLike } from "@ariakit/core/form/types";
import type { CollectionItemOptions } from "../collection/collection-item.js";
import type { As, Props } from "../utils/types.js";
import type { FormStore } from "./form-store.js";
/**
 * Returns props to create a `FormLabel` component. If the field is not a native
 * input, select or textarea element, the hook will return props to render a
 * `span` element. Instead of relying on the `htmlFor` prop, it'll rely on the
 * `aria-labelledby` attribute on the form field. Clicking on the label will
 * move focus to the field even if it's not a native input.
 * @see https://ariakit.org/components/form
 * @example
 * ```jsx
 * const store = useFormStore({ defaultValues: { email: "" } });
 * const props = useFormLabel({ store, name: store.names.email });
 * <Form store={store}>
 *   <Role {...props}>Email</Role>
 *   <FormInput name={store.names.email} />
 * </Form>
 * ```
 */
export declare const useFormLabel: import("../utils/types.js").Hook<FormLabelOptions<"label">>;
/**
 * Renders a label for a form field. If the field is not a native input, select
 * or textarea element, the component will render a `span` element. Instead of
 * relying on the `htmlFor` prop, it'll rely on the `aria-labelledby` attribute
 * on the form field. Clicking on the label will move focus to the field even if
 * it's not a native input.
 * @see https://ariakit.org/components/form
 * @example
 * ```jsx
 * const form = useFormStore({ defaultValues: { email: "" } });
 * <Form store={form}>
 *   <FormLabel name={form.names.email}>Email</Role>
 *   <FormInput name={form.names.email} />
 * </Form>
 * ```
 */
export declare const FormLabel: import("../utils/types.js").Component<FormLabelOptions<"label">>;
export interface FormLabelOptions<T extends As = "label"> extends CollectionItemOptions<T> {
    /**
     * Object returned by the `useFormStore` hook. If not provided, the parent
     * `Form` component's context will be used.
     */
    store?: FormStore;
    /**
     * Name of the field.
     */
    name: StringLike;
}
export type FormLabelProps<T extends As = "label"> = Props<FormLabelOptions<T>>;
