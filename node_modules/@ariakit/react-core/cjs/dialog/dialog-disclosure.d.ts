import type { DisclosureOptions } from "../disclosure/disclosure.js";
import type { As, Props } from "../utils/types.js";
import type { DialogStore } from "./dialog-store.js";
/**
 * Returns props to create a `DialogDisclosure` component.
 * @see https://ariakit.org/components/dialog
 * @example
 * ```jsx
 * const store = useDialogStore();
 * const props = useDialogDisclosure({ store });
 * <Role {...props}>Disclosure</Role>
 * <Dialog store={store}>Content</Dialog>
 * ```
 */
export declare const useDialogDisclosure: import("../utils/types.js").Hook<DialogDisclosureOptions<"button">>;
/**
 * Renders a button that shows/hides a dialog.
 * @see https://ariakit.org/components/dialog
 * @example
 * ```jsx
 * const dialog = useDialogStore();
 * <DialogDisclosure store={dialog}>Disclosure</DialogDisclosure>
 * <Dialog store={dialog}>Content</Dialog>
 * ```
 */
export declare const DialogDisclosure: import("../utils/types.js").Component<DialogDisclosureOptions<"button">>;
export interface DialogDisclosureOptions<T extends As = "button"> extends DisclosureOptions<T> {
    /**
     * Object returned by the `useDialogStore` hook.
     */
    store: DialogStore;
}
export type DialogDisclosureProps<T extends As = "button"> = Props<DialogDisclosureOptions<T>>;
