import type { KeyboardEvent as ReactKeyboardEvent } from "react";
import type { BooleanOrCallback } from "@ariakit/core/utils/types";
import type { FocusableOptions } from "../focusable/focusable.js";
import type { As, Props } from "../utils/types.js";
import type { CompositeStore } from "./composite-store.js";
/**
 * Returns props to create a `Composite` component.
 * @see https://ariakit.org/components/composite
 * @example
 * ```jsx
 * const store = useCompositeStore();
 * const props = useComposite({ store });
 * <Role {...props}>
 *   <CompositeItem>Item 1</CompositeItem>
 *   <CompositeItem>Item 2</CompositeItem>
 * </Role>
 * ```
 */
export declare const useComposite: import("../utils/types.js").Hook<CompositeOptions<"div">>;
/**
 * Renders a composite widget.
 * @see https://ariakit.org/components/composite
 * @example
 * ```jsx
 * const composite = useCompositeStore();
 * <Composite store={composite}>
 *   <CompositeItem>Item 1</CompositeItem>
 *   <CompositeItem>Item 2</CompositeItem>
 * </Composite>
 * ```
 */
export declare const Composite: import("../utils/types.js").Component<CompositeOptions<"div">>;
export interface CompositeOptions<T extends As = "div"> extends FocusableOptions<T> {
    /**
     * Object returned by the `useCompositeStore` hook.
     */
    store: CompositeStore;
    /**
     * Whether the component should behave as a composite widget. This prop should
     * be set to `false` when combining different composite widgets where only one
     * should behave as such.
     *
     * Live examples:
     * - [Multi-selectable
     *   Combobox](https://ariakit.org/examples/combobox-multiple)
     * @default true
     * @example
     * ```jsx
     * // Combining two composite widgets (combobox and menu), where only the
     * // Combobox component should behave as a composite widget.
     * const combobox = useComboboxStore();
     * const menu = useMenuStore({ combobox });
     * <MenuButton store={menu}>Open Menu</MenuButton>
     * <Menu store={menu} composite={false}>
     *   <Combobox store={combobox} />
     *   <ComboboxList store={combobox}>
     *     <ComboboxItem value="Apple" />
     *     <ComboboxItem value="Banana" />
     *     <ComboboxItem value="Orange" />
     *   </ComboboxList>
     * </Menu>
     * ```
     */
    composite?: boolean;
    /**
     * Whether the active composite item should receive focus when `store.move` is
     * called.
     * @default true
     */
    focusOnMove?: boolean;
    /**
     * Whether the composite widget should move focus to an item when pressing
     * arrow keys.
     * @default true
     */
    moveOnKeyPress?: BooleanOrCallback<ReactKeyboardEvent<HTMLElement>>;
}
export type CompositeProps<T extends As = "div"> = Props<CompositeOptions<T>>;
