import {
  createElement,
  createHook,
  createMemoComponent
} from "../__chunks/NQJBHION.js";
import {
  useEvent,
  useId,
  useMergeRefs
} from "../__chunks/J7Q2EO23.js";
import "../__chunks/CP3U4HPL.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "../__chunks/PNRLI7OV.js";

// src/select/select-label.ts
var useSelectLabel = createHook(
  (_a) => {
    var _b = _a, { store } = _b, props = __objRest(_b, ["store"]);
    const id = useId(props.id);
    const onClickProp = props.onClick;
    const onClick = useEvent((event) => {
      onClickProp == null ? void 0 : onClickProp(event);
      if (event.defaultPrevented)
        return;
      queueMicrotask(() => {
        const select = store.getState().selectElement;
        select == null ? void 0 : select.focus();
        select == null ? void 0 : select.click();
      });
    });
    props = __spreadProps(__spreadValues({
      id
    }, props), {
      ref: useMergeRefs(store.setLabelElement, props.ref),
      onClick,
      style: __spreadValues({
        cursor: "default"
      }, props.style)
    });
    return props;
  }
);
var SelectLabel = createMemoComponent((props) => {
  const htmlProps = useSelectLabel(props);
  return createElement("div", htmlProps);
});
if (process.env.NODE_ENV !== "production") {
  SelectLabel.displayName = "SelectLabel";
}
export {
  SelectLabel,
  useSelectLabel
};
