import type { SyntheticEvent } from "react";
import type { BivariantCallback } from "@ariakit/core/utils/types";
import type { CompositeItemOptions } from "../composite/composite-item.js";
import type { As, Props } from "../utils/types.js";
import type { RadioStore } from "./radio-store.js";
/**
 * Returns props to create a `Radio` component.
 * @see https://ariakit.org/components/radio
 * @example
 * ```jsx
 * const store = useRadioStore();
 * const props = useRadio({ store, value: "Apple" });
 * <RadioGroup store={store}>
 *   <Role {...props} render={<input />} />
 *   <Radio value="Orange" />
 * </RadioGroup>
 * ```
 */
export declare const useRadio: import("../utils/types.js").Hook<RadioOptions<"input">>;
/**
 * Renders a radio button element.
 * @see https://ariakit.org/components/radio
 * @example
 * ```jsx
 * const radio = useRadioStore();
 * <RadioGroup store={radio}>
 *   <Radio value="Apple" />
 *   <Radio value="Orange" />
 * </RadioGroup>
 * ```
 */
export declare const Radio: import("../utils/types.js").Component<RadioOptions<"input">>;
export interface RadioOptions<T extends As = "input"> extends CompositeItemOptions<T> {
    /**
     * Object returned by the `useRadioStore` hook. If not provided, the parent
     * `RadioGroup` component's context will be used.
     */
    store?: RadioStore;
    /**
     * The value of the radio button.
     */
    value: string | number;
    /**
     * Whether the radio button is checked.
     */
    checked?: boolean;
    /**
     * Callback function that is called when the radio button store changes.
     */
    onChange?: BivariantCallback<(event: SyntheticEvent<HTMLInputElement>) => void>;
}
export type RadioProps<T extends As = "input"> = Props<RadioOptions<T>>;
