import type { KeyboardEvent, MouseEvent, SelectHTMLAttributes } from "react";
import type { BooleanOrCallback } from "@ariakit/core/utils/types";
import type { CompositeTypeaheadOptions } from "../composite/composite-typeahead.js";
import type { PopoverDisclosureOptions } from "../popover/popover-disclosure.js";
import type { As, Props } from "../utils/types.js";
import type { SelectStore } from "./select-store.js";
/**
 * Returns props to create a `Select` component.
 * @see https://ariakit.org/components/select
 * @example
 * ```jsx
 * const store = useSelectStore();
 * const props = useSelect({ store });
 * <Role {...props} />
 * ```
 */
export declare const useSelect: import("../utils/types.js").Hook<SelectOptions<"button">>;
/**
 * Renders a select button.
 * @see https://ariakit.org/components/select
 * @example
 * ```jsx
 * const select = useSelectStore();
 * <Select store={select} />
 * <SelectPopover store={select}>
 *   <SelectItem value="Apple" />
 *   <SelectItem value="Orange" />
 * </SelectPopover>
 * ```
 */
export declare const Select: import("../utils/types.js").Component<SelectOptions<"button">>;
export interface SelectOptions<T extends As = "button"> extends PopoverDisclosureOptions<T>, CompositeTypeaheadOptions<T>, Pick<SelectHTMLAttributes<HTMLSelectElement>, "name" | "form" | "required"> {
    /**
     * Object returned by the `useSelectStore` hook.
     */
    store: SelectStore;
    /**
     * Determines whether the select list will be shown when the user presses
     * arrow keys while the select element is focused.
     * @default true
     */
    showOnKeyDown?: BooleanOrCallback<KeyboardEvent<HTMLElement>>;
    /**
     * Determines whether pressing arrow keys will move the active item even
     * when the select list is hidden.
     * @default false
     */
    moveOnKeyDown?: BooleanOrCallback<KeyboardEvent<HTMLElement>>;
    /**
     * Determines whether `store.toggle()` will be called on click. By default,
     * the select list will be shown on press (on mouse down and on key down).
     * If this prop is set to `true`, the select list will be shown on click
     * instead.
     * @default false
     */
    toggleOnClick?: BooleanOrCallback<MouseEvent<HTMLElement>>;
    /**
     * Determines whether pressing space, enter or mouse down will toggle the
     * select list. This will be ignored if `toggleOnClick` is set to `true`.
     * @default true
     */
    toggleOnPress?: BooleanOrCallback<MouseEvent<HTMLElement> | KeyboardEvent<HTMLElement>>;
}
export type SelectProps<T extends As = "button"> = Props<SelectOptions<T>>;
