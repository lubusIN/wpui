import type { CompositeItemOptions } from "../composite/composite-item.js";
import type { As, Props } from "../utils/types.js";
import type { ToolbarStore } from "./toolbar-store.js";
/**
 * Returns props to create a `ToolbarItem` component.
 * @see https://ariakit.org/components/toolbar
 * @example
 * ```jsx
 * const store = useToolbarStore();
 * const props = useToolbarItem({ store });
 * <Toolbar store={store}>
 *   <Role {...props}>Item</Role>
 * </Toolbar>
 * ```
 */
export declare const useToolbarItem: import("../utils/types.js").Hook<ToolbarItemOptions<"button">>;
/**
 * Renders an interactive element in a toolbar.
 * @see https://ariakit.org/components/toolbar
 * @example
 * ```jsx
 * const toolbar = useToolbarStore();
 * <Toolbar store={toolbar}>
 *   <ToolbarItem>Item</ToolbarItem>
 * </Toolbar>
 * ```
 */
export declare const ToolbarItem: import("../utils/types.js").Component<ToolbarItemOptions<"button">>;
export interface ToolbarItemOptions<T extends As = "button"> extends CompositeItemOptions<T> {
    /**
     * Object returned by the `useToolbarStore` hook. If not provided, the parent
     * `Toolbar` component's context will be used.
     */
    store?: ToolbarStore;
}
export type ToolbarItemProps<T extends As = "button"> = Props<ToolbarItemOptions<T>>;
