import type { CompositeTypeaheadOptions } from "../composite/composite-typeahead.js";
import type { CompositeOptions } from "../composite/composite.js";
import type { DisclosureContentOptions } from "../disclosure/disclosure-content.js";
import type { As, Props } from "../utils/types.js";
import type { MenuStore } from "./menu-store.js";
/**
 * Returns props to create a `MenuList` component.
 * @see https://ariakit.org/components/menu
 * @example
 * ```jsx
 * const store = useMenuStore();
 * const props = useMenuList({ store });
 * <MenuButton store={store}>Edit</MenuButton>
 * <Role {...props}>
 *   <MenuItem>Undo</MenuItem>
 *   <MenuItem>Redo</MenuItem>
 * </Role>
 * ```
 */
export declare const useMenuList: import("../utils/types.js").Hook<MenuListOptions<"div">>;
/**
 * Renders a menu list element.
 * @see https://ariakit.org/components/menu
 * @example
 * ```jsx
 * const menu = useMenuStore();
 * <MenuButton store={menu}>Edit</MenuButton>
 * <MenuList store={menu}>
 *   <MenuItem>Undo</MenuItem>
 *   <MenuItem>Redo</MenuItem>
 * </MenuList>
 * ```
 */
export declare const MenuList: import("../utils/types.js").Component<MenuListOptions<"div">>;
export interface MenuListOptions<T extends As = "div"> extends CompositeOptions<T>, CompositeTypeaheadOptions<T>, Pick<DisclosureContentOptions, "alwaysVisible"> {
    /**
     * Object returned by the `useMenuStore` hook.
     */
    store: MenuStore;
}
export type MenuListProps<T extends As = "div"> = Props<MenuListOptions<T>>;
