import {
  MenuBarContext,
  MenuContext
} from "./HVBRRKV4.js";
import {
  useCompositeTypeahead
} from "./F4XABKPL.js";
import {
  useComposite
} from "./AAVDGJD5.js";
import {
  isHidden
} from "./WHEEIXMF.js";
import {
  createComponent,
  createElement,
  createHook
} from "./NQJBHION.js";
import {
  useStoreState
} from "./P63NRZ4A.js";
import {
  useEvent,
  useId,
  useMergeRefs,
  useWrapElement
} from "./J7Q2EO23.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "./PNRLI7OV.js";

// src/menu/menu-list.tsx
import { useContext, useEffect, useState } from "react";
import { jsx } from "react/jsx-runtime";
function useAriaLabelledBy(_a) {
  var _b = _a, { store } = _b, props = __objRest(_b, ["store"]);
  const [id, setId] = useState(void 0);
  const label = props["aria-label"];
  const disclosureElement = store.useState("disclosureElement");
  const contentElement = store.useState("contentElement");
  useEffect(() => {
    const disclosure = disclosureElement;
    if (!disclosure)
      return;
    const menu = contentElement;
    if (!menu)
      return;
    const menuLabel = label || menu.hasAttribute("aria-label");
    if (menuLabel) {
      setId(void 0);
    } else if (disclosure.id) {
      setId(disclosure.id);
    }
  }, [label, disclosureElement, contentElement]);
  return id;
}
var useMenuList = createHook(
  (_a) => {
    var _b = _a, { store, alwaysVisible, composite = true } = _b, props = __objRest(_b, ["store", "alwaysVisible", "composite"]);
    const parentMenu = useContext(MenuContext);
    const parentMenuBar = useContext(MenuBarContext);
    const hasParentMenu = !!parentMenu;
    const id = useId(props.id);
    const onKeyDownProp = props.onKeyDown;
    const dir = store.useState(
      (state) => state.placement.split("-")[0]
    );
    const orientation = store.useState(
      (state) => state.orientation === "both" ? void 0 : state.orientation
    );
    const isHorizontal = orientation !== "vertical";
    const isMenuBarHorizontal = !!useStoreState(
      parentMenuBar,
      (state) => state.orientation !== "vertical"
    );
    const onKeyDown = useEvent((event) => {
      onKeyDownProp == null ? void 0 : onKeyDownProp(event);
      if (event.defaultPrevented)
        return;
      if (hasParentMenu || parentMenuBar && !isHorizontal) {
        const hideMap = {
          ArrowRight: () => dir === "left" && !isHorizontal,
          ArrowLeft: () => dir === "right" && !isHorizontal,
          ArrowUp: () => dir === "bottom" && isHorizontal,
          ArrowDown: () => dir === "top" && isHorizontal
        };
        const action = hideMap[event.key];
        if (action == null ? void 0 : action()) {
          event.stopPropagation();
          event.preventDefault();
          return store.hide();
        }
      }
      if (parentMenuBar) {
        const keyMap = {
          ArrowRight: () => {
            if (!isMenuBarHorizontal)
              return;
            return parentMenuBar.next();
          },
          ArrowLeft: () => {
            if (!isMenuBarHorizontal)
              return;
            return parentMenuBar.previous();
          },
          ArrowDown: () => {
            if (isMenuBarHorizontal)
              return;
            return parentMenuBar.next();
          },
          ArrowUp: () => {
            if (isMenuBarHorizontal)
              return;
            return parentMenuBar.previous();
          }
        };
        const action = keyMap[event.key];
        const id2 = action == null ? void 0 : action();
        if (id2 !== void 0) {
          event.stopPropagation();
          event.preventDefault();
          parentMenuBar.move(id2);
        }
      }
    });
    props = useWrapElement(
      props,
      (element) => /* @__PURE__ */ jsx(MenuContext.Provider, { value: store, children: element }),
      [store]
    );
    const ariaLabelledBy = useAriaLabelledBy(__spreadValues({ store }, props));
    const mounted = store.useState("mounted");
    const hidden = isHidden(mounted, props.hidden, alwaysVisible);
    const style = hidden ? __spreadProps(__spreadValues({}, props.style), { display: "none" }) : props.style;
    props = __spreadProps(__spreadValues({
      id,
      "aria-labelledby": ariaLabelledBy,
      hidden
    }, props), {
      ref: useMergeRefs(id ? store.setContentElement : null, props.ref),
      style,
      onKeyDown
    });
    if (composite) {
      props = __spreadValues({
        role: "menu",
        "aria-orientation": orientation
      }, props);
    }
    props = useComposite(__spreadValues({ store, composite }, props));
    props = useCompositeTypeahead(__spreadValues({ store }, props));
    return props;
  }
);
var MenuList = createComponent((props) => {
  const htmlProps = useMenuList(props);
  return createElement("div", htmlProps);
});
if (process.env.NODE_ENV !== "production") {
  MenuList.displayName = "MenuList";
}

export {
  useMenuList,
  MenuList
};
