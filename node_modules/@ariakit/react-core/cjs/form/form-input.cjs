"use strict";Object.defineProperty(exports, "__esModule", {value: true});

var _NH6Q6YSMcjs = require('../__chunks/NH6Q6YSM.cjs');


var _OTRABJ4Ycjs = require('../__chunks/OTRABJ4Y.cjs');
require('../__chunks/ETK4FMZH.cjs');
require('../__chunks/ZQAFJQIS.cjs');


var _I4JDDV3Vcjs = require('../__chunks/I4JDDV3V.cjs');
require('../__chunks/LHHW5ZQP.cjs');




var _CWY2PHPRcjs = require('../__chunks/CWY2PHPR.cjs');


var _5WLTMVVQcjs = require('../__chunks/5WLTMVVQ.cjs');
require('../__chunks/7WUTS26Y.cjs');




var _72I2GWXFcjs = require('../__chunks/72I2GWXF.cjs');

// src/form/form-input.ts
var _react = require('react');
var _misc = require('@ariakit/core/utils/misc');
var useFormInput = _CWY2PHPRcjs.createHook.call(void 0, 
  (_a) => {
    var _b = _a, { store, name: nameProp } = _b, props = _72I2GWXFcjs.__objRest.call(void 0, _b, ["store", "name"]);
    const context = _react.useContext.call(void 0, _OTRABJ4Ycjs.FormContext);
    store = store || context;
    _misc.invariant.call(void 0, 
      store,
      process.env.NODE_ENV !== "production" && "FormInput must be wrapped in a Form component"
    );
    const name = `${nameProp}`;
    const onChangeProp = props.onChange;
    const onChange = _5WLTMVVQcjs.useEvent.call(void 0, (event) => {
      onChangeProp == null ? void 0 : onChangeProp(event);
      if (event.defaultPrevented)
        return;
      store == null ? void 0 : store.setValue(name, event.target.value);
    });
    const value = store.useValue(name);
    props = _72I2GWXFcjs.__spreadProps.call(void 0, _72I2GWXFcjs.__spreadValues.call(void 0, {
      value
    }, props), {
      onChange
    });
    props = _I4JDDV3Vcjs.useFocusable.call(void 0, props);
    props = _NH6Q6YSMcjs.useFormField.call(void 0, _72I2GWXFcjs.__spreadValues.call(void 0, { store, name }, props));
    return props;
  }
);
var FormInput = _CWY2PHPRcjs.createMemoComponent.call(void 0, (props) => {
  const htmlProps = useFormInput(props);
  return _CWY2PHPRcjs.createElement.call(void 0, "input", htmlProps);
});
if (process.env.NODE_ENV !== "production") {
  FormInput.displayName = "FormInput";
}



exports.FormInput = FormInput; exports.useFormInput = useFormInput;
