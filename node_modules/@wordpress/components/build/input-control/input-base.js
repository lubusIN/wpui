"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InputBase = InputBase;
exports.default = void 0;
var _element = require("@wordpress/element");
var _compose = require("@wordpress/compose");
var _backdrop = _interopRequireDefault(require("./backdrop"));
var _label = _interopRequireDefault(require("./label"));
var _inputControlStyles = require("./styles/input-control-styles");
var _context = require("../ui/context");
/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function useUniqueId(idProp) {
  const instanceId = (0, _compose.useInstanceId)(InputBase);
  const id = `input-base-control-${instanceId}`;
  return idProp || id;
}

// Adapter to map props for the new ui/flex component.
function getUIFlexProps(labelPosition) {
  const props = {};
  switch (labelPosition) {
    case 'top':
      props.direction = 'column';
      props.expanded = false;
      props.gap = 0;
      break;
    case 'bottom':
      props.direction = 'column-reverse';
      props.expanded = false;
      props.gap = 0;
      break;
    case 'edge':
      props.justify = 'space-between';
      break;
  }
  return props;
}
function InputBase({
  __next36pxDefaultSize,
  __unstableInputWidth,
  children,
  className,
  disabled = false,
  hideLabelFromVision = false,
  labelPosition,
  id: idProp,
  isFocused = false,
  label,
  prefix,
  size = 'default',
  suffix,
  ...props
}, ref) {
  const id = useUniqueId(idProp);
  const hideLabel = hideLabelFromVision || !label;
  const {
    paddingLeft,
    paddingRight
  } = (0, _inputControlStyles.getSizeConfig)({
    inputSize: size,
    __next36pxDefaultSize
  });
  const prefixSuffixContextValue = (0, _element.useMemo)(() => {
    return {
      InputControlPrefixWrapper: {
        paddingLeft
      },
      InputControlSuffixWrapper: {
        paddingRight
      }
    };
  }, [paddingLeft, paddingRight]);
  return (
    // @ts-expect-error The `direction` prop from Flex (FlexDirection) conflicts with legacy SVGAttributes `direction` (string) that come from React intrinsic prop definitions.
    (0, _element.createElement)(_inputControlStyles.Root, {
      ...props,
      ...getUIFlexProps(labelPosition),
      className: className,
      gap: 2,
      isFocused: isFocused,
      labelPosition: labelPosition,
      ref: ref
    }, (0, _element.createElement)(_label.default, {
      className: "components-input-control__label",
      hideLabelFromVision: hideLabelFromVision,
      labelPosition: labelPosition,
      htmlFor: id
    }, label), (0, _element.createElement)(_inputControlStyles.Container, {
      __unstableInputWidth: __unstableInputWidth,
      className: "components-input-control__container",
      disabled: disabled,
      hideLabel: hideLabel,
      labelPosition: labelPosition
    }, (0, _element.createElement)(_context.ContextSystemProvider, {
      value: prefixSuffixContextValue
    }, prefix && (0, _element.createElement)(_inputControlStyles.Prefix, {
      className: "components-input-control__prefix"
    }, prefix), children, suffix && (0, _element.createElement)(_inputControlStyles.Suffix, {
      className: "components-input-control__suffix"
    }, suffix)), (0, _element.createElement)(_backdrop.default, {
      disabled: disabled,
      isFocused: isFocused
    })))
  );
}
var _default = (0, _element.forwardRef)(InputBase);
exports.default = _default;
//# sourceMappingURL=input-base.js.map