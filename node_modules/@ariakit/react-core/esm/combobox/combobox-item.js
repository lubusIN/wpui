import {
  ComboboxContext,
  ComboboxItemValueContext
} from "../__chunks/5VGBBGF5.js";
import {
  useCompositeHover
} from "../__chunks/W5P7IKOU.js";
import {
  useCompositeItem
} from "../__chunks/FVD2NJZN.js";
import "../__chunks/P4RGQGTG.js";
import "../__chunks/VFNGSUSF.js";
import "../__chunks/T3DJZG63.js";
import "../__chunks/OXPV2NBK.js";
import "../__chunks/WJ37OVG2.js";
import "../__chunks/MYID4V27.js";
import "../__chunks/BMLNRUFQ.js";
import {
  createElement,
  createHook,
  createMemoComponent
} from "../__chunks/NQJBHION.js";
import "../__chunks/P63NRZ4A.js";
import {
  useBooleanEvent,
  useEvent,
  useWrapElement
} from "../__chunks/J7Q2EO23.js";
import "../__chunks/CP3U4HPL.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "../__chunks/PNRLI7OV.js";

// src/combobox/combobox-item.tsx
import { useCallback, useContext } from "react";
import { getPopupItemRole, isTextField } from "@ariakit/core/utils/dom";
import { isDownloading, isOpeningInNewTab } from "@ariakit/core/utils/events";
import { hasFocus } from "@ariakit/core/utils/focus";
import { invariant } from "@ariakit/core/utils/misc";
import { jsx } from "react/jsx-runtime";
var useComboboxItem = createHook(
  (_a) => {
    var _b = _a, {
      store,
      value,
      hideOnClick = value != null,
      setValueOnClick = true,
      focusOnHover = false,
      moveOnKeyPress = true,
      getItem: getItemProp
    } = _b, props = __objRest(_b, [
      "store",
      "value",
      "hideOnClick",
      "setValueOnClick",
      "focusOnHover",
      "moveOnKeyPress",
      "getItem"
    ]);
    const context = useContext(ComboboxContext);
    store = store || context;
    invariant(
      store,
      process.env.NODE_ENV !== "production" && "ComboboxItem must be wrapped in a ComboboxList or ComboboxPopover component"
    );
    const getItem = useCallback(
      (item) => {
        const nextItem = __spreadProps(__spreadValues({}, item), { value });
        if (getItemProp) {
          return getItemProp(nextItem);
        }
        return nextItem;
      },
      [value, getItemProp]
    );
    const onClickProp = props.onClick;
    const setValueOnClickProp = useBooleanEvent(setValueOnClick);
    const hideOnClickProp = useBooleanEvent(hideOnClick);
    const onClick = useEvent((event) => {
      onClickProp == null ? void 0 : onClickProp(event);
      if (event.defaultPrevented)
        return;
      if (isDownloading(event))
        return;
      if (isOpeningInNewTab(event))
        return;
      if (value != null && setValueOnClickProp(event)) {
        store == null ? void 0 : store.setValue(value);
      }
      if (hideOnClickProp(event)) {
        store == null ? void 0 : store.move(null);
        store == null ? void 0 : store.hide();
      }
    });
    const onKeyDownProp = props.onKeyDown;
    const onKeyDown = useEvent((event) => {
      onKeyDownProp == null ? void 0 : onKeyDownProp(event);
      if (event.defaultPrevented)
        return;
      const baseElement = store == null ? void 0 : store.getState().baseElement;
      if (!baseElement)
        return;
      if (hasFocus(baseElement))
        return;
      const printable = event.key.length === 1;
      if (printable || event.key === "Backspace" || event.key === "Delete") {
        queueMicrotask(() => baseElement.focus());
        if (isTextField(baseElement)) {
          store == null ? void 0 : store.setValue(baseElement.value);
        }
      }
    });
    props = useWrapElement(
      props,
      (element) => /* @__PURE__ */ jsx(ComboboxItemValueContext.Provider, { value, children: element }),
      [value]
    );
    const contentElement = store.useState("contentElement");
    props = __spreadProps(__spreadValues({
      role: getPopupItemRole(contentElement),
      children: value
    }, props), {
      onClick,
      onKeyDown
    });
    const moveOnKeyPressProp = useBooleanEvent(moveOnKeyPress);
    props = useCompositeItem(__spreadProps(__spreadValues({
      store
    }, props), {
      getItem,
      // Dispatch a custom event on the combobox input when moving to an item
      // with the keyboard so the Combobox component can enable inline
      // autocompletion.
      moveOnKeyPress: (event) => {
        if (!moveOnKeyPressProp(event))
          return false;
        const moveEvent = new Event("combobox-item-move");
        const baseElement = store == null ? void 0 : store.getState().baseElement;
        baseElement == null ? void 0 : baseElement.dispatchEvent(moveEvent);
        return true;
      }
    }));
    props = useCompositeHover(__spreadValues({ store, focusOnHover }, props));
    return props;
  }
);
var ComboboxItem = createMemoComponent(
  (props) => {
    const htmlProps = useComboboxItem(props);
    return createElement("div", htmlProps);
  }
);
if (process.env.NODE_ENV !== "production") {
  ComboboxItem.displayName = "ComboboxItem";
}
export {
  ComboboxItem,
  useComboboxItem
};
