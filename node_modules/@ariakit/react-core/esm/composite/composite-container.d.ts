import type { As, Options, Props } from "../utils/types.js";
import type { CompositeStore } from "./composite-store.js";
/**
 * Returns props to create a `CompositeContainer` component. This component
 * renders interactive widgets inside composite items. This should be used in
 * conjunction with the `CompositeItem` component, the `useCompositeItem` hook,
 * or any other component/hook that uses `CompositeItem` underneath.
 * @see https://ariakit.org/components/composite
 * @example
 * ```jsx
 * const store = useCompositeStore();
 * const props = useCompositeContainer({ store });
 * <Composite store={store}>
 *   <CompositeItem {...props}>
 *     <input type="text" />
 *   </CompositeItem>
 * </Composite>
 * ```
 */
export declare const useCompositeContainer: import("../utils/types.js").Hook<CompositeContainerOptions<"div">>;
/**
 * Renders a container for interactive widgets inside composite items. This
 * should be used in conjunction with the `CompositeItem` component or a
 * component that uses `CompositeItem` underneath.
 * @see https://ariakit.org/components/composite
 * @example
 * ```jsx
 * const composite = useCompositeStore();
 * <Composite store={composite}>
 *   <CompositeItem render={<CompositeContainer />}>
 *     <input type="text" />
 *   </CompositeItem>
 * </Composite>
 * ```
 */
export declare const CompositeContainer: import("../utils/types.js").Component<CompositeContainerOptions<"div">>;
export interface CompositeContainerOptions<T extends As = "div"> extends Options<T> {
    /**
     * Object returned by the `useCompositeStore` hook. If not provided, the
     * parent `Composite` component's context will be used.
     */
    store?: CompositeStore;
}
export type CompositeContainerProps<T extends As = "div"> = Props<CompositeContainerOptions<T>>;
