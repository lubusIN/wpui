import {
  useCollectionStoreOptions,
  useCollectionStoreProps
} from "../__chunks/RS7KBRGA.js";
import {
  useStore,
  useStoreProps
} from "../__chunks/P63NRZ4A.js";
import {
  useEvent
} from "../__chunks/J7Q2EO23.js";
import "../__chunks/CP3U4HPL.js";
import {
  __spreadProps,
  __spreadValues
} from "../__chunks/PNRLI7OV.js";

// src/form/form-store.ts
import { useCallback, useEffect, useMemo } from "react";
import * as Core from "@ariakit/core/form/form-store";
function useFormStoreOptions(props) {
  return useCollectionStoreOptions(props);
}
function useFormStoreProps(store, props) {
  store = useCollectionStoreProps(store, props);
  useStoreProps(store, props, "values", "setValues");
  useStoreProps(store, props, "errors", "setErrors");
  useStoreProps(store, props, "touched", "setTouched");
  const useValue = useCallback(
    (name) => store.useState(() => store.getValue(name)),
    [store]
  );
  const useValidate = useCallback(
    (callback) => {
      callback = useEvent(callback);
      const items = store.useState("items");
      useEffect(() => store.onValidate(callback), [items, callback]);
    },
    [store]
  );
  const useSubmit = useCallback(
    (callback) => {
      callback = useEvent(callback);
      const items = store.useState("items");
      useEffect(() => store.onSubmit(callback), [items, callback]);
    },
    [store]
  );
  return useMemo(
    () => __spreadProps(__spreadValues({}, store), {
      useValue,
      useValidate,
      useSubmit
    }),
    []
  );
}
function useFormStore(props = {}) {
  const options = useFormStoreOptions(props);
  const store = useStore(() => Core.createFormStore(__spreadValues(__spreadValues({}, props), options)));
  return useFormStoreProps(store, props);
}
export {
  useFormStore,
  useFormStoreOptions,
  useFormStoreProps
};
