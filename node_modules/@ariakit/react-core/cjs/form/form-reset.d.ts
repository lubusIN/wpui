import type { ButtonOptions } from "../button/button.js";
import type { As, Props } from "../utils/types.js";
import type { FormStore } from "./form-store.js";
/**
 * Returns props to create a `FormReset` component.
 * @see https://ariakit.org/components/form
 * @example
 * ```jsx
 * const store = useFormStore();
 * const props = useFormReset({ store });
 * <Form store={store}>
 *   <Role {...props}>Reset</Role>
 * </Form>
 * ```
 */
export declare const useFormReset: import("../utils/types.js").Hook<FormResetOptions<"button">>;
/**
 * Renders a reset buttom in a form.
 * @see https://ariakit.org/components/form
 * @example
 * ```jsx
 * const form = useFormStore();
 * <Form store={form}>
 *   <FormReset>Reset</FormReset>
 * </Form>
 * ```
 */
export declare const FormReset: import("../utils/types.js").Component<FormResetOptions<"button">>;
export interface FormResetOptions<T extends As = "button"> extends ButtonOptions<T> {
    /**
     * Object returned by the `useFormStore` hook. If not provided, the parent
     * `Form` component's context will be used.
     */
    store?: FormStore;
}
export type FormResetProps<T extends As = "button"> = Props<FormResetOptions<T>>;
