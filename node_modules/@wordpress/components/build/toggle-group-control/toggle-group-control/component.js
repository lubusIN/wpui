"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ToggleGroupControl = void 0;
var _element = require("@wordpress/element");
var _framerMotion = require("framer-motion");
var _compose = require("@wordpress/compose");
var _context = require("../../ui/context");
var _hooks = require("../../utils/hooks");
var _baseControl = _interopRequireDefault(require("../../base-control"));
var styles = _interopRequireWildcard(require("./styles"));
var _asRadioGroup = require("./as-radio-group");
var _asButtonGroup = require("./as-button-group");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/**
 * External dependencies
 */

// eslint-disable-next-line no-restricted-imports

/**
 * WordPress dependencies
 */

function UnconnectedToggleGroupControl(props, forwardedRef) {
  const {
    __nextHasNoMarginBottom = false,
    className,
    isAdaptiveWidth = false,
    isBlock = false,
    isDeselectable = false,
    label,
    hideLabelFromVision = false,
    help,
    onChange,
    size = 'default',
    value,
    children,
    ...otherProps
  } = (0, _context.useContextSystem)(props, 'ToggleGroupControl');
  const baseId = (0, _compose.useInstanceId)(ToggleGroupControl, 'toggle-group-control');
  const cx = (0, _hooks.useCx)();
  const classes = (0, _element.useMemo)(() => cx(styles.toggleGroupControl({
    isBlock,
    isDeselectable,
    size
  }), isBlock && styles.block, className), [className, cx, isBlock, isDeselectable, size]);
  const MainControl = isDeselectable ? _asButtonGroup.ToggleGroupControlAsButtonGroup : _asRadioGroup.ToggleGroupControlAsRadioGroup;
  return (0, _element.createElement)(_baseControl.default, {
    help: help,
    __nextHasNoMarginBottom: __nextHasNoMarginBottom
  }, !hideLabelFromVision && (0, _element.createElement)(styles.VisualLabelWrapper, null, (0, _element.createElement)(_baseControl.default.VisualLabel, null, label)), (0, _element.createElement)(MainControl, {
    ...otherProps,
    className: classes,
    isAdaptiveWidth: isAdaptiveWidth,
    label: label,
    onChange: onChange,
    ref: forwardedRef,
    size: size,
    value: value
  }, (0, _element.createElement)(_framerMotion.LayoutGroup, {
    id: baseId
  }, children)));
}

/**
 * `ToggleGroupControl` is a form component that lets users choose options
 * represented in horizontal segments. To render options for this control use
 * `ToggleGroupControlOption` component.
 *
 * This component is intended for selecting a single persistent value from a set of options,
 * similar to a how a radio button group would work. If you simply want a toggle to switch between views,
 * use a `TabPanel` instead.
 *
 * Only use this control when you know for sure the labels of items inside won't
 * wrap. For items with longer labels, you can consider a `SelectControl` or a
 * `CustomSelectControl` component instead.
 *
 * ```jsx
 * import {
 *   __experimentalToggleGroupControl as ToggleGroupControl,
 *   __experimentalToggleGroupControlOption as ToggleGroupControlOption,
 * } from '@wordpress/components';
 *
 * function Example() {
 *   return (
 *     <ToggleGroupControl label="my label" value="vertical" isBlock>
 *       <ToggleGroupControlOption value="horizontal" label="Horizontal" />
 *       <ToggleGroupControlOption value="vertical" label="Vertical" />
 *     </ToggleGroupControl>
 *   );
 * }
 * ```
 */
const ToggleGroupControl = (0, _context.contextConnect)(UnconnectedToggleGroupControl, 'ToggleGroupControl');
exports.ToggleGroupControl = ToggleGroupControl;
var _default = ToggleGroupControl;
exports.default = _default;
//# sourceMappingURL=component.js.map