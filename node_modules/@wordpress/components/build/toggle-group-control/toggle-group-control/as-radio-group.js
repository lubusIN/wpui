"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToggleGroupControlAsRadioGroup = void 0;
var _element = require("@wordpress/element");
var _radio = require("@ariakit/react/radio");
var _compose = require("@wordpress/compose");
var _view = require("../../view");
var _context = _interopRequireDefault(require("../context"));
var _utils = require("./utils");
/**
 * External dependencies
 */

// eslint-disable-next-line no-restricted-imports

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function UnforwardedToggleGroupControlAsRadioGroup({
  children,
  isAdaptiveWidth,
  label,
  onChange: onChangeProp,
  size,
  value: valueProp,
  id: idProp,
  ...otherProps
}, forwardedRef) {
  const generatedId = (0, _compose.useInstanceId)(ToggleGroupControlAsRadioGroup, 'toggle-group-control-as-radio-group');
  const baseId = idProp || generatedId;

  // Use a heuristic to understand if the component is being used in controlled
  // or uncontrolled mode, and consequently:
  // - when controlled, convert `undefined` values to `''` (ie. "no value")
  // - use the `value` prop as the `defaultValue` when uncontrolled
  const {
    value,
    defaultValue
  } = (0, _utils.useComputeControlledOrUncontrolledValue)(valueProp);

  // `useRadioStore`'s `setValue` prop can be called with `null`, while
  // the component's `onChange` prop only expects `undefined`
  const wrappedOnChangeProp = onChangeProp ? v => {
    onChangeProp(v !== null && v !== void 0 ? v : undefined);
  } : undefined;
  const radio = (0, _radio.useRadioStore)({
    defaultValue,
    value,
    setValue: wrappedOnChangeProp
  });
  const selectedValue = radio.useState('value');
  const setValue = radio.setValue;
  const groupContextValue = (0, _element.useMemo)(() => ({
    baseId,
    isBlock: !isAdaptiveWidth,
    size,
    value: selectedValue,
    setValue
  }), [baseId, isAdaptiveWidth, size, selectedValue, setValue]);
  return (0, _element.createElement)(_context.default.Provider, {
    value: groupContextValue
  }, (0, _element.createElement)(_radio.RadioGroup, {
    store: radio,
    "aria-label": label,
    as: _view.View,
    ...otherProps,
    id: baseId,
    ref: forwardedRef
  }, children));
}
const ToggleGroupControlAsRadioGroup = (0, _element.forwardRef)(UnforwardedToggleGroupControlAsRadioGroup);
exports.ToggleGroupControlAsRadioGroup = ToggleGroupControlAsRadioGroup;
//# sourceMappingURL=as-radio-group.js.map