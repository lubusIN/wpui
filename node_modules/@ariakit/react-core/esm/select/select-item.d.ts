import type { MouseEvent } from "react";
import type { BooleanOrCallback } from "@ariakit/core/utils/types";
import type { CompositeHoverOptions } from "../composite/composite-hover.js";
import type { CompositeItemOptions } from "../composite/composite-item.js";
import type { As, Props } from "../utils/types.js";
import type { SelectStore } from "./select-store.js";
/**
 * Returns props to create a `SelectItem` component.
 * @see https://ariakit.org/components/select
 * @example
 * ```jsx
 * const store = useSelectStore();
 * const props = useSelectItem({ store, value: "Apple" });
 * <Role {...props} />
 * ```
 */
export declare const useSelectItem: import("../utils/types.js").Hook<SelectItemOptions<"div">>;
/**
 * Renders a select item inside a select list or select popover. The `role` prop
 * will be automatically set based on the `SelectList` or `SelectPopover` own
 * `role` prop. For example, if the `SelectPopover` component's `role` prop is
 * set to `listbox` (default), the `SelectItem` `role` will be set to `option`.
 * By default, the `value` prop will be rendered as the children, but this can
 * be overriden.
 * @see https://ariakit.org/components/select
 * @example
 * ```jsx
 * const select = useSelectStore();
 * <Select store={select} />
 * <SelectPopover store={select}>
 *   <SelectItem value="Apple" />
 *   <SelectItem value="Orange" />
 * </SelectPopover>
 * ```
 */
export declare const SelectItem: import("../utils/types.js").Component<SelectItemOptions<"div">>;
export interface SelectItemOptions<T extends As = "div"> extends CompositeItemOptions<T>, CompositeHoverOptions<T> {
    /**
     * Object returned by the `useSelectStore` hook. If not provided, the parent
     * `SelectList` or `SelectPopover` components' context will be used.
     */
    store?: SelectStore;
    /**
     * The value of the item. This will be rendered as the children by default.
     *   - If `setValueOnClick` is set to `true` on this component, the
     *     `select.value` state will be set to this value when the user clicks on
     *     it.
     *   - If `select.setValueOnMove` is set to `true` on the select store, the
     *     `select.value` state will be set to this value when the user moves to
     *     it (which is usually the case when moving through the items using the
     *     keyboard).
     * @example
     * ```jsx
     * <SelectItem value="Apple" />
     * ```
     */
    value?: string;
    /**
     * Whether to hide the select when this item is clicked. By default, it's
     * `true` when the `value` prop is also provided.
     */
    hideOnClick?: BooleanOrCallback<MouseEvent<HTMLElement>>;
    /**
     * Whether to set the select value with this item's value, if any, when this
     * item is clicked. By default, it's `true` when the `value` prop is also
     * provided.
     */
    setValueOnClick?: BooleanOrCallback<MouseEvent<HTMLElement>>;
    /**
     * @default true
     */
    preventScrollOnKeyDown?: CompositeItemOptions["preventScrollOnKeyDown"];
}
export type SelectItemProps<T extends As = "div"> = Props<SelectItemOptions<T>>;
