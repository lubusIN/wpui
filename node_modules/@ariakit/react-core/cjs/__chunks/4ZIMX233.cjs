"use strict";Object.defineProperty(exports, "__esModule", {value: true});



var _OLGMV24Ucjs = require('./OLGMV24U.cjs');


var _3ALHBZ3Rcjs = require('./3ALHBZ3R.cjs');




var _CWY2PHPRcjs = require('./CWY2PHPR.cjs');








var _5WLTMVVQcjs = require('./5WLTMVVQ.cjs');




var _72I2GWXFcjs = require('./72I2GWXF.cjs');

// src/hovercard/hovercard.tsx







var _react = require('react');
var _dom = require('@ariakit/core/utils/dom');
var _events = require('@ariakit/core/utils/events');
var _focus = require('@ariakit/core/utils/focus');
var _misc = require('@ariakit/core/utils/misc');
var _store = require('@ariakit/core/utils/store');
var _jsxruntime = require('react/jsx-runtime');
function isMovingOnHovercard(target, card, anchor, nested) {
  if (_focus.hasFocusWithin.call(void 0, card))
    return true;
  if (!target)
    return false;
  if (_dom.contains.call(void 0, card, target))
    return true;
  if (anchor && _dom.contains.call(void 0, anchor, target))
    return true;
  if (nested == null ? void 0 : nested.some((card2) => isMovingOnHovercard(target, card2, anchor))) {
    return true;
  }
  return false;
}
function useAutoFocusOnShow(_a) {
  var _b = _a, { store } = _b, props = _72I2GWXFcjs.__objRest.call(void 0, _b, ["store"]);
  const open = store.useState("open");
  const openRef = _5WLTMVVQcjs.useLiveRef.call(void 0, open);
  _react.useEffect.call(void 0, () => {
    if (!open) {
      store.setAutoFocusOnShow(false);
    }
  }, [open, store]);
  _react.useEffect.call(void 0, 
    () => () => {
      if (!openRef.current) {
        store.setAutoFocusOnShow(false);
      }
    },
    [store]
  );
  const modal = !!props.modal;
  const autoFocusOnShow = store.useState(
    (state) => modal || state.autoFocusOnShow
  );
  return _72I2GWXFcjs.__spreadValues.call(void 0, { autoFocusOnShow }, props);
}
function useAutoFocusOnHide(_a) {
  var _b = _a, { store } = _b, props = _72I2GWXFcjs.__objRest.call(void 0, _b, ["store"]);
  const [autoFocusOnHide, setAutoFocusOnHide] = _react.useState.call(void 0, false);
  const mounted = store.useState("mounted");
  _react.useEffect.call(void 0, () => {
    if (!mounted) {
      setAutoFocusOnHide(false);
    }
  }, [mounted]);
  const onFocusProp = props.onFocus;
  const onFocus = _5WLTMVVQcjs.useEvent.call(void 0, (event) => {
    onFocusProp == null ? void 0 : onFocusProp(event);
    if (event.defaultPrevented)
      return;
    setAutoFocusOnHide(true);
  });
  const finalFocusRef = _react.useRef.call(void 0, null);
  _react.useEffect.call(void 0, () => {
    return _store.sync.call(void 0, store, ["anchorElement"], (state) => {
      finalFocusRef.current = state.anchorElement;
    });
  }, []);
  props = _72I2GWXFcjs.__spreadProps.call(void 0, _72I2GWXFcjs.__spreadValues.call(void 0, {
    autoFocusOnHide,
    finalFocus: finalFocusRef
  }, props), {
    onFocus
  });
  return props;
}
var NestedHovercardContext = _react.createContext.call(void 0, null);
var useHovercard = _CWY2PHPRcjs.createHook.call(void 0, 
  (_a) => {
    var _b = _a, {
      store,
      modal = false,
      portal = !!modal,
      hideOnEscape = true,
      hideOnHoverOutside = true,
      disablePointerEventsOnApproach = !!hideOnHoverOutside
    } = _b, props = _72I2GWXFcjs.__objRest.call(void 0, _b, [
      "store",
      "modal",
      "portal",
      "hideOnEscape",
      "hideOnHoverOutside",
      "disablePointerEventsOnApproach"
    ]);
    const ref = _react.useRef.call(void 0, null);
    const [nestedHovercards, setNestedHovercards] = _react.useState.call(void 0, []);
    const hideTimeoutRef = _react.useRef.call(void 0, 0);
    const enterPointRef = _react.useRef.call(void 0, null);
    const { portalRef, domReady } = _5WLTMVVQcjs.usePortalRef.call(void 0, portal, props.portalRef);
    const mayHideOnHoverOutside = !!hideOnHoverOutside;
    const hideOnHoverOutsideProp = _5WLTMVVQcjs.useBooleanEvent.call(void 0, hideOnHoverOutside);
    const mayDisablePointerEvents = !!disablePointerEventsOnApproach;
    const disablePointerEventsProp = _5WLTMVVQcjs.useBooleanEvent.call(void 0, 
      disablePointerEventsOnApproach
    );
    const mounted = store.useState("mounted");
    _react.useEffect.call(void 0, () => {
      if (!domReady)
        return;
      if (!mounted)
        return;
      if (!mayHideOnHoverOutside && !mayDisablePointerEvents)
        return;
      const element = ref.current;
      if (!element)
        return;
      const onMouseMove = (event) => {
        const { anchorElement, hideTimeout, timeout } = store.getState();
        const enterPoint = enterPointRef.current;
        const target = event.target;
        const anchor = anchorElement;
        if (isMovingOnHovercard(target, element, anchor, nestedHovercards)) {
          enterPointRef.current = target && anchor && _dom.contains.call(void 0, anchor, target) ? _OLGMV24Ucjs.getEventPoint.call(void 0, event) : null;
          window.clearTimeout(hideTimeoutRef.current);
          hideTimeoutRef.current = 0;
          return;
        }
        if (hideTimeoutRef.current)
          return;
        if (enterPoint) {
          const currentPoint = _OLGMV24Ucjs.getEventPoint.call(void 0, event);
          const polygon = _OLGMV24Ucjs.getElementPolygon.call(void 0, element, enterPoint);
          if (_OLGMV24Ucjs.isPointInPolygon.call(void 0, currentPoint, polygon)) {
            enterPointRef.current = currentPoint;
            if (!disablePointerEventsProp(event))
              return;
            event.preventDefault();
            event.stopPropagation();
            return;
          }
        }
        if (!hideOnHoverOutsideProp(event))
          return;
        hideTimeoutRef.current = window.setTimeout(() => {
          hideTimeoutRef.current = 0;
          store.hide();
        }, hideTimeout != null ? hideTimeout : timeout);
      };
      return _misc.chain.call(void 0, 
        _events.addGlobalEventListener.call(void 0, "mousemove", onMouseMove, true),
        () => clearTimeout(hideTimeoutRef.current)
      );
    }, [
      store,
      domReady,
      mounted,
      mayHideOnHoverOutside,
      mayDisablePointerEvents,
      nestedHovercards,
      disablePointerEventsProp,
      hideOnHoverOutsideProp
    ]);
    _react.useEffect.call(void 0, () => {
      if (!domReady)
        return;
      if (!mounted)
        return;
      if (!mayDisablePointerEvents)
        return;
      const disableEvent = (event) => {
        const element = ref.current;
        if (!element)
          return;
        const enterPoint = enterPointRef.current;
        if (!enterPoint)
          return;
        const polygon = _OLGMV24Ucjs.getElementPolygon.call(void 0, element, enterPoint);
        if (_OLGMV24Ucjs.isPointInPolygon.call(void 0, _OLGMV24Ucjs.getEventPoint.call(void 0, event), polygon)) {
          if (!disablePointerEventsProp(event))
            return;
          event.preventDefault();
          event.stopPropagation();
        }
      };
      return _misc.chain.call(void 0, 
        // Note: we may need to add pointer events here in the future.
        _events.addGlobalEventListener.call(void 0, "mouseenter", disableEvent, true),
        _events.addGlobalEventListener.call(void 0, "mouseover", disableEvent, true),
        _events.addGlobalEventListener.call(void 0, "mouseout", disableEvent, true),
        _events.addGlobalEventListener.call(void 0, "mouseleave", disableEvent, true)
      );
    }, [domReady, mounted, mayDisablePointerEvents, disablePointerEventsProp]);
    const registerOnParent = _react.useContext.call(void 0, NestedHovercardContext);
    _5WLTMVVQcjs.useSafeLayoutEffect.call(void 0, () => {
      if (modal)
        return;
      if (!portal)
        return;
      if (!mounted)
        return;
      if (!domReady)
        return;
      const element = ref.current;
      if (!element)
        return;
      return registerOnParent == null ? void 0 : registerOnParent(element);
    }, [modal, portal, mounted, domReady]);
    const registerNestedHovercard = _react.useCallback.call(void 0, 
      (element) => {
        setNestedHovercards((prevElements) => [...prevElements, element]);
        const parentUnregister = registerOnParent == null ? void 0 : registerOnParent(element);
        return () => {
          setNestedHovercards(
            (prevElements) => prevElements.filter((item) => item !== element)
          );
          parentUnregister == null ? void 0 : parentUnregister();
        };
      },
      [registerOnParent]
    );
    props = _5WLTMVVQcjs.useWrapElement.call(void 0, 
      props,
      (element) => /* @__PURE__ */ _jsxruntime.jsx.call(void 0, NestedHovercardContext.Provider, { value: registerNestedHovercard, children: element }),
      [registerNestedHovercard]
    );
    props = _72I2GWXFcjs.__spreadProps.call(void 0, _72I2GWXFcjs.__spreadValues.call(void 0, {}, props), {
      ref: _5WLTMVVQcjs.useMergeRefs.call(void 0, ref, props.ref)
    });
    props = useAutoFocusOnHide(_72I2GWXFcjs.__spreadValues.call(void 0, { store }, props));
    props = useAutoFocusOnShow(_72I2GWXFcjs.__spreadValues.call(void 0, { store, modal }, props));
    props = _3ALHBZ3Rcjs.usePopover.call(void 0, _72I2GWXFcjs.__spreadProps.call(void 0, _72I2GWXFcjs.__spreadValues.call(void 0, {
      store,
      modal,
      portal
    }, props), {
      portalRef,
      hideOnEscape(event) {
        if (_misc.isFalsyBooleanCallback.call(void 0, hideOnEscape, event))
          return false;
        requestAnimationFrame(() => requestAnimationFrame(store.hide));
        return true;
      }
    }));
    return props;
  }
);
var Hovercard = _CWY2PHPRcjs.createComponent.call(void 0, (props) => {
  const htmlProps = useHovercard(props);
  return _CWY2PHPRcjs.createElement.call(void 0, "div", htmlProps);
});
if (process.env.NODE_ENV !== "production") {
  Hovercard.displayName = "Hovercard";
}




exports.useHovercard = useHovercard; exports.Hovercard = Hovercard;
