import { createElement, Fragment } from "@wordpress/element";
/**
 * WordPress dependencies
 */
import { useState } from '@wordpress/element';
import { swatch } from '@wordpress/icons';
import { __ } from '@wordpress/i18n';

/**
 * Internal dependencies
 */
import Button from '../../button';
import ColorPalette from '../../color-palette';
import ColorIndicator from '../../color-indicator';
import Icon from '../../icon';
import { HStack } from '../../h-stack';
import { useInstanceId } from '@wordpress/compose';
function ColorOption({
  label,
  value,
  colors,
  disableCustomColors,
  enableAlpha,
  onChange
}) {
  const [isOpen, setIsOpen] = useState(false);
  const idRoot = useInstanceId(ColorOption, 'color-list-picker-option');
  const labelId = `${idRoot}__label`;
  const contentId = `${idRoot}__content`;
  return createElement(Fragment, null, createElement(Button, {
    className: "components-color-list-picker__swatch-button",
    onClick: () => setIsOpen(prev => !prev),
    "aria-expanded": isOpen,
    "aria-controls": contentId
  }, createElement(HStack, {
    justify: "flex-start",
    spacing: 2
  }, value ? createElement(ColorIndicator, {
    colorValue: value,
    className: "components-color-list-picker__swatch-color"
  }) : createElement(Icon, {
    icon: swatch
  }), createElement("span", {
    id: labelId
  }, label))), createElement("div", {
    role: "group",
    id: contentId,
    "aria-labelledby": labelId,
    "aria-hidden": !isOpen
  }, isOpen && createElement(ColorPalette, {
    "aria-label": __('Color options'),
    className: "components-color-list-picker__color-picker",
    colors: colors,
    value: value,
    clearable: false,
    onChange: onChange,
    disableCustomColors: disableCustomColors,
    enableAlpha: enableAlpha
  })));
}
function ColorListPicker({
  colors,
  labels,
  value = [],
  disableCustomColors,
  enableAlpha,
  onChange
}) {
  return createElement("div", {
    className: "components-color-list-picker"
  }, labels.map((label, index) => createElement(ColorOption, {
    key: index,
    label: label,
    value: value[index],
    colors: colors,
    disableCustomColors: disableCustomColors,
    enableAlpha: enableAlpha,
    onChange: newColor => {
      const newColors = value.slice();
      newColors[index] = newColor;
      onChange(newColors);
    }
  })));
}
export default ColorListPicker;
//# sourceMappingURL=index.js.map