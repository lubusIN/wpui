import type { As, Options, Props } from "../utils/types.js";
import type { HeadingLevels } from "./utils.js";
type HeadingElements = `h${HeadingLevels}`;
/**
 * Returns props to create a `Heading` component. The element type (or the
 * `aria-level` prop, if the element type is not a native heading) is determined
 * by the context level provided by the parent `HeadingLevel` component.
 * @see https://ariakit.org/components/heading
 * @example
 * ```jsx
 * const props = useHeading();
 * <Role {...props}>Heading</Role>
 * ```
 */
export declare const useHeading: import("../utils/types.js").Hook<HeadingOptions<"h1" | "h2" | "h3" | "h4" | "h5" | "h6">>;
/**
 * Renders a heading element. The element type (or the `aria-level` prop, if the
 * element type is not a native heading) is determined by the context level
 * provided by the parent `HeadingLevel` component.
 * @see https://ariakit.org/components/heading
 * @example
 * ```jsx
 * <HeadingLevel>
 *   <Heading>Heading 1</Heading>
 *   <HeadingLevel>
 *     <Heading>Heading 2</Heading>
 *   </HeadingLevel>
 * </HeadingLevel>
 * ```
 */
export declare const Heading: import("../utils/types.js").Component<HeadingOptions<"h1" | "h2" | "h3" | "h4" | "h5" | "h6">>;
export type HeadingOptions<T extends As = HeadingElements> = Options<T>;
export type HeadingProps<T extends As = HeadingElements> = Props<HeadingOptions<T>>;
export {};
