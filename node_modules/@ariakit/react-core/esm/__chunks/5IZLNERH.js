import {
  markAncestor
} from "./LEBYH5FW.js";
import {
  Role
} from "./M5I7AM4N.js";
import {
  useDisclosureContent
} from "./WHEEIXMF.js";
import {
  useDisclosureStore
} from "./SWJ5EOOS.js";
import {
  useMergeRefs,
  useSafeLayoutEffect
} from "./J7Q2EO23.js";
import {
  __spreadProps,
  __spreadValues
} from "./PNRLI7OV.js";

// src/dialog/dialog-backdrop.tsx
import { isValidElement, useRef } from "react";
import { jsx } from "react/jsx-runtime";
function DialogBackdrop({
  store,
  backdrop,
  backdropProps,
  alwaysVisible,
  hidden
}) {
  const ref = useRef(null);
  const disclosure = useDisclosureStore({ disclosure: store });
  const contentElement = store.useState("contentElement");
  useSafeLayoutEffect(() => {
    const backdrop2 = ref.current;
    const dialog = contentElement;
    if (!backdrop2)
      return;
    if (!dialog)
      return;
    backdrop2.style.zIndex = getComputedStyle(dialog).zIndex;
  }, [contentElement]);
  useSafeLayoutEffect(() => {
    const id = contentElement == null ? void 0 : contentElement.id;
    if (!id)
      return;
    const backdrop2 = ref.current;
    if (!backdrop2)
      return;
    return markAncestor(backdrop2, id);
  }, [contentElement]);
  if (hidden != null) {
    backdropProps = __spreadProps(__spreadValues({}, backdropProps), { hidden });
  }
  const props = useDisclosureContent(__spreadProps(__spreadValues({
    store: disclosure,
    role: "presentation",
    "data-backdrop": (contentElement == null ? void 0 : contentElement.id) || "",
    alwaysVisible
  }, backdropProps), {
    ref: useMergeRefs(backdropProps == null ? void 0 : backdropProps.ref, ref),
    style: __spreadValues({
      position: "fixed",
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    }, backdropProps == null ? void 0 : backdropProps.style)
  }));
  if (!backdrop)
    return null;
  if (isValidElement(backdrop)) {
    return /* @__PURE__ */ jsx(Role, __spreadProps(__spreadValues({}, props), { render: backdrop }));
  }
  const Component = typeof backdrop !== "boolean" ? backdrop : "div";
  return /* @__PURE__ */ jsx(Role, __spreadProps(__spreadValues({}, props), { render: /* @__PURE__ */ jsx(Component, {}) }));
}

export {
  DialogBackdrop
};
