import {
  CheckboxCheckedContext
} from "./M5KYRTQG.js";
import {
  useCommand
} from "./P4RGQGTG.js";
import {
  createComponent,
  createElement,
  createHook
} from "./NQJBHION.js";
import {
  useStoreState
} from "./P63NRZ4A.js";
import {
  useEvent,
  useMergeRefs,
  useTagName,
  useWrapElement
} from "./J7Q2EO23.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "./PNRLI7OV.js";

// src/checkbox/checkbox.tsx
import { useEffect, useRef, useState } from "react";
import { jsx } from "react/jsx-runtime";
function setMixed(element, mixed) {
  if (mixed) {
    element.indeterminate = true;
  } else if (element.indeterminate) {
    element.indeterminate = false;
  }
}
function isNativeCheckbox(tagName, type) {
  return tagName === "input" && (!type || type === "checkbox");
}
function getNonArrayValue(value) {
  if (Array.isArray(value)) {
    return value.toString();
  }
  return value;
}
var useCheckbox = createHook(
  (_a) => {
    var _b = _a, {
      store,
      value: valueProp,
      checked: checkedProp,
      defaultChecked
    } = _b, props = __objRest(_b, [
      "store",
      "value",
      "checked",
      "defaultChecked"
    ]);
    var _a2;
    const storeChecked = useStoreState(store, (state) => {
      if (checkedProp !== void 0)
        return checkedProp;
      if (state.value === void 0)
        return;
      if (valueProp != null) {
        if (Array.isArray(state.value)) {
          const nonArrayValue = getNonArrayValue(valueProp);
          return state.value.includes(nonArrayValue);
        }
        return state.value === valueProp;
      }
      if (Array.isArray(state.value))
        return false;
      if (typeof state.value === "boolean")
        return state.value;
      return false;
    });
    const [_checked, setChecked] = useState(defaultChecked != null ? defaultChecked : false);
    const checked = (_a2 = checkedProp != null ? checkedProp : storeChecked) != null ? _a2 : _checked;
    const ref = useRef(null);
    const tagName = useTagName(ref, props.as || "input");
    const nativeCheckbox = isNativeCheckbox(tagName, props.type);
    const mixed = checked ? checked === "mixed" : void 0;
    const isChecked = checked === "mixed" ? false : checked;
    useEffect(() => {
      const element = ref.current;
      if (!element)
        return;
      setMixed(element, mixed);
      element.checked = isChecked;
    }, [mixed, isChecked]);
    const onChangeProp = props.onChange;
    const onChange = useEvent((event) => {
      if (props.disabled) {
        event.stopPropagation();
        event.preventDefault();
        return;
      }
      setMixed(event.currentTarget, mixed);
      if (!nativeCheckbox) {
        event.currentTarget.checked = !event.currentTarget.checked;
      }
      onChangeProp == null ? void 0 : onChangeProp(event);
      if (event.defaultPrevented)
        return;
      const elementChecked = event.currentTarget.checked;
      setChecked(elementChecked);
      store == null ? void 0 : store.setValue((prevValue) => {
        if (valueProp == null)
          return elementChecked;
        const nonArrayValue = getNonArrayValue(valueProp);
        if (!Array.isArray(prevValue)) {
          return prevValue === nonArrayValue ? false : nonArrayValue;
        }
        if (elementChecked)
          return [...prevValue, nonArrayValue];
        return prevValue.filter((v) => v !== nonArrayValue);
      });
    });
    const onClickProp = props.onClick;
    const onClick = useEvent((event) => {
      onClickProp == null ? void 0 : onClickProp(event);
      if (event.defaultPrevented)
        return;
      if (nativeCheckbox)
        return;
      onChange(event);
    });
    props = useWrapElement(
      props,
      (element) => /* @__PURE__ */ jsx(CheckboxCheckedContext.Provider, { value: isChecked, children: element }),
      [isChecked]
    );
    props = __spreadProps(__spreadValues({
      role: !nativeCheckbox ? "checkbox" : void 0,
      type: nativeCheckbox ? "checkbox" : void 0,
      "aria-checked": checked
    }, props), {
      ref: useMergeRefs(ref, props.ref),
      onChange,
      onClick
    });
    props = useCommand(__spreadValues({ clickOnEnter: !nativeCheckbox }, props));
    return __spreadValues({
      value: nativeCheckbox ? valueProp : void 0,
      checked: isChecked
    }, props);
  }
);
var Checkbox = createComponent((props) => {
  const htmlProps = useCheckbox(props);
  return createElement("input", htmlProps);
});
if (process.env.NODE_ENV !== "production") {
  Checkbox.displayName = "Checkbox";
}

export {
  useCheckbox,
  Checkbox
};
