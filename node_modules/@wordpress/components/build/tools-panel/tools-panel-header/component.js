"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _element = require("@wordpress/element");
var _a11y = require("@wordpress/a11y");
var _icons = require("@wordpress/icons");
var _i18n = require("@wordpress/i18n");
var _dropdownMenu = _interopRequireDefault(require("../../dropdown-menu"));
var _menuGroup = _interopRequireDefault(require("../../menu-group"));
var _menuItem = _interopRequireDefault(require("../../menu-item"));
var _hStack = require("../../h-stack");
var _heading = require("../../heading");
var _hook = require("./hook");
var _context = require("../../ui/context");
var _styles = require("../styles");
/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const DefaultControlsGroup = ({
  itemClassName,
  items,
  toggleItem
}) => {
  if (!items.length) {
    return null;
  }
  const resetSuffix = (0, _element.createElement)(_styles.ResetLabel, {
    "aria-hidden": true
  }, (0, _i18n.__)('Reset'));
  return (0, _element.createElement)(_menuGroup.default, {
    label: (0, _i18n.__)('Defaults')
  }, items.map(([label, hasValue]) => {
    if (hasValue) {
      return (0, _element.createElement)(_menuItem.default, {
        key: label,
        className: itemClassName,
        role: "menuitem",
        label: (0, _i18n.sprintf)(
        // translators: %s: The name of the control being reset e.g. "Padding".
        (0, _i18n.__)('Reset %s'), label),
        onClick: () => {
          toggleItem(label);
          (0, _a11y.speak)((0, _i18n.sprintf)(
          // translators: %s: The name of the control being reset e.g. "Padding".
          (0, _i18n.__)('%s reset to default'), label), 'assertive');
        },
        suffix: resetSuffix
      }, label);
    }
    return (0, _element.createElement)(_menuItem.default, {
      key: label,
      className: itemClassName,
      role: "menuitemcheckbox",
      isSelected: true,
      "aria-disabled": true
    }, label);
  }));
};
const OptionalControlsGroup = ({
  items,
  toggleItem
}) => {
  if (!items.length) {
    return null;
  }
  return (0, _element.createElement)(_menuGroup.default, {
    label: (0, _i18n.__)('Tools')
  }, items.map(([label, isSelected]) => {
    const itemLabel = isSelected ? (0, _i18n.sprintf)(
    // translators: %s: The name of the control being hidden and reset e.g. "Padding".
    (0, _i18n.__)('Hide and reset %s'), label) : (0, _i18n.sprintf)(
    // translators: %s: The name of the control to display e.g. "Padding".
    (0, _i18n.__)('Show %s'), label);
    return (0, _element.createElement)(_menuItem.default, {
      key: label,
      icon: isSelected ? _icons.check : null,
      isSelected: isSelected,
      label: itemLabel,
      onClick: () => {
        if (isSelected) {
          (0, _a11y.speak)((0, _i18n.sprintf)(
          // translators: %s: The name of the control being reset e.g. "Padding".
          (0, _i18n.__)('%s hidden and reset to default'), label), 'assertive');
        } else {
          (0, _a11y.speak)((0, _i18n.sprintf)(
          // translators: %s: The name of the control being reset e.g. "Padding".
          (0, _i18n.__)('%s is now visible'), label), 'assertive');
        }
        toggleItem(label);
      },
      role: "menuitemcheckbox"
    }, label);
  }));
};
const ToolsPanelHeader = (props, forwardedRef) => {
  const {
    areAllOptionalControlsHidden,
    defaultControlsItemClassName,
    dropdownMenuClassName,
    hasMenuItems,
    headingClassName,
    headingLevel = 2,
    label: labelText,
    menuItems,
    resetAll,
    toggleItem,
    ...headerProps
  } = (0, _hook.useToolsPanelHeader)(props);
  if (!labelText) {
    return null;
  }
  const defaultItems = Object.entries(menuItems?.default || {});
  const optionalItems = Object.entries(menuItems?.optional || {});
  const dropDownMenuIcon = areAllOptionalControlsHidden ? _icons.plus : _icons.moreVertical;
  const dropDownMenuLabelText = (0, _i18n.sprintf)(
  // translators: %s: The name of the tool e.g. "Color" or "Typography".
  (0, _i18n._x)('%s options', 'Button label to reveal tool panel options'), labelText);
  const dropdownMenuDescriptionText = areAllOptionalControlsHidden ? (0, _i18n.__)('All options are currently hidden') : undefined;
  const canResetAll = [...defaultItems, ...optionalItems].some(([, isSelected]) => isSelected);
  return (0, _element.createElement)(_hStack.HStack, {
    ...headerProps,
    ref: forwardedRef
  }, (0, _element.createElement)(_heading.Heading, {
    level: headingLevel,
    className: headingClassName
  }, labelText), hasMenuItems && (0, _element.createElement)(_dropdownMenu.default, {
    icon: dropDownMenuIcon,
    label: dropDownMenuLabelText,
    menuProps: {
      className: dropdownMenuClassName
    },
    toggleProps: {
      isSmall: true,
      describedBy: dropdownMenuDescriptionText
    }
  }, () => (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(DefaultControlsGroup, {
    items: defaultItems,
    toggleItem: toggleItem,
    itemClassName: defaultControlsItemClassName
  }), (0, _element.createElement)(OptionalControlsGroup, {
    items: optionalItems,
    toggleItem: toggleItem
  }), (0, _element.createElement)(_menuGroup.default, null, (0, _element.createElement)(_menuItem.default, {
    "aria-disabled": !canResetAll
    // @ts-expect-error - TODO: If this "tertiary" style is something we really want to allow on MenuItem,
    // we should rename it and explicitly allow it as an official API. All the other Button variants
    // don't make sense in a MenuItem context, and should be disallowed.
    ,
    variant: 'tertiary',
    onClick: () => {
      if (canResetAll) {
        resetAll();
        (0, _a11y.speak)((0, _i18n.__)('All options reset'), 'assertive');
      }
    }
  }, (0, _i18n.__)('Reset all'))))));
};
const ConnectedToolsPanelHeader = (0, _context.contextConnect)(ToolsPanelHeader, 'ToolsPanelHeader');
var _default = ConnectedToolsPanelHeader;
exports.default = _default;
//# sourceMappingURL=component.js.map