import type { MouseEvent } from "react";
import type { BooleanOrCallback } from "@ariakit/core/utils/types";
import type { ButtonOptions } from "../button/button.js";
import type { As, Props } from "../utils/types.js";
import type { DisclosureStore } from "./disclosure-store.js";
/**
 * Returns props to create a `Disclosure` component.
 * @see https://ariakit.org/components/disclosure
 * @example
 * ```jsx
 * const store = useDisclosureStore();
 * const props = useDisclosure({ store });
 * <Role {...props}>Disclosure</Role>
 * <DisclosureContent store={store}>Content</DisclosureContent>
 * ```
 */
export declare const useDisclosure: import("../utils/types.js").Hook<DisclosureOptions<"button">>;
/**
 * Renders an element that controls the visibility of a disclosure content
 * element.
 * @see https://ariakit.org/components/disclosure
 * @example
 * ```jsx
 * const disclosure = useDisclosureStore();
 * <Disclosure store={disclosure}>Disclosure</Disclosure>
 * <DisclosureContent store={disclosure}>Content</DisclosureContent>
 * ```
 */
export declare const Disclosure: import("../utils/types.js").Component<DisclosureOptions<"button">>;
export interface DisclosureOptions<T extends As = "button"> extends ButtonOptions<T> {
    /**
     * Object returned by the `useDisclosureStore` hook.
     */
    store: DisclosureStore;
    /**
     * Determines whether `store.toggle()` will be called on click. This is useful
     * if you want to handle the toggle logic yourself.
     * @default true
     */
    toggleOnClick?: BooleanOrCallback<MouseEvent<HTMLElement>>;
}
export type DisclosureProps<T extends As = "button"> = Props<DisclosureOptions<T>>;
