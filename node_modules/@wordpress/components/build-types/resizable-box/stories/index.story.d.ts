/// <reference types="react" />
/**
 * External dependencies
 */
import type { Meta } from '@storybook/react';
/**
 * Internal dependencies
 */
import ResizableBox from '..';
declare const meta: Meta<typeof ResizableBox>;
export default meta;
export declare const Default: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0a347bb9").R, import("re-resizable").ResizableProps & {
    children: import("react").ReactNode;
    showHandle?: boolean | undefined;
    __experimentalShowTooltip?: boolean | undefined;
    __experimentalTooltipProps?: (Pick<{
        theme?: import("@emotion/react").Theme | undefined;
        as?: import("react").ElementType<any> | undefined;
    } & import("react").ClassAttributes<HTMLDivElement> & import("react").HTMLAttributes<HTMLDivElement> & {
        'aria-hidden'?: boolean | undefined;
        axis?: import("../resize-tooltip/utils").Axis | undefined;
        className?: string | undefined;
        fadeTimeout?: number | undefined;
        isVisible?: boolean | undefined;
        labelRef?: import("react").Ref<HTMLDivElement> | undefined;
        onResize?: ((data: {
            width: number | null;
            height: number | null;
        }) => void) | undefined;
        position?: import("../resize-tooltip/utils").Position | undefined;
        showPx?: boolean | undefined;
        zIndex?: number | undefined;
    }, "position" | "zIndex" | "as" | "key" | keyof import("react").HTMLAttributes<HTMLDivElement> | "theme" | "axis" | "fadeTimeout" | "onResize" | "showPx" | "isVisible" | "labelRef"> & import("react").RefAttributes<HTMLDivElement>) | undefined;
} & import("react").RefAttributes<import("re-resizable").Resizable>>;
/**
 * The `enable` prop can be used to disable resizing in specific directions.
 */
export declare const DisabledDirections: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0a347bb9").R, import("re-resizable").ResizableProps & {
    children: import("react").ReactNode;
    showHandle?: boolean | undefined;
    __experimentalShowTooltip?: boolean | undefined;
    __experimentalTooltipProps?: (Pick<{
        theme?: import("@emotion/react").Theme | undefined;
        as?: import("react").ElementType<any> | undefined;
    } & import("react").ClassAttributes<HTMLDivElement> & import("react").HTMLAttributes<HTMLDivElement> & {
        'aria-hidden'?: boolean | undefined;
        axis?: import("../resize-tooltip/utils").Axis | undefined;
        className?: string | undefined;
        fadeTimeout?: number | undefined;
        isVisible?: boolean | undefined;
        labelRef?: import("react").Ref<HTMLDivElement> | undefined;
        onResize?: ((data: {
            width: number | null;
            height: number | null;
        }) => void) | undefined;
        position?: import("../resize-tooltip/utils").Position | undefined;
        showPx?: boolean | undefined;
        zIndex?: number | undefined;
    }, "position" | "zIndex" | "as" | "key" | keyof import("react").HTMLAttributes<HTMLDivElement> | "theme" | "axis" | "fadeTimeout" | "onResize" | "showPx" | "isVisible" | "labelRef"> & import("react").RefAttributes<HTMLDivElement>) | undefined;
} & import("react").RefAttributes<import("re-resizable").Resizable>>;
//# sourceMappingURL=index.story.d.ts.map