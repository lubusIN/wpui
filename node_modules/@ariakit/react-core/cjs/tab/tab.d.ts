import type { CompositeItemOptions } from "../composite/composite-item.js";
import type { As, Props } from "../utils/types.js";
import type { TabStore } from "./tab-store.js";
/**
 * Returns props to create a `Tab` component.
 * @see https://ariakit.org/components/tab
 * @example
 * ```jsx
 * const store = useTabStore();
 * const props = useTab({ store });
 * <TabList store={store}>
 *   <Role {...props}>Tab 1</Role>
 * </TabList>
 * <TabPanel store={store}>Panel 1</TabPanel>
 * ```
 */
export declare const useTab: import("../utils/types.js").Hook<TabOptions<"button">>;
/**
 * Renders a tab element. The underlying element must be wrapped in a `TabList`
 * component.
 * @see https://ariakit.org/components/tab
 * @example
 * ```jsx
 * const tab = useTabStore();
 * <TabList store={tab}>
 *   <Tab>Tab 1</Tab>
 *   <Tab>Tab 2</Tab>
 * </TabList>
 * <TabPanel store={tab}>Panel 1</TabPanel>
 * <TabPanel store={tab}>Panel 2</TabPanel>
 * ```
 */
export declare const Tab: import("../utils/types.js").Component<TabOptions<"button">>;
export interface TabOptions<T extends As = "button"> extends CompositeItemOptions<T> {
    /**
     * Object returned by the `useTabStore` hook. If not provided, the parent
     * `TabList` component's context will be used.
     */
    store?: TabStore;
    /**
     * @default true
     */
    accessibleWhenDisabled?: CompositeItemOptions["accessibleWhenDisabled"];
}
export type TabProps<T extends As = "button"> = Props<TabOptions<T>>;
