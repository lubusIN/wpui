import type { CompositeGroupLabelOptions } from "../composite/composite-group-label.js";
import type { As, Props } from "../utils/types.js";
import type { SelectStore } from "./select-store.js";
/**
 * Returns props to create a `SelectGroupLabel` component. This hook must be
 * used in a component that's wrapped with `SelectGroup` so the
 * `aria-labelledby` prop is properly set on the select group element.
 * @see https://ariakit.org/components/select
 * @example
 * ```jsx
 * // This component must be wrapped with SelectGroup
 * const props = useSelectGroupLabel();
 * <Role {...props}>Label</Role>
 * ```
 */
export declare const useSelectGroupLabel: import("../utils/types.js").Hook<SelectGroupLabelOptions<"div">>;
/**
 * Renders a label in a select group. This component must be wrapped with
 * `SelectGroup` so the `aria-labelledby` prop is properly set on the select
 * group element.
 * @see https://ariakit.org/components/select
 * @example
 * ```jsx
 * const select = useSelectStore();
 * <Select store={select} />
 * <SelectPopover store={select}>
 *   <SelectGroup>
 *     <SelectGroupLabel>Fruits</SelectGroupLabel>
 *     <SelectItem value="Apple" />
 *     <SelectItem value="Orange" />
 *   </SelectGroup>
 *   <SelectGroup>
 *     <SelectGroupLabel>Meat</SelectGroupLabel>
 *     <SelectItem value="Beef" />
 *     <SelectItem value="Chicken" />
 *   </SelectGroup>
 * </SelectPopover>
 * ```
 */
export declare const SelectGroupLabel: import("../utils/types.js").Component<SelectGroupLabelOptions<"div">>;
export interface SelectGroupLabelOptions<T extends As = "div"> extends CompositeGroupLabelOptions<T> {
    /**
     * Object returned by the `useSelectStore` hook. If not provided, the parent
     * `SelectList` or `SelectPopover` components' context will be used.
     */
    store?: SelectStore;
}
export type SelectGroupLabelProps<T extends As = "div"> = Props<SelectGroupLabelOptions<T>>;
