import {
  MenuBarContext,
  MenuContext
} from "../__chunks/HVBRRKV4.js";
import {
  useCompositeStoreOptions,
  useCompositeStoreProps
} from "../__chunks/7KULBIZY.js";
import "../__chunks/RS7KBRGA.js";
import {
  useHovercardStoreOptions,
  useHovercardStoreProps
} from "../__chunks/LDICFO4C.js";
import "../__chunks/3PKTK2K7.js";
import "../__chunks/WC3GK4CL.js";
import "../__chunks/SWJ5EOOS.js";
import {
  useStore,
  useStoreProps,
  useStoreState
} from "../__chunks/P63NRZ4A.js";
import "../__chunks/J7Q2EO23.js";
import "../__chunks/CP3U4HPL.js";
import {
  __spreadProps,
  __spreadValues
} from "../__chunks/PNRLI7OV.js";

// src/menu/menu-store.ts
import { useContext, useMemo } from "react";
import * as Core from "@ariakit/core/menu/menu-store";
function useMenuStoreOptions(props) {
  var _a, _b, _c, _d, _e, _f;
  const state = (_b = (_a = props.store) == null ? void 0 : _a.getState) == null ? void 0 : _b.call(_a);
  const parentMenu = useContext(MenuContext);
  const parentMenuBar = useContext(MenuBarContext);
  const placementProp = props.placement;
  const placement = useStoreState(
    parentMenu || parentMenuBar,
    (state2) => placementProp || (state2.orientation === "vertical" ? "right-start" : "bottom-start")
  );
  const parentIsMenuBar = !!parentMenuBar && !parentMenu;
  const timeout = parentIsMenuBar ? 0 : 150;
  return __spreadProps(__spreadValues(__spreadValues({}, useCompositeStoreOptions(props)), useHovercardStoreOptions(props)), {
    // TODO: Pass parent prop and remove these default values
    values: (_d = (_c = props.values) != null ? _c : state == null ? void 0 : state.values) != null ? _d : props.defaultValues,
    timeout: (_f = (_e = props.timeout) != null ? _e : state == null ? void 0 : state.timeout) != null ? _f : timeout,
    placement
  });
}
function useMenuStoreProps(store, props) {
  const parentMenu = useContext(MenuContext);
  store = useCompositeStoreProps(store, props);
  store = useHovercardStoreProps(store, props);
  useStoreProps(store, props, "values", "setValues");
  return useMemo(
    () => __spreadProps(__spreadValues({}, store), {
      hideAll: () => {
        store.hide();
        parentMenu == null ? void 0 : parentMenu.hideAll();
      }
    }),
    [store]
  );
}
function useMenuStore(props = {}) {
  const options = useMenuStoreOptions(props);
  const store = useStore(() => Core.createMenuStore(__spreadValues(__spreadValues({}, props), options)));
  return useMenuStoreProps(store, props);
}
export {
  useMenuStore,
  useMenuStoreOptions,
  useMenuStoreProps
};
