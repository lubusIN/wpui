import {
  useLazyValue,
  useLiveRef,
  useSafeLayoutEffect
} from "./J7Q2EO23.js";
import {
  __spreadProps,
  __spreadValues
} from "./PNRLI7OV.js";

// src/utils/store.tsx
import * as React from "react";
import { hasOwnProperty, identity } from "@ariakit/core/utils/misc";
import { batch, init, subscribe, sync } from "@ariakit/core/utils/store";
import { flushSync } from "react-dom";
import useSyncExternalStoreExports from "use-sync-external-store/shim/index.js";
var { useSyncExternalStore } = useSyncExternalStoreExports;
var noopSubscribe = () => () => {
};
var inFlushSyncContext = false;
function safeFlushSync(fn, canFlushSync = true) {
  if (inFlushSyncContext || !canFlushSync) {
    fn();
    return;
  }
  inFlushSyncContext = true;
  const originalError = console.error;
  if (process.env.NODE_ENV !== "production") {
    console.error = (msg) => {
      if (msg.startsWith("Warning: flushSync"))
        return;
      originalError(msg);
    };
  }
  try {
    flushSync(fn);
  } finally {
    console.error = originalError;
    inFlushSyncContext = false;
  }
}
function useStoreState(store, keyOrSelector = identity) {
  const storeSubscribe = React.useCallback(
    (callback) => {
      if (!store)
        return noopSubscribe();
      return subscribe(store, null, callback);
    },
    [store]
  );
  const getSnapshot = () => {
    if (!store)
      return;
    const state = store.getState();
    const selector = typeof keyOrSelector === "function" ? keyOrSelector : null;
    const key = typeof keyOrSelector === "string" ? keyOrSelector : null;
    if (selector)
      return selector(state);
    if (!key)
      return;
    if (!hasOwnProperty(state, key))
      return;
    return state[key];
  };
  return useSyncExternalStore(storeSubscribe, getSnapshot, getSnapshot);
}
function useStoreProps(store, props, key, setKey) {
  const value = hasOwnProperty(props, key) ? props[key] : void 0;
  const propsRef = useLiveRef({
    value,
    setValue: setKey ? props[setKey] : void 0
  });
  useSafeLayoutEffect(() => {
    let canFlushSync = false;
    queueMicrotask(() => {
      canFlushSync = true;
    });
    return sync(store, [key], (state, prev) => {
      const { value: value2, setValue } = propsRef.current;
      if (!setValue)
        return;
      if (state[key] === prev[key])
        return;
      if (state[key] === value2)
        return;
      safeFlushSync(() => setValue(state[key]), canFlushSync);
    });
  }, [store, key]);
  useSafeLayoutEffect(() => {
    return batch(store, [key], () => {
      if (value === void 0)
        return;
      store.setState(key, value);
    });
  }, [store, key, value]);
}
function useStore(createStore) {
  const store = useLazyValue(createStore);
  useSafeLayoutEffect(() => init(store), [store]);
  const useState = React.useCallback(
    (keyOrSelector) => useStoreState(store, keyOrSelector),
    [store]
  );
  return React.useMemo(
    () => __spreadProps(__spreadValues({}, store), { useState }),
    [store, useState]
  );
}

export {
  useStoreState,
  useStoreProps,
  useStore
};
