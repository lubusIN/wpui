import type { GroupOptions } from "../group/group.js";
import type { As, Props } from "../utils/types.js";
import type { FormStore } from "./form-store.js";
/**
 * Returns props to create a `FormGroup` component.
 * @see https://ariakit.org/components/form
 * @example
 * ```jsx
 * const store = useFormStore();
 * const props = useFormGroup({ store });
 * <Form store={store}>
 *   <Role {...props}>
 *     <FormGroupLabel>Label</FormGroupLabel>
 *   </Role>
 * </Form>
 * ```
 */
export declare const useFormGroup: import("../utils/types.js").Hook<FormGroupOptions<"div">>;
/**
 * Renders a form group.
 * @see https://ariakit.org/components/form
 * @example
 * ```jsx
 * const form = useFormStore({
 *   defaultValues: {
 *     username: "",
 *     email: "",
 *   },
 * });
 * <Form store={form}>
 *   <FormGroup>
 *     <FormGroupLabel>Account</FormGroupLabel>
 *     <FormLabel name={form.names.username}>Username</FormLabel>
 *     <FormInput name={form.names.username} />
 *     <FormLabel name={form.names.email}>Email</FormLabel>
 *     <FormInput name={form.names.email} />
 *   </FormGroup>
 * </Form>
 * ```
 */
export declare const FormGroup: import("../utils/types.js").Component<FormGroupOptions<"div">>;
export interface FormGroupOptions<T extends As = "div"> extends GroupOptions<T> {
    /**
     * Object returned by the `useFormStore` hook. If not provided, the parent
     * `Form` component's context will be used.
     */
    store?: FormStore;
}
export type FormGroupProps<T extends As = "div"> = Props<FormGroupOptions<T>>;
