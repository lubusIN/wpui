import type { KeyboardEvent } from "react";
import type { BooleanOrCallback } from "@ariakit/core/utils/types";
import type { CollectionItemOptions } from "../collection/collection-item.js";
import type { CommandOptions } from "../command/command.js";
import type { As, Props } from "../utils/types.js";
import type { CompositeStore } from "./composite-store.js";
/**
 * Returns props to create a `CompositeItem` component.
 * @see https://ariakit.org/components/composite
 * @example
 * ```jsx
 * const store = useCompositeStore();
 * const props = useCompositeItem({ store });
 * <Role {...props}>Item 1</Role>
 * ```
 */
export declare const useCompositeItem: import("../utils/types.js").Hook<CompositeItemOptions<"button">>;
/**
 * Renders a composite item.
 * @see https://ariakit.org/components/composite
 * @example
 * ```jsx
 * const composite = useCompositeStore();
 * <Composite store={composite}>
 *   <CompositeItem>Item 1</CompositeItem>
 *   <CompositeItem>Item 2</CompositeItem>
 *   <CompositeItem>Item 3</CompositeItem>
 * </Composite>
 * ```
 */
export declare const CompositeItem: import("../utils/types.js").Component<CompositeItemOptions<"button">>;
export interface CompositeItemOptions<T extends As = "button"> extends CommandOptions<T>, CollectionItemOptions<T> {
    /**
     * Object returned by the `useCompositeStore` hook. If not provided, the
     * parent `Composite` component's context will be used.
     */
    store?: CompositeStore;
    /**
     * The id that will be used to group items in the same row. This is usually
     * retrieved by the `CompositeRow` component through context so in most cases
     * you don't need to set it manually.
     */
    rowId?: string;
    /**
     * Whether the scroll behavior should be prevented when pressing arrow keys on
     * the first or the last items.
     * @default false
     */
    preventScrollOnKeyDown?: BooleanOrCallback<KeyboardEvent<HTMLElement>>;
    /**
     * Whether pressing arrow keys should move the focus to a different item.
     * @default true
     */
    moveOnKeyPress?: BooleanOrCallback<KeyboardEvent<HTMLElement>>;
}
export type CompositeItemProps<T extends As = "button"> = Props<CompositeItemOptions<T>>;
