{"version":3,"names":[],"sources":["@wordpress/components/src/notice/types.ts"],"sourcesContent":["/**\n * External dependencies\n */\nimport type { MouseEventHandler, ReactNode } from 'react';\n\ntype CommonNoticeActionProps = {\n\tlabel: string;\n\tclassName?: string;\n\tnoDefaultClasses?: boolean;\n\tvariant?: 'primary' | 'secondary' | 'link';\n};\n// `url` and `onClick` can both be provided, but `url` takes precedence. If\n// `url` is provided, the action's button will be rendered as an anchor and\n// `onClick` will be ignored.\ntype NoticeActionWithURL = CommonNoticeActionProps & {\n\turl: string;\n\tonClick?: never;\n};\ntype NoticeActionWithOnClick = CommonNoticeActionProps & {\n\turl?: never;\n\tonClick: MouseEventHandler< HTMLButtonElement >;\n};\n\nexport type NoticeAction = NoticeActionWithURL | NoticeActionWithOnClick;\n\nexport type NoticeChildren = string | JSX.Element;\n\nexport type NoticeProps = {\n\t/**\n\t * A CSS `class` to give to the wrapper element.\n\t */\n\tclassName?: string;\n\t/**\n\t * The displayed message of a notice. Also used as the spoken message for\n\t * assistive technology, unless `spokenMessage` is provided as an alternative message.\n\t */\n\tchildren: ReactNode;\n\t/**\n\t * Used to provide a custom spoken message in place of the `children` default.\n\t *\n\t * @default `children`\n\t */\n\tspokenMessage?: ReactNode;\n\t/**\n\t * Determines the color of the notice: `warning` (yellow),\n\t * `success` (green), `error` (red), or `'info'`.\n\t * By default `'info'` will be blue, but if there is a parent Theme component\n\t * with an accent color prop, the notice will take on that color instead.\n\t *\n\t * @default 'info'\n\t */\n\tstatus?: 'warning' | 'success' | 'error' | 'info';\n\t/**\n\t * Function called when dismissing the notice\n\t *\n\t * @default noop\n\t */\n\tonRemove?: () => void;\n\t/**\n\t * A politeness level for the notice's spoken message. Should be provided as\n\t * one of the valid options for an `aria-live` attribute value.\n\t *\n\t * A value of `'assertive'` is to be used for important, and usually\n\t * time-sensitive, information. It will interrupt anything else the screen\n\t * reader is announcing in that moment.\n\t * A value of `'polite'` is to be used for advisory information. It should\n\t * not interrupt what the screen reader is announcing in that moment\n\t * (the \"speech queue\") or interrupt the current task.\n\t *\n\t * Note that this value should be considered a suggestion; assistive\n\t * technologies may override it based on internal heuristics.\n\t *\n\t * @see https://www.w3.org/TR/wai-aria-1.1/#aria-live\n\t *\n\t * @default 'assertive' for 'error' status, 'polite' for all other statuses\n\t */\n\tpoliteness?: 'polite' | 'assertive';\n\t/**\n\t * Whether the notice should be dismissible or not\n\t *\n\t * @default true\n\t */\n\tisDismissible?: boolean;\n\t/**\n\t * A deprecated alternative to `onRemove`. This prop is kept for\n\t * compatibilty reasons but should be avoided.\n\t *\n\t * @default noop\n\t */\n\tonDismiss?: () => void;\n\t/**\n\t * An array of action objects. Each member object should contain:\n\t *\n\t * - `label`: `string` containing the text of the button/link\n\t * - `url`: `string` OR `onClick`: `( event: SyntheticEvent ) => void` to specify\n\t *    what the action does.\n\t * - `className`: `string` (optional) to add custom classes to the button styles.\n\t * - `noDefaultClasses`: `boolean` (optional) A value of `true` will remove all\n\t *    default styling.\n\t * - `variant`: `'primary' | 'secondary' | 'link'` (optional) You can denote a\n\t *    primary button action for a notice by passing a value of `primary`.\n\t *\n\t * The default appearance of an action button is inferred based on whether\n\t * `url` or `onClick` are provided, rendering the button as a link if\n\t * appropriate. If both props are provided, `url` takes precedence, and the\n\t * action button will render as an anchor tag.\n\t *\n\t * @default []\n\t */\n\tactions?: Array< NoticeAction >;\n\t/**\n\t * Determines whether or not the message should be parsed as custom HTML\n\t * instead of a string.\n\t */\n\t__unstableHTML?: boolean;\n};\n\nexport type NoticeListProps = {\n\t/**\n\t * Array of notices to render.\n\t */\n\tnotices: Array<\n\t\tOmit< NoticeProps, 'children' > & {\n\t\t\tid: string;\n\t\t\tcontent: string;\n\t\t}\n\t>;\n\t/**\n\t * Function called when a notice should be removed / dismissed.\n\t */\n\tonRemove?: ( id: string ) => void;\n\t/**\n\t * Children to be rendered inside the notice list.\n\t */\n\tchildren?: ReactNode;\n};\n"],"mappings":""}