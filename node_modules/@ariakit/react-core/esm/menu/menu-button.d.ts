import type { CompositeTypeaheadOptions } from "../composite/composite-typeahead.js";
import type { HovercardAnchorOptions } from "../hovercard/hovercard-anchor.js";
import type { PopoverDisclosureOptions } from "../popover/popover-disclosure.js";
import type { As, Props } from "../utils/types.js";
import type { MenuStore } from "./menu-store.js";
/**
 * Returns props to create a `MenuButton` component.
 * @see https://ariakit.org/components/menu
 * @example
 * ```jsx
 * const store = useMenuStore();
 * const props = useMenuButton({ store });
 * <Role {...props}>Edit</Role>
 * <Menu store={store}>
 *   <MenuItem>Undo</MenuItem>
 *   <MenuItem>Redo</MenuItem>
 * </Menu>
 * ```
 */
export declare const useMenuButton: import("../utils/types.js").Hook<MenuButtonOptions<"button" | "div">>;
/**
 * Renders a menu button that triggers a dropdown menu. Usually, this is
 * rendered as a native `button` element, but if it's a submenu button rendered
 * as a menu item inside another menu, it'll be rendered as a `div`.
 * @see https://ariakit.org/components/menu
 * @example
 * ```jsx
 * const menu = useMenuStore();
 * <MenuButton store={menu}>Edit</MenuButton>
 * <Menu store={menu}>
 *   <MenuItem>Undo</MenuItem>
 *   <MenuItem>Redo</MenuItem>
 * </Menu>
 * ```
 */
export declare const MenuButton: import("../utils/types.js").Component<MenuButtonOptions<"button" | "div">>;
export interface MenuButtonOptions<T extends As = "button" | "div"> extends HovercardAnchorOptions<T>, PopoverDisclosureOptions<T>, CompositeTypeaheadOptions<T> {
    /**
     * Object returned by the `useMenuStore` hook.
     */
    store: MenuStore;
    /**
     * Determines whether pressing a character key while focusing on the
     * `MenuButton` should move focus to the `MenuItem` starting with that
     * character. By default, it's `true` for menu buttons in a `MenuBar`, but
     * `false` for other menu buttons.
     */
    typeahead?: boolean;
}
export type MenuButtonProps<T extends As = "button" | "div"> = Props<MenuButtonOptions<T>>;
