import {
  createPopoverStore
} from "../__chunks/SOCHV2LZ.js";
import "../__chunks/LNMWV6UV.js";
import "../__chunks/WSKDP2MG.js";
import {
  createCompositeStore
} from "../__chunks/ROY5BBHL.js";
import "../__chunks/A7IMXABC.js";
import {
  batch,
  createStore,
  mergeStore,
  omit,
  setup,
  sync
} from "../__chunks/OGOHEUXI.js";
import {
  defaultValue
} from "../__chunks/WVTCK5PV.js";
import {
  isSafari,
  isTouchDevice
} from "../__chunks/UCFCIHEU.js";
import "../__chunks/O35LWD4W.js";
import "../__chunks/5XEKIOCW.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "../__chunks/PNRLI7OV.js";

// src/combobox/combobox-store.ts
var isSafariOnMobile = isSafari() && isTouchDevice();
function createComboboxStore(_a = {}) {
  var _b = _a, {
    menu,
    select
  } = _b, props = __objRest(_b, [
    "menu",
    "select"
  ]);
  const store = mergeStore(
    props.store,
    omit(menu, [
      "baseElement",
      "arrowElement",
      "anchorElement",
      "contentElement",
      "popoverElement",
      "disclosureElement",
      "anchorElement"
    ]),
    omit(select, [
      "value",
      "items",
      "renderedItems",
      "baseElement",
      "arrowElement",
      "anchorElement",
      "contentElement",
      "popoverElement",
      "disclosureElement"
    ])
  );
  const syncState = store.getState();
  const activeId = defaultValue(
    props.activeId,
    syncState.activeId,
    props.defaultActiveId,
    null
  );
  const composite = createCompositeStore(__spreadProps(__spreadValues({}, props), {
    store,
    activeId,
    includesBaseElement: defaultValue(
      props.includesBaseElement,
      syncState.includesBaseElement,
      true
    ),
    orientation: defaultValue(
      props.orientation,
      syncState.orientation,
      "vertical"
    ),
    focusLoop: defaultValue(props.focusLoop, syncState.focusLoop, true),
    focusWrap: defaultValue(props.focusWrap, syncState.focusWrap, true),
    virtualFocus: defaultValue(
      props.virtualFocus,
      syncState == null ? void 0 : syncState.virtualFocus,
      !isSafariOnMobile
    )
  }));
  const popover = createPopoverStore(__spreadProps(__spreadValues({}, props), {
    store,
    placement: defaultValue(
      props.placement,
      syncState.placement,
      "bottom-start"
    )
  }));
  const initialValue = defaultValue(
    props.value,
    syncState.value,
    props.defaultValue,
    ""
  );
  const initialState = __spreadProps(__spreadValues(__spreadValues({}, composite.getState()), popover.getState()), {
    value: initialValue,
    resetValueOnHide: defaultValue(
      props.resetValueOnHide,
      syncState.resetValueOnHide,
      false
    ),
    activeValue: syncState.activeValue
  });
  const combobox = createStore(initialState, composite, popover, store);
  setup(
    combobox,
    () => sync(combobox, ["resetValueOnHide", "mounted"], (state) => {
      if (!state.resetValueOnHide)
        return;
      if (state.mounted)
        return;
      combobox.setState("value", initialValue);
    })
  );
  setup(
    combobox,
    () => batch(combobox, ["mounted"], (state) => {
      if (state.mounted)
        return;
      combobox.setState("activeId", activeId);
      combobox.setState("moves", 0);
    })
  );
  setup(
    combobox,
    () => sync(combobox, ["moves", "activeId"], (state, prevState) => {
      if (state.moves === prevState.moves) {
        combobox.setState("activeValue", void 0);
      }
    })
  );
  setup(
    combobox,
    () => batch(combobox, ["moves", "renderedItems"], (state, prev) => {
      if (state.moves === prev.moves)
        return;
      const { activeId: activeId2 } = combobox.getState();
      const activeItem = composite.item(activeId2);
      combobox.setState("activeValue", activeItem == null ? void 0 : activeItem.value);
    })
  );
  return __spreadProps(__spreadValues(__spreadValues(__spreadValues({}, popover), composite), combobox), {
    setValue: (value) => combobox.setState("value", value)
  });
}
export {
  createComboboxStore
};
