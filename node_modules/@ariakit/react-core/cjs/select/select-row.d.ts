import type { CompositeRowOptions } from "../composite/composite-row.js";
import type { As, Props } from "../utils/types.js";
import type { SelectStore } from "./select-store.js";
/**
 * Returns props to create a `SelectRow` component.
 * @see https://ariakit.org/components/select
 * @example
 * ```jsx
 * const store = useSelectStore();
 * const props = useSelectRow({ store });
 * <SelectPopover store={store}>
 *   <Role {...props}>
 *     <SelectItem value="Apple" />
 *     <SelectItem value="Orange" />
 *   </Role>
 * </SelectPopover>
 * ```
 */
export declare const useSelectRow: import("../utils/types.js").Hook<SelectRowOptions<"div">>;
/**
 * Renders a select row.
 * @see https://ariakit.org/components/select
 * @example
 * ```jsx
 * const select = useSelectStore();
 * <Select store={select} />
 * <SelectPopover store={select}>
 *   <SelectRow>
 *     <SelectItem value="Apple" />
 *     <SelectItem value="Orange" />
 *   </SelectRow>
 *   <SelectRow>
 *     <SelectItem value="Banana" />
 *     <SelectItem value="Grape" />
 *   </SelectRow>
 * </SelectPopover>
 * ```
 */
export declare const SelectRow: import("../utils/types.js").Component<SelectRowOptions<"div">>;
export interface SelectRowOptions<T extends As = "div"> extends CompositeRowOptions<T> {
    /**
     * Object returned by the `useSelectStore` hook. If not provided, the parent
     * `SelectList` or `SelectPopover` components' context will be used.
     */
    store?: SelectStore;
}
export type SelectRowProps<T extends As = "div"> = Props<SelectRowOptions<T>>;
