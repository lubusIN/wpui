import type { MouseEvent as ReactMouseEvent } from "react";
import type { BooleanOrCallback } from "@ariakit/core/utils/types";
import type { As, Options, Props } from "../utils/types.js";
import type { CompositeStore } from "./composite-store.js";
/**
 * Returns props to create a `CompositeHover` component. The composite item that
 * receives these props will get focused on mouse move and lose focus to the
 * composite base element on mouse leave. This should be combined with the
 * `CompositeItem` component, the `useCompositeItem` hook or any component/hook
 * that uses them underneath.
 * @see https://ariakit.org/components/composite
 * @example
 * ```jsx
 * const store = useCompositeStore();
 * const props = useCompositeHover({ store });
 * <CompositeItem store={store} {...props}>Item</CompositeItem>
 * ```
 */
export declare const useCompositeHover: import("../utils/types.js").Hook<CompositeHoverOptions<"div">>;
/**
 * Renders an element in a composite widget that receives focus on mouse move
 * and loses focus to the composite base element on mouse leave. This should be
 * combined with the `CompositeItem` component, the `useCompositeItem` hook or
 * any component/hook that uses them underneath.
 * @see https://ariakit.org/components/composite
 * @example
 * ```jsx
 * const composite = useCompositeStore();
 * <Composite store={composite}>
 *   <CompositeHover render={<CompositeItem />}>Item</CompositeHover>
 * </Composite>
 * ```
 */
export declare const CompositeHover: import("../utils/types.js").Component<CompositeHoverOptions<"div">>;
export interface CompositeHoverOptions<T extends As = "div"> extends Options<T> {
    /**
     * Object returned by the `useCompositeStore` hook. If not provided, the
     * parent `Composite` component's context will be used.
     */
    store?: CompositeStore;
    /**
     * Whether to focus the composite item on hover.
     *
     * Live examples:
     * - [Textarea with inline
     *   Combobox](https://ariakit.org/examples/combobox-textarea)
     * @default true
     */
    focusOnHover?: BooleanOrCallback<ReactMouseEvent<HTMLElement>>;
}
export type CompositeHoverProps<T extends As = "div"> = Props<CompositeHoverOptions<T>>;
