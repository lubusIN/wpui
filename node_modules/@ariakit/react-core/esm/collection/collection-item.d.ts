import type { CollectionStoreItem } from "@ariakit/core/collection/collection-store";
import type { As, Options, Props } from "../utils/types.js";
import type { CollectionStore } from "./collection-store.js";
/**
 * Returns props to create a `CollectionItem` component. This hook will register
 * the item in the collection store. If this hook is used in a component that is
 * wrapped by `Collection` or a component that implements `useCollection`,
 * there's no need to explicitly pass the `store` prop.
 * @see https://ariakit.org/components/collection
 * @example
 * ```jsx
 * const store = useCollectionStore();
 * const props = useCollectionItem({ store });
 * <Role {...props}>Item</Role>
 * ```
 */
export declare const useCollectionItem: import("../utils/types.js").Hook<CollectionItemOptions<"div">>;
/**
 * Renders an item in a collection. The collection store can be passed
 * explicitly through the `store` prop or implicitly through the parent
 * `Collection` component.
 * @see https://ariakit.org/components/collection
 * @example
 * ```jsx
 * const store = useCollectionStore();
 * <CollectionItem store={store}>Item 1</CollectionItem>
 * <CollectionItem store={store}>Item 2</CollectionItem>
 * <CollectionItem store={store}>Item 3</CollectionItem>
 * ```
 */
export declare const CollectionItem: import("../utils/types.js").Component<CollectionItemOptions<"div">>;
export interface CollectionItemOptions<T extends As = "div"> extends Options<T> {
    /**
     * Object returned by the `useCollectionStore` hook. If not provided, the
     * parent `Collection` component's context will be used.
     */
    store?: CollectionStore;
    /**
     * Whether the item should be registered to the store.
     * @default true
     */
    shouldRegisterItem?: boolean;
    /**
     * A memoized function that returns props that will be passed along with the
     * item when it gets registered to the store.
     * @example
     * ```jsx
     * const store = useCollectionStore();
     * const getItem = useCallback((item) => ({ ...item, custom: true }), []);
     * <CollectionItem store={store} getItem={getItem} />
     * ```
     */
    getItem?: (props: CollectionStoreItem) => CollectionStoreItem;
}
export type CollectionItemProps<T extends As = "div"> = Props<CollectionItemOptions<T>>;
