import type { As, Component, Options, Props } from "../utils/types.js";
declare const elements: readonly ["a", "button", "details", "dialog", "div", "form", "h1", "h2", "h3", "h4", "h5", "h6", "header", "img", "input", "label", "li", "nav", "ol", "p", "section", "select", "span", "textarea", "ul", "svg"];
type RoleElements = {
    [K in (typeof elements)[number]]: Component<RoleOptions<K>>;
};
/**
 * Returns props to create a `Role` component.
 * @see https://ariakit.org/components/role
 * @example
 * ```jsx
 * const props = useRole();
 * <Role {...props} />
 * ```
 */
export declare const useRole: import("../utils/types.js").Hook<RoleOptions<"div">>;
/**
 * Renders an abstract element that supports the `render` prop a `wrapElement`
 * prop that can be used to wrap the underlying element with React Portal,
 * Context or other component types.
 * @see https://ariakit.org/components/role
 * @example
 * ```jsx
 * <Role render={<div />} />
 * ```
 */
export declare const Role: Component<RoleOptions<"div">> & RoleElements;
export type RoleOptions<T extends As = "div"> = Options<T>;
export type RoleProps<T extends As = "div"> = Props<RoleOptions<T>>;
export {};
