{"version":3,"names":[],"sources":["@wordpress/components/src/navigation/types.ts"],"sourcesContent":["/**\n * Internal dependencies\n */\nimport type { ButtonProps } from '../button/types';\n\ntype IfDiscriminantDefinedBothRequired< TDiscriminant, TOther > =\n\t// When props in TDiscriminant are specified,\n\t// then props from TOther are required too\n\t| {\n\t\t\t[ K in keyof ( TDiscriminant & TOther ) ]: NonNullable<\n\t\t\t\t( TDiscriminant & TOther )[ K ]\n\t\t\t>;\n\t  }\n\t// When props in TDiscriminant are not specified,\n\t// then props from TOther are optional\n\t| ( {\n\t\t\t[ K in keyof TDiscriminant ]?: never;\n\t  } & {\n\t\t\t[ K in keyof TOther ]?: TOther[ K ];\n\t  } );\n\n// React Components\n\nexport type NavigationProps = {\n\t/**\n\t * The active item slug.\n\t */\n\tactiveItem?: string;\n\t/**\n\t * The active menu slug.\n\t *\n\t * @default 'root'\n\t */\n\tactiveMenu?: string;\n\t/**\n\t * The children components.\n\t */\n\tchildren?: React.ReactNode;\n\t/**\n\t * Optional classname for the component.\n\t */\n\tclassName?: string;\n\t/**\n\t * Callback used to sync the active menu between the external state\n\t * and the Navigation's internal state.\n\t */\n\tonActivateMenu?: ( activeMenuSlug: string ) => void;\n};\n\n// When `onSearch` is specified, `search` should be specified too\ntype _NavigationMenuSearchProps = IfDiscriminantDefinedBothRequired<\n\t{\n\t\t/**\n\t\t * When the `hasSearch` prop is `true`, this callback handles the search\n\t\t * input's `onChange` event, making it controlled from the outside.\n\t\t * When using this prop, the `search` prop should be also set.\n\t\t */\n\t\tonSearch: ( searchString: string ) => void;\n\t},\n\t{\n\t\t/**\n\t\t * When the `hasSearch` is `true` and the `onSearch` prop is provided, this\n\t\t * prop controls the value of the search input.\n\t\t * Required when the `onSearch` prop is provided.\n\t\t */\n\t\tsearch: string;\n\t}\n>;\n\nexport type NavigationMenuProps = _NavigationMenuSearchProps & {\n\t/**\n\t * The back button label used in nested menus.\n\t * If not provided, the label will be inferred from the parent menu's title.\n\t * If the parent menu's title is not available then it will default to \"Back\".\n\t *\n\t * @default parentMenuTitle ?? 'Back'\n\t */\n\tbackButtonLabel?: string;\n\t/**\n\t * A callback to handle clicking on the back button.\n\t * If this prop is provided then the back button will be shown.\n\t */\n\tonBackButtonClick?: React.MouseEventHandler< HTMLElement >;\n\t/**\n\t * The children components.\n\t */\n\tchildren?: React.ReactNode;\n\t/**\n\t * Optional classname for the component.\n\t */\n\tclassName?: string;\n\t/**\n\t * When `true`, enables the search feature on the menu title.\n\t */\n\thasSearch?: boolean;\n\t/**\n\t * Indicates whether the menu is empty or not. Used together with the\n\t * `hideIfTargetMenuEmpty` prop of `NavigationItem`.\n\t */\n\tisEmpty?: boolean;\n\t/**\n\t * Indicates whether the search is debouncing or not. In case of `true`, the\n\t * \"No results found.\" text is omitted. Used to prevent showing the\n\t * \"No results found.\" text between debounced searches.\n\t */\n\tisSearchDebouncing?: boolean;\n\t/**\n\t * The unique identifier of the menu.\n\t * The root menu can omit this prop, and it will default to \"root\".\n\t * All other menus need to specify it.\n\t *\n\t * @default 'root'\n\t */\n\tmenu?: string;\n\t/**\n\t * The parent menu slug; used by nested menus to indicate their parent menu.\n\t */\n\tparentMenu?: string;\n\t/**\n\t * The menu title. It's also the field used by the menu search function.\n\t */\n\ttitle?: string;\n\t/**\n\t * Use this prop to render additional actions in the menu title.\n\t */\n\ttitleAction?: React.ReactNode;\n};\n\nexport type NavigationGroupProps = {\n\t/**\n\t * Optional classname for the component.\n\t */\n\tclassName?: string;\n\t/**\n\t * The group title.\n\t */\n\ttitle?: string;\n\t/**\n\t * The children components.\n\t */\n\tchildren: React.ReactNode;\n};\n\ntype _NavigationItemButtonProps =\n\t| ( ButtonProps & {\n\t\t\t/**\n\t\t\t * If set to `true` the menu item will only act as a text-only item,\n\t\t\t * rather than a `<button />` or `<a />` element.\n\t\t\t */\n\t\t\tisText?: false;\n\t  } )\n\t| {\n\t\t\t/**\n\t\t\t * If set to `true` the menu item will only act as a text-only item,\n\t\t\t * rather than a `<button />` or `<a />` element.\n\t\t\t */\n\t\t\tisText: true;\n\t  };\n\nexport type NavigationItemBaseProps = {\n\t/**\n\t * The item badge content.\n\t */\n\tbadge?: string | number;\n\t/**\n\t * The children components. When not specified, the item will render the\n\t * default item UI.\n\t */\n\tchildren?: React.ReactNode;\n\t/**\n\t * Optional classname for the component.\n\t */\n\tclassName?: string;\n\t/**\n\t * If provided, causes the component to render an `<a />` element\n\t * instead of a `<button />` element.\n\t */\n\thref?: string;\n\t/**\n\t * If no `children` are passed, this prop allows to specify a custom icon for\n\t * the menu item.\n\t */\n\ticon?: JSX.Element;\n\t/**\n\t * The unique identifier of the item.\n\t */\n\titem?: string;\n\t/**\n\t * The child menu slug. If provided, clicking on the item will navigate\n\t * to the target menu.\n\t */\n\tnavigateToMenu?: string;\n\t/**\n\t * Indicates whether this item should be hidden if the menu specified in\n\t * `navigateToMenu` is marked as empty in the `isEmpty` prop.\n\t * Used together with the `isEmpty` prop of `NavigationMenu`.\n\t */\n\thideIfTargetMenuEmpty?: boolean;\n\t/**\n\t * A callback to handle clicking on a menu item.\n\t *\n\t * @default noop\n\t */\n\tonClick?: React.MouseEventHandler;\n\t/**\n\t * The item title.\n\t */\n\ttitle?: string;\n};\n\nexport type NavigationItemProps = _NavigationItemButtonProps &\n\tNavigationItemBaseProps;\n\nexport type NavigationItemBaseContentProps = Pick<\n\tNavigationItemProps,\n\t'badge' | 'title'\n>;\n\nexport type NavigationBackButtonProps = {\n\t/**\n\t * The text displayed for the button\n\t */\n\tbackButtonLabel?: string;\n\t/**\n\t * Optional classname for the component.\n\t */\n\tclassName?: string;\n\t/**\n\t * If provided, causes the component to render an `<a />` element\n\t * instead of a `<button />` element.\n\t */\n\thref?: string;\n\t/**\n\t * Callback function called when the button is clicked.\n\t */\n\tonClick?: React.MouseEventHandler;\n\t/**\n\t * Id of the parent menu\n\t */\n\tparentMenu?: string;\n};\n\nexport type NavigationMenuTitleSearchProps = Pick<\n\tNavigationMenuProps,\n\t'onSearch' | 'search' | 'title'\n> & {\n\t// @see `speak` function from `@wordpress/a11y`\n\tdebouncedSpeak: (\n\t\tmessage: string,\n\t\tariaLive?: 'off' | 'polite' | 'assertive'\n\t) => void;\n\tonCloseSearch: () => void;\n};\n\nexport type NavigationMenuTitleProps = Pick<\n\tNavigationMenuProps,\n\t'hasSearch' | 'onSearch' | 'search' | 'title' | 'titleAction'\n>;\n\nexport type NavigationSearchNoResultsFoundProps = Pick<\n\tNavigationMenuProps,\n\t'search'\n>;\n\n// Data objects & context\n\nexport type Item = Omit< NavigationItemBaseProps, 'children' > & {\n\t/**\n\t * The group id\n\t */\n\tgroup?: string;\n\t/**\n\t * The menu id\n\t */\n\tmenu?: string;\n\t/**\n\t * True is the item is currently visible (ie. the item is part\n\t * of the active menu, and — if there is a search query — its title\n\t * matches the search query).\n\t */\n\t_isVisible: boolean;\n};\n\nexport type Menu = Omit< NavigationMenuProps, 'children' > & {\n\tmenu: string;\n};\n\nexport type NavigationGroupContext = {\n\t/**\n\t * The unique id of the group\n\t */\n\tgroup?: string;\n};\n\nexport type NavigationMenuContext = {\n\tmenu?: string;\n\tsearch?: string;\n};\n\nexport type NavigationContext = {\n\tactiveItem?: string;\n\tactiveMenu: string;\n\tsetActiveMenu: (\n\t\tparentMenu: string,\n\t\tanimationDirection?: 'left' | 'right'\n\t) => void;\n\n\tnavigationTree: {\n\t\titems: Record< string, Item >;\n\t\tgetItem: ( itemId: string ) => Item | undefined;\n\t\taddItem: ( itemId: string, itemProps: Item ) => void;\n\t\tremoveItem: ( itemId: string ) => void;\n\n\t\tmenus: Record< string, Menu >;\n\t\tgetMenu: ( menuId: string ) => Menu | undefined;\n\t\taddMenu: ( menuId: string, menuProps: Menu ) => void;\n\t\tremoveMenu: ( menuId: string ) => void;\n\t\tchildMenu: Record< string, string[] >;\n\t\ttraverseMenu: (\n\t\t\tstartMenu: string,\n\t\t\tcallback: ( menuObject: Menu ) => boolean | undefined\n\t\t) => void;\n\t\tisMenuEmpty: ( menuId: string ) => boolean;\n\t};\n};\n"],"mappings":""}