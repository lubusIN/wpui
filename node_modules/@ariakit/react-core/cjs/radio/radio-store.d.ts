import * as Core from "@ariakit/core/radio/radio-store";
import type { CompositeStoreFunctions, CompositeStoreOptions, CompositeStoreState } from "../composite/composite-store.js";
import type { Store } from "../utils/store.js";
export declare function useRadioStoreOptions(props: RadioStoreProps): Partial<import("../collection/collection-store.js").CollectionStoreOptions<{
    id: string;
    element?: HTMLElement | null | undefined;
} & {
    rowId?: string | undefined;
    disabled?: boolean | undefined;
    children?: string | undefined;
}>>;
export declare function useRadioStoreProps<T extends RadioStore>(store: T, props: RadioStoreProps): T;
/**
 * Creates a radio store.
 * @see https://ariakit.org/components/radio
 * @example
 * ```jsx
 * const radio = useRadioStore();
 * <RadioGroup store={radio}>
 *   <Radio value="Apple" />
 *   <Radio value="Orange" />
 * </RadioGroup>
 * ```
 */
export declare function useRadioStore(props?: RadioStoreProps): RadioStore;
export interface RadioStoreState extends Core.RadioStoreState, CompositeStoreState {
}
export interface RadioStoreFunctions extends Core.RadioStoreFunctions, CompositeStoreFunctions {
}
export interface RadioStoreOptions extends Core.RadioStoreOptions, CompositeStoreOptions {
    /**
     * Function that will be called when the `value` state changes.
     * @param value The new value.
     * @example
     * function RadioGroup({ value, onChange }) {
     *   const radio = useRadioStore({ value, setValue: onChange });
     * }
     */
    setValue?: (value: RadioStoreState["value"]) => void;
}
export type RadioStoreProps = RadioStoreOptions & Core.RadioStoreProps;
export type RadioStore = RadioStoreFunctions & Store<Core.RadioStore>;
