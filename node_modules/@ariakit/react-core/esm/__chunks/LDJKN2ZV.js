import {
  useButton
} from "./O6CV6VRM.js";
import {
  createComponent,
  createElement,
  createHook
} from "./NQJBHION.js";
import {
  useBooleanEvent,
  useEvent,
  useMergeRefs
} from "./J7Q2EO23.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "./PNRLI7OV.js";

// src/disclosure/disclosure.ts
import { useEffect, useRef, useState } from "react";
var useDisclosure = createHook(
  (_a) => {
    var _b = _a, { store, toggleOnClick = true } = _b, props = __objRest(_b, ["store", "toggleOnClick"]);
    const ref = useRef(null);
    const [expanded, setExpanded] = useState(false);
    const disclosureElement = store.useState("disclosureElement");
    const open = store.useState("open");
    useEffect(() => {
      let isCurrentDisclosure = disclosureElement === ref.current;
      if (!disclosureElement || !disclosureElement.isConnected) {
        store.setDisclosureElement(ref.current);
        isCurrentDisclosure = true;
      }
      setExpanded(open && isCurrentDisclosure);
    }, [disclosureElement, open]);
    const onMouseDownProp = props.onMouseDown;
    const onMouseDown = useEvent((event) => {
      store.setDisclosureElement(event.currentTarget);
      onMouseDownProp == null ? void 0 : onMouseDownProp(event);
    });
    const onClickProp = props.onClick;
    const toggleOnClickProp = useBooleanEvent(toggleOnClick);
    const isDuplicate = "data-disclosure" in props;
    const onClick = useEvent((event) => {
      store.setDisclosureElement(event.currentTarget);
      onClickProp == null ? void 0 : onClickProp(event);
      if (event.defaultPrevented)
        return;
      if (isDuplicate)
        return;
      if (!toggleOnClickProp(event))
        return;
      store.toggle();
    });
    const contentElement = store.useState("contentElement");
    props = __spreadProps(__spreadValues({
      "data-disclosure": "",
      "aria-expanded": expanded,
      "aria-controls": contentElement == null ? void 0 : contentElement.id
    }, props), {
      ref: useMergeRefs(ref, props.ref),
      onMouseDown,
      onClick
    });
    props = useButton(props);
    return props;
  }
);
var Disclosure = createComponent((props) => {
  const htmlProps = useDisclosure(props);
  return createElement("button", htmlProps);
});
if (process.env.NODE_ENV !== "production") {
  Disclosure.displayName = "Disclosure";
}

export {
  useDisclosure,
  Disclosure
};
