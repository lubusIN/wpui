import * as Core from "@ariakit/core/combobox/combobox-store";
import type { CompositeStoreFunctions, CompositeStoreOptions, CompositeStoreState } from "../composite/composite-store.js";
import type { PopoverStoreFunctions, PopoverStoreOptions, PopoverStoreState } from "../popover/popover-store.js";
import type { Store } from "../utils/store.js";
export declare function useComboboxStoreOptions(props: ComboboxStoreProps): {
    setOpen?: ((open: boolean) => void) | undefined;
    defaultOpen?: boolean | undefined;
    disclosure?: import("@ariakit/core/disclosure/disclosure-store").DisclosureStore | undefined;
    open?: boolean | undefined;
    animated?: number | boolean | undefined;
    setItems?: import("@ariakit/core/utils/types").BivariantCallback<(items: ({
        id: string;
        element?: HTMLElement | null | undefined;
    } & {
        rowId?: string | undefined;
        disabled?: boolean | undefined;
        children?: string | undefined;
    } & {
        value?: string | undefined;
    })[]) => void> | undefined;
    defaultItems?: ({
        id: string;
        element?: HTMLElement | null | undefined;
    } & {
        rowId?: string | undefined;
        disabled?: boolean | undefined;
        children?: string | undefined;
    } & {
        value?: string | undefined;
    })[] | undefined;
    items?: ({
        id: string;
        element?: HTMLElement | null | undefined;
    } & {
        rowId?: string | undefined;
        disabled?: boolean | undefined;
        children?: string | undefined;
    } & {
        value?: string | undefined;
    })[] | undefined;
};
export declare function useComboboxStoreProps<T extends ComboboxStore>(store: T, props: ComboboxStoreProps): T;
/**
 * Creates a combobox store.
 * @see https://ariakit.org/components/combobox
 * @example
 * ```jsx
 * const combobox = useComboboxStore();
 * <Combobox store={combobox} />
 * <ComboboxPopover store={combobox}>
 *   <ComboboxItem value="Apple" />
 *   <ComboboxItem value="Banana" />
 *   <ComboboxItem value="Orange" />
 * </ComboboxPopover>
 * ```
 */
export declare function useComboboxStore(props?: ComboboxStoreProps): ComboboxStore;
export type ComboboxStoreItem = Core.ComboboxStoreItem;
export interface ComboboxStoreState extends Core.ComboboxStoreState, CompositeStoreState<ComboboxStoreItem>, PopoverStoreState {
}
export interface ComboboxStoreFunctions extends Core.ComboboxStoreFunctions, CompositeStoreFunctions<ComboboxStoreItem>, PopoverStoreFunctions {
}
export interface ComboboxStoreOptions extends Core.ComboboxStoreOptions, CompositeStoreOptions<ComboboxStoreItem>, PopoverStoreOptions {
    /**
     * A callback that gets called when the `value` state changes.
     * @param value The new value.
     * @example
     * function MyCombobox({ value, onChange }) {
     *   const combobox = useComboboxStore({ value, setValue: onChange });
     * }
     */
    setValue?: (value: ComboboxStoreState["value"]) => void;
}
export type ComboboxStoreProps = ComboboxStoreOptions & Core.ComboboxStoreProps;
export type ComboboxStore = ComboboxStoreFunctions & Store<Core.ComboboxStore>;
