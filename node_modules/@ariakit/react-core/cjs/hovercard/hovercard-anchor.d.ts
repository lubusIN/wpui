import type { MouseEvent as ReactMouseEvent } from "react";
import type { BooleanOrCallback } from "@ariakit/core/utils/types";
import type { FocusableOptions } from "../focusable/focusable.js";
import type { As, Props } from "../utils/types.js";
import type { HovercardStore } from "./hovercard-store.js";
/**
 * Returns props to create a `HovercardAnchor` component.
 * @see https://ariakit.org/components/hovercard
 * @example
 * ```jsx
 * const store = useHovercardStore();
 * const props = useHovercardAnchor({ store });
 * <Role {...props} render={<a />}>@username</Role>
 * <Hovercard store={store}>Details</Hovercard>
 * ```
 */
export declare const useHovercardAnchor: import("../utils/types.js").Hook<HovercardAnchorOptions<"a">>;
/**
 * Renders an anchor element that will open a popover (`Hovercard`) on hover.
 * @see https://ariakit.org/components/hovercard
 * @example
 * ```jsx
 * const hovercard = useHovercardStore();
 * <HovercardAnchor store={hovercard}>@username</HovercardAnchor>
 * <Hovercard store={hovercard}>Details</Hovercard>
 * ```
 */
export declare const HovercardAnchor: import("../utils/types.js").Component<HovercardAnchorOptions<"a">>;
export interface HovercardAnchorOptions<T extends As = "a"> extends FocusableOptions<T> {
    /**
     * Object returned by the `useHovercardStore` hook.
     */
    store: HovercardStore;
    /**
     * Whether to show the hovercard on mouse move.
     * @default true
     */
    showOnHover?: BooleanOrCallback<ReactMouseEvent<HTMLElement>>;
}
export type HovercardAnchorProps<T extends As = "a"> = Props<HovercardAnchorOptions<T>>;
