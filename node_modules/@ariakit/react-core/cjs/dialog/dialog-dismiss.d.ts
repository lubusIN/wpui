import type { ButtonOptions } from "../button/button.js";
import type { As, Props } from "../utils/types.js";
import type { DialogStore } from "./dialog-store.js";
/**
 * Returns props to create a `DialogDismiss` component.
 * @see https://ariakit.org/components/dialog
 * @example
 * ```jsx
 * const store = useDialogStore();
 * const props = useDialogDismiss({ store });
 * <Dialog store={store}>
 *   <Role {...props} />
 * </Dialog>
 * ```
 */
export declare const useDialogDismiss: import("../utils/types.js").Hook<DialogDismissOptions<"button">>;
/**
 * Renders a button that hides a dialog.
 * @see https://ariakit.org/components/dialog
 * @example
 * ```jsx
 * const dialog = useDialogStore();
 * <Dialog store={dialog}>
 *   <DialogDismiss />
 * </Dialog>
 * ```
 */
export declare const DialogDismiss: import("../utils/types.js").Component<DialogDismissOptions<"button">>;
export interface DialogDismissOptions<T extends As = "button"> extends ButtonOptions<T> {
    /**
     * Object returned by the `useDialogStore` hook.
     */
    store?: DialogStore;
}
export type DialogDismissProps<T extends As = "button"> = Props<DialogDismissOptions<T>>;
