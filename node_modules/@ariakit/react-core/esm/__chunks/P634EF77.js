import {
  ComboboxContext
} from "./5VGBBGF5.js";
import {
  isHidden
} from "./WHEEIXMF.js";
import {
  useFocusable
} from "./MYID4V27.js";
import {
  createComponent,
  createElement,
  createHook
} from "./NQJBHION.js";
import {
  useEvent,
  useId,
  useMergeRefs,
  useWrapElement
} from "./J7Q2EO23.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "./PNRLI7OV.js";

// src/combobox/combobox-list.tsx
import { useRef } from "react";
import { isFocusEventOutside } from "@ariakit/core/utils/events";
import { jsx } from "react/jsx-runtime";
var useComboboxList = createHook(
  (_a) => {
    var _b = _a, { store, focusable = true, alwaysVisible } = _b, props = __objRest(_b, ["store", "focusable", "alwaysVisible"]);
    const ref = useRef(null);
    const id = useId(props.id);
    const onKeyDownProp = props.onKeyDown;
    const onKeyDown = useEvent((event) => {
      onKeyDownProp == null ? void 0 : onKeyDownProp(event);
      if (event.defaultPrevented)
        return;
      if (event.key === "Escape") {
        store.move(null);
      }
    });
    const restoreVirtualFocus = useRef(false);
    const onFocusVisibleProp = props.onFocusVisible;
    const onFocusVisible = useEvent((event) => {
      onFocusVisibleProp == null ? void 0 : onFocusVisibleProp(event);
      if (event.defaultPrevented)
        return;
      if (event.type !== "focus")
        return;
      const { virtualFocus } = store.getState();
      if (!virtualFocus)
        return;
      const { relatedTarget, currentTarget } = event;
      if (relatedTarget && currentTarget.contains(relatedTarget))
        return;
      restoreVirtualFocus.current = true;
      store.setState("virtualFocus", false);
    });
    const onBlurProp = props.onBlur;
    const onBlur = useEvent((event) => {
      onBlurProp == null ? void 0 : onBlurProp(event);
      if (event.defaultPrevented)
        return;
      if (!restoreVirtualFocus.current)
        return;
      if (!isFocusEventOutside(event))
        return;
      restoreVirtualFocus.current = false;
      store.setState("virtualFocus", true);
    });
    props = useWrapElement(
      props,
      (element) => /* @__PURE__ */ jsx(ComboboxContext.Provider, { value: store, children: element }),
      [store]
    );
    const mounted = store.useState("mounted");
    const hidden = isHidden(mounted, props.hidden, alwaysVisible);
    const style = hidden ? __spreadProps(__spreadValues({}, props.style), { display: "none" }) : props.style;
    props = __spreadProps(__spreadValues({
      id,
      hidden,
      role: "listbox",
      tabIndex: focusable ? -1 : void 0
    }, props), {
      ref: useMergeRefs(id ? store.setContentElement : null, ref, props.ref),
      style,
      onKeyDown,
      onFocusVisible,
      onBlur
    });
    props = useFocusable(__spreadValues({ focusable }, props));
    return props;
  }
);
var ComboboxList = createComponent((props) => {
  const htmlProps = useComboboxList(props);
  return createElement("div", htmlProps);
});
if (process.env.NODE_ENV !== "production") {
  ComboboxList.displayName = "ComboboxList";
}

export {
  useComboboxList,
  ComboboxList
};
