/// <reference types="react" />
/**
 * RangeControls are used to make selections from a range of incremental values.
 *
 * ```jsx
 * import { RangeControl } from '@wordpress/components';
 * import { useState } from '@wordpress/element';
 *
 * const MyRangeControl = () => {
 *   const [ isChecked, setChecked ] = useState( true );
 *   return (
 *     <RangeControl
 *       help="Please select how transparent you would like this."
 *       initialPosition={50}
 *       label="Opacity"
 *       max={100}
 *       min={0}
 *       onChange={() => {}}
 *     />
 *   );
 * };
 * ```
 */
export declare const RangeControl: import("react").ForwardRefExoticComponent<Pick<import("../base-control/types").BaseControlProps, "help" | "hideLabelFromVision" | "__nextHasNoMarginBottom"> & import("./types").NumericProps & {
    disabled?: boolean | undefined;
    marks?: boolean | {
        value: number;
        label?: string | undefined;
    }[] | undefined;
    step?: number | "any" | undefined;
} & {
    afterIcon?: import("../icon").IconType | undefined;
    allowReset?: boolean | undefined;
    beforeIcon?: import("../icon").IconType | undefined;
    color?: import("csstype").Property.Color | undefined;
    currentInput?: number | undefined;
    icon?: string | undefined;
    initialPosition?: number | undefined;
    isShiftStepEnabled?: boolean | undefined;
    label?: string | undefined;
    onBlur?: import("react").FocusEventHandler<HTMLInputElement> | undefined;
    onChange?: ((value?: number | undefined) => void) | undefined;
    onFocus?: import("react").FocusEventHandler<HTMLInputElement> | undefined;
    onMouseLeave?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
    onMouseMove?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
    railColor?: import("csstype").Property.Color | undefined; /**
     * Previously, this callback would always receive undefined as
     * an argument. This behavior is unexpected, specifically
     * when resetFallbackValue is defined.
     *
     * The value of undefined is not ideal. Passing it through
     * to internal <input /> elements would change it from a
     * controlled component to an uncontrolled component.
     *
     * For now, to minimize unexpected regressions, we're going to
     * preserve the undefined callback argument, except when a
     * resetFallbackValue is defined.
     */
    renderTooltipContent?: ((value?: import("./types").ControlledRangeValue | undefined) => string | number | null | undefined) | undefined;
    resetFallbackValue?: number | undefined;
    separatorType?: "none" | "fullWidth" | "topFullWidth" | undefined;
    shiftStep?: number | undefined;
    __next40pxDefaultSize?: boolean | undefined;
    showTooltip?: boolean | undefined;
    trackColor?: import("csstype").Property.Color | undefined;
    type?: "stepper" | undefined;
    withInputField?: boolean | undefined;
} & Omit<Pick<import("react").DetailedHTMLProps<import("react").InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, "key" | keyof import("react").InputHTMLAttributes<HTMLInputElement>>, "children" | "label" | "color" | "help" | "type" | "onFocus" | "onBlur" | "onChange" | "onMouseLeave" | "onMouseMove" | "as" | "disabled" | "step" | "icon" | "hideLabelFromVision" | "__nextHasNoMarginBottom" | "__next40pxDefaultSize" | "showTooltip" | "isShiftStepEnabled" | "shiftStep" | keyof import("./types").NumericProps | "marks" | "afterIcon" | "allowReset" | "beforeIcon" | "currentInput" | "initialPosition" | "railColor" | "renderTooltipContent" | "resetFallbackValue" | "separatorType" | "trackColor" | "withInputField"> & import("react").RefAttributes<HTMLInputElement>>;
export default RangeControl;
//# sourceMappingURL=index.d.ts.map