import type { As, Options, Props } from "../utils/types.js";
import type { PopoverStore, PopoverStoreState } from "./popover-store.js";
/**
 * Returns props to create a `PopoverDisclosureArrow` component.
 * @see https://ariakit.org/components/popover
 * @example
 * ```jsx
 * const store = usePopoverStore();
 * const props = usePopoverDisclosureArrow({ store });
 * <PopoverDisclosure store={store}>
 *   Disclosure
 *   <Role {...props} />
 * </PopoverDisclosure>
 * ```
 */
export declare const usePopoverDisclosureArrow: import("../utils/types.js").Hook<PopoverDisclosureArrowOptions<"span">>;
/**
 * Renders an arrow pointing to the popover position. It's usually rendered
 * inside the `PopoverDisclosure` component.
 * @see https://ariakit.org/components/popover
 * @example
 * ```jsx
 * const popover = usePopoverStore();
 * <PopoverDisclosure store={popover}>
 *   Disclosure
 *   <PopoverDisclosureArrow />
 * </PopoverDisclosure>
 * <Popover store={popover}>Popover</Popover>
 * ```
 */
export declare const PopoverDisclosureArrow: import("../utils/types.js").Component<PopoverDisclosureArrowOptions<"span">>;
export interface PopoverDisclosureArrowOptions<T extends As = "span"> extends Options<T> {
    /**
     * Object returned by the `usePopoverStore` hook. If not provided, the parent
     * `PopoverDisclosure` component's context will be used.
     */
    store?: PopoverStore;
    /**
     * Placement to which the arrow should point. If not provided, the parent
     * `PopoverDisclosure` component's context will be used.
     */
    placement?: PopoverStoreState["placement"];
}
export type PopoverDisclosureArrowProps<T extends As = "span"> = Props<PopoverDisclosureArrowOptions<T>>;
