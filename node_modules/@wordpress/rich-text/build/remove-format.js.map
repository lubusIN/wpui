{"version":3,"names":["_normaliseFormats","require","removeFormat","value","formatType","startIndex","start","endIndex","end","formats","activeFormats","newFormats","slice","format","find","type","newFormat","filterFormats","i","normaliseFormats","filter","index","length"],"sources":["@wordpress/rich-text/src/remove-format.js"],"sourcesContent":["/**\n * Internal dependencies\n */\n\nimport { normaliseFormats } from './normalise-formats';\n\n/** @typedef {import('./types').RichTextValue} RichTextValue */\n\n/**\n * Remove any format object from a Rich Text value by type from the given\n * `startIndex` to the given `endIndex`. Indices are retrieved from the\n * selection if none are provided.\n *\n * @param {RichTextValue} value        Value to modify.\n * @param {string}        formatType   Format type to remove.\n * @param {number}        [startIndex] Start index.\n * @param {number}        [endIndex]   End index.\n *\n * @return {RichTextValue} A new value with the format applied.\n */\nexport function removeFormat(\n\tvalue,\n\tformatType,\n\tstartIndex = value.start,\n\tendIndex = value.end\n) {\n\tconst { formats, activeFormats } = value;\n\tconst newFormats = formats.slice();\n\n\t// If the selection is collapsed, expand start and end to the edges of the\n\t// format.\n\tif ( startIndex === endIndex ) {\n\t\tconst format = newFormats[ startIndex ]?.find(\n\t\t\t( { type } ) => type === formatType\n\t\t);\n\n\t\tif ( format ) {\n\t\t\twhile (\n\t\t\t\tnewFormats[ startIndex ]?.find(\n\t\t\t\t\t( newFormat ) => newFormat === format\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tfilterFormats( newFormats, startIndex, formatType );\n\t\t\t\tstartIndex--;\n\t\t\t}\n\n\t\t\tendIndex++;\n\n\t\t\twhile (\n\t\t\t\tnewFormats[ endIndex ]?.find(\n\t\t\t\t\t( newFormat ) => newFormat === format\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tfilterFormats( newFormats, endIndex, formatType );\n\t\t\t\tendIndex++;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfor ( let i = startIndex; i < endIndex; i++ ) {\n\t\t\tif ( newFormats[ i ] ) {\n\t\t\t\tfilterFormats( newFormats, i, formatType );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn normaliseFormats( {\n\t\t...value,\n\t\tformats: newFormats,\n\t\tactiveFormats:\n\t\t\tactiveFormats?.filter( ( { type } ) => type !== formatType ) || [],\n\t} );\n}\n\nfunction filterFormats( formats, index, formatType ) {\n\tconst newFormats = formats[ index ].filter(\n\t\t( { type } ) => type !== formatType\n\t);\n\n\tif ( newFormats.length ) {\n\t\tformats[ index ] = newFormats;\n\t} else {\n\t\tdelete formats[ index ];\n\t}\n}\n"],"mappings":";;;;;;AAIA,IAAAA,iBAAA,GAAAC,OAAA;AAJA;AACA;AACA;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,YAAYA,CAC3BC,KAAK,EACLC,UAAU,EACVC,UAAU,GAAGF,KAAK,CAACG,KAAK,EACxBC,QAAQ,GAAGJ,KAAK,CAACK,GAAG,EACnB;EACD,MAAM;IAAEC,OAAO;IAAEC;EAAc,CAAC,GAAGP,KAAK;EACxC,MAAMQ,UAAU,GAAGF,OAAO,CAACG,KAAK,CAAC,CAAC;;EAElC;EACA;EACA,IAAKP,UAAU,KAAKE,QAAQ,EAAG;IAC9B,MAAMM,MAAM,GAAGF,UAAU,CAAEN,UAAU,CAAE,EAAES,IAAI,CAC5C,CAAE;MAAEC;IAAK,CAAC,KAAMA,IAAI,KAAKX,UAC1B,CAAC;IAED,IAAKS,MAAM,EAAG;MACb,OACCF,UAAU,CAAEN,UAAU,CAAE,EAAES,IAAI,CAC3BE,SAAS,IAAMA,SAAS,KAAKH,MAChC,CAAC,EACA;QACDI,aAAa,CAAEN,UAAU,EAAEN,UAAU,EAAED,UAAW,CAAC;QACnDC,UAAU,EAAE;MACb;MAEAE,QAAQ,EAAE;MAEV,OACCI,UAAU,CAAEJ,QAAQ,CAAE,EAAEO,IAAI,CACzBE,SAAS,IAAMA,SAAS,KAAKH,MAChC,CAAC,EACA;QACDI,aAAa,CAAEN,UAAU,EAAEJ,QAAQ,EAAEH,UAAW,CAAC;QACjDG,QAAQ,EAAE;MACX;IACD;EACD,CAAC,MAAM;IACN,KAAM,IAAIW,CAAC,GAAGb,UAAU,EAAEa,CAAC,GAAGX,QAAQ,EAAEW,CAAC,EAAE,EAAG;MAC7C,IAAKP,UAAU,CAAEO,CAAC,CAAE,EAAG;QACtBD,aAAa,CAAEN,UAAU,EAAEO,CAAC,EAAEd,UAAW,CAAC;MAC3C;IACD;EACD;EAEA,OAAO,IAAAe,kCAAgB,EAAE;IACxB,GAAGhB,KAAK;IACRM,OAAO,EAAEE,UAAU;IACnBD,aAAa,EACZA,aAAa,EAAEU,MAAM,CAAE,CAAE;MAAEL;IAAK,CAAC,KAAMA,IAAI,KAAKX,UAAW,CAAC,IAAI;EAClE,CAAE,CAAC;AACJ;AAEA,SAASa,aAAaA,CAAER,OAAO,EAAEY,KAAK,EAAEjB,UAAU,EAAG;EACpD,MAAMO,UAAU,GAAGF,OAAO,CAAEY,KAAK,CAAE,CAACD,MAAM,CACzC,CAAE;IAAEL;EAAK,CAAC,KAAMA,IAAI,KAAKX,UAC1B,CAAC;EAED,IAAKO,UAAU,CAACW,MAAM,EAAG;IACxBb,OAAO,CAAEY,KAAK,CAAE,GAAGV,UAAU;EAC9B,CAAC,MAAM;IACN,OAAOF,OAAO,CAAEY,KAAK,CAAE;EACxB;AACD"}