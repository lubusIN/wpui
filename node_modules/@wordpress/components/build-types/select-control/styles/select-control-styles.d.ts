/// <reference types="react" />
import type { SelectControlProps } from '../types';
interface SelectProps extends Pick<SelectControlProps, '__next36pxDefaultSize' | 'disabled' | 'multiple'> {
    selectSize?: SelectControlProps['size'];
}
export declare const chevronIconSize = 18;
export declare const Select: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
} & SelectProps, import("react").DetailedHTMLProps<import("react").SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>, {}>;
export declare const DownArrowWrapper: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
}, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
export declare const InputControlSuffixWrapperWithClickThrough: import("@emotion/styled").StyledComponent<import("../../input-control/types").InputControlSuffixWrapperProps & import("react").RefAttributes<any> & Omit<Pick<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof import("react").HTMLAttributes<HTMLDivElement>>, "children" | "as" | keyof import("react").RefAttributes<any>> & {
    as?: keyof JSX.IntrinsicElements | undefined;
} & {
    theme?: import("@emotion/react").Theme | undefined;
}, {}, {}>;
export {};
//# sourceMappingURL=select-control-styles.d.ts.map