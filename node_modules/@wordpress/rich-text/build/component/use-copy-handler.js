"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCopyHandler = useCopyHandler;
var _element = require("@wordpress/element");
var _compose = require("@wordpress/compose");
var _toHtmlString = require("../to-html-string");
var _isCollapsed = require("../is-collapsed");
var _slice = require("../slice");
var _getTextContent = require("../get-text-content");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function useCopyHandler(props) {
  const propsRef = (0, _element.useRef)(props);
  propsRef.current = props;
  return (0, _compose.useRefEffect)(element => {
    function onCopy(event) {
      const {
        record,
        preserveWhiteSpace
      } = propsRef.current;
      const {
        ownerDocument
      } = element;
      if ((0, _isCollapsed.isCollapsed)(record.current) || !element.contains(ownerDocument.activeElement)) {
        return;
      }
      const selectedRecord = (0, _slice.slice)(record.current);
      const plainText = (0, _getTextContent.getTextContent)(selectedRecord);
      const html = (0, _toHtmlString.toHTMLString)({
        value: selectedRecord,
        preserveWhiteSpace
      });
      event.clipboardData.setData('text/plain', plainText);
      event.clipboardData.setData('text/html', html);
      event.clipboardData.setData('rich-text', 'true');
      event.preventDefault();
      if (event.type === 'cut') {
        ownerDocument.execCommand('delete');
      }
    }
    element.addEventListener('copy', onCopy);
    element.addEventListener('cut', onCopy);
    return () => {
      element.removeEventListener('copy', onCopy);
      element.removeEventListener('cut', onCopy);
    };
  }, []);
}
//# sourceMappingURL=use-copy-handler.js.map