{"version":3,"names":["useInstanceId","forwardRef","useMemo","View","useControlledValue","ToggleGroupControlContext","useComputeControlledOrUncontrolledValue","UnforwardedToggleGroupControlAsButtonGroup","children","isAdaptiveWidth","label","onChange","size","value","valueProp","id","idProp","otherProps","forwardedRef","generatedId","ToggleGroupControlAsButtonGroup","baseId","defaultValue","selectedValue","setSelectedValue","groupContextValue","setValue","isBlock","isDeselectable","createElement","Provider","ref","role"],"sources":["@wordpress/components/src/toggle-group-control/toggle-group-control/as-button-group.tsx"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useInstanceId } from '@wordpress/compose';\nimport { forwardRef, useMemo } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport { View } from '../../view';\nimport { useControlledValue } from '../../utils';\nimport type { WordPressComponentProps } from '../../ui/context';\nimport ToggleGroupControlContext from '../context';\nimport { useComputeControlledOrUncontrolledValue } from './utils';\nimport type {\n\tToggleGroupControlMainControlProps,\n\tToggleGroupControlContextProps,\n} from '../types';\n\nfunction UnforwardedToggleGroupControlAsButtonGroup(\n\t{\n\t\tchildren,\n\t\tisAdaptiveWidth,\n\t\tlabel,\n\t\tonChange,\n\t\tsize,\n\t\tvalue: valueProp,\n\t\tid: idProp,\n\t\t...otherProps\n\t}: WordPressComponentProps<\n\t\tToggleGroupControlMainControlProps,\n\t\t'div',\n\t\tfalse\n\t>,\n\tforwardedRef: React.ForwardedRef< HTMLDivElement >\n) {\n\tconst generatedId = useInstanceId(\n\t\tToggleGroupControlAsButtonGroup,\n\t\t'toggle-group-control-as-button-group'\n\t);\n\tconst baseId = idProp || generatedId;\n\n\t// Use a heuristic to understand if the component is being used in controlled\n\t// or uncontrolled mode, and consequently:\n\t// - when controlled, convert `undefined` values to `''` (ie. \"no value\")\n\t// - use the `value` prop as the `defaultValue` when uncontrolled\n\tconst { value, defaultValue } =\n\t\tuseComputeControlledOrUncontrolledValue( valueProp );\n\n\tconst [ selectedValue, setSelectedValue ] = useControlledValue( {\n\t\tdefaultValue,\n\t\tvalue,\n\t\tonChange,\n\t} );\n\n\tconst groupContextValue = useMemo(\n\t\t() =>\n\t\t\t( {\n\t\t\t\tbaseId,\n\t\t\t\tvalue: selectedValue,\n\t\t\t\tsetValue: setSelectedValue,\n\t\t\t\tisBlock: ! isAdaptiveWidth,\n\t\t\t\tisDeselectable: true,\n\t\t\t\tsize,\n\t\t\t} ) as ToggleGroupControlContextProps,\n\t\t[ baseId, selectedValue, setSelectedValue, isAdaptiveWidth, size ]\n\t);\n\n\treturn (\n\t\t<ToggleGroupControlContext.Provider value={ groupContextValue }>\n\t\t\t<View\n\t\t\t\taria-label={ label }\n\t\t\t\t{ ...otherProps }\n\t\t\t\tref={ forwardedRef }\n\t\t\t\trole=\"group\"\n\t\t\t>\n\t\t\t\t{ children }\n\t\t\t</View>\n\t\t</ToggleGroupControlContext.Provider>\n\t);\n}\n\nexport const ToggleGroupControlAsButtonGroup = forwardRef(\n\tUnforwardedToggleGroupControlAsButtonGroup\n);\n"],"mappings":";AAAA;AACA;AACA;AACA,SAASA,aAAa,QAAQ,oBAAoB;AAClD,SAASC,UAAU,EAAEC,OAAO,QAAQ,oBAAoB;;AAExD;AACA;AACA;AACA,SAASC,IAAI,QAAQ,YAAY;AACjC,SAASC,kBAAkB,QAAQ,aAAa;AAEhD,OAAOC,yBAAyB,MAAM,YAAY;AAClD,SAASC,uCAAuC,QAAQ,SAAS;AAMjE,SAASC,0CAA0CA,CAClD;EACCC,QAAQ;EACRC,eAAe;EACfC,KAAK;EACLC,QAAQ;EACRC,IAAI;EACJC,KAAK,EAAEC,SAAS;EAChBC,EAAE,EAAEC,MAAM;EACV,GAAGC;AAKJ,CAAC,EACDC,YAAkD,EACjD;EACD,MAAMC,WAAW,GAAGnB,aAAa,CAChCoB,+BAA+B,EAC/B,sCACD,CAAC;EACD,MAAMC,MAAM,GAAGL,MAAM,IAAIG,WAAW;;EAEpC;EACA;EACA;EACA;EACA,MAAM;IAAEN,KAAK;IAAES;EAAa,CAAC,GAC5BhB,uCAAuC,CAAEQ,SAAU,CAAC;EAErD,MAAM,CAAES,aAAa,EAAEC,gBAAgB,CAAE,GAAGpB,kBAAkB,CAAE;IAC/DkB,YAAY;IACZT,KAAK;IACLF;EACD,CAAE,CAAC;EAEH,MAAMc,iBAAiB,GAAGvB,OAAO,CAChC,OACG;IACDmB,MAAM;IACNR,KAAK,EAAEU,aAAa;IACpBG,QAAQ,EAAEF,gBAAgB;IAC1BG,OAAO,EAAE,CAAElB,eAAe;IAC1BmB,cAAc,EAAE,IAAI;IACpBhB;EACD,CAAC,CAAoC,EACtC,CAAES,MAAM,EAAEE,aAAa,EAAEC,gBAAgB,EAAEf,eAAe,EAAEG,IAAI,CACjE,CAAC;EAED,OACCiB,aAAA,CAACxB,yBAAyB,CAACyB,QAAQ;IAACjB,KAAK,EAAGY;EAAmB,GAC9DI,aAAA,CAAC1B,IAAI;IACJ,cAAaO,KAAO;IAAA,GACfO,UAAU;IACfc,GAAG,EAAGb,YAAc;IACpBc,IAAI,EAAC;EAAO,GAEVxB,QACG,CAC6B,CAAC;AAEvC;AAEA,OAAO,MAAMY,+BAA+B,GAAGnB,UAAU,CACxDM,0CACD,CAAC"}