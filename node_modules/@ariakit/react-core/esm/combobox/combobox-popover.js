import {
  useComboboxList
} from "../__chunks/P634EF77.js";
import "../__chunks/5VGBBGF5.js";
import {
  usePopover
} from "../__chunks/K5MSER23.js";
import "../__chunks/SZIMOWLA.js";
import "../__chunks/5IZLNERH.js";
import "../__chunks/NHPU54IO.js";
import "../__chunks/GDORSOK6.js";
import "../__chunks/3LAWLNOX.js";
import "../__chunks/CJI67A3R.js";
import "../__chunks/PLOINBVB.js";
import "../__chunks/E5XSMSHD.js";
import "../__chunks/LEBYH5FW.js";
import "../__chunks/IXXFVVA2.js";
import "../__chunks/7JNF6I52.js";
import "../__chunks/KOVUJERF.js";
import "../__chunks/62DFK33R.js";
import "../__chunks/FW6QFGFT.js";
import "../__chunks/IYNN2ZO5.js";
import "../__chunks/5M4ITSXL.js";
import "../__chunks/6OMX4H3W.js";
import "../__chunks/LL3AE4N4.js";
import "../__chunks/EJ3GIT5B.js";
import "../__chunks/LDDPB3PY.js";
import "../__chunks/COQHFAEN.js";
import "../__chunks/LNHZLQEK.js";
import "../__chunks/M5I7AM4N.js";
import "../__chunks/WHEEIXMF.js";
import "../__chunks/6GS36SYX.js";
import "../__chunks/MYID4V27.js";
import "../__chunks/BMLNRUFQ.js";
import "../__chunks/FL2AU7YJ.js";
import {
  createComponent,
  createElement,
  createHook
} from "../__chunks/NQJBHION.js";
import "../__chunks/SWJ5EOOS.js";
import "../__chunks/P63NRZ4A.js";
import "../__chunks/J7Q2EO23.js";
import "../__chunks/CP3U4HPL.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "../__chunks/PNRLI7OV.js";

// src/combobox/combobox-popover.ts
import { matches } from "@ariakit/core/utils/dom";
function isController(target, ...ids) {
  if (!target)
    return false;
  if ("id" in target) {
    const selector = ids.filter(Boolean).map((id) => `[aria-controls="${id}"]`).join(", ");
    if (!selector)
      return false;
    return matches(target, selector);
  }
  return false;
}
var useComboboxPopover = createHook(
  (_a) => {
    var _b = _a, {
      store,
      tabIndex,
      alwaysVisible,
      hideOnInteractOutside = true
    } = _b, props = __objRest(_b, [
      "store",
      "tabIndex",
      "alwaysVisible",
      "hideOnInteractOutside"
    ]);
    const baseElement = store.useState("baseElement");
    props = useComboboxList(__spreadValues({ store, alwaysVisible }, props));
    props = usePopover(__spreadProps(__spreadValues({
      store,
      alwaysVisible,
      autoFocusOnShow: false,
      autoFocusOnHide: false,
      finalFocus: baseElement
    }, props), {
      // Combobox popovers can't be modal because the focus may be (and is by
      // default) outside of it on the combobox input element.
      modal: false,
      // Make sure we don't hide the popover when the user interacts with the
      // combobox cancel or the combobox disclosure buttons. They will have the
      // aria-controls attribute pointing to either the combobox input or the
      // combobox popover elements.
      hideOnInteractOutside: (event) => {
        const { contentElement, baseElement: baseElement2 } = store.getState();
        const contentId = contentElement == null ? void 0 : contentElement.id;
        const baseId = baseElement2 == null ? void 0 : baseElement2.id;
        if (isController(event.target, contentId, baseId))
          return false;
        const result = typeof hideOnInteractOutside === "function" ? hideOnInteractOutside(event) : hideOnInteractOutside;
        return result;
      }
    }));
    return props;
  }
);
var ComboboxPopover = createComponent(
  (props) => {
    const htmlProps = useComboboxPopover(props);
    return createElement("div", htmlProps);
  }
);
if (process.env.NODE_ENV !== "production") {
  ComboboxPopover.displayName = "ComboboxPopover";
}
export {
  ComboboxPopover,
  useComboboxPopover
};
