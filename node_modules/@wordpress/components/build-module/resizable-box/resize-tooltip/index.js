import { createElement } from "@wordpress/element";
/**
 * External dependencies
 */
import classnames from 'classnames';
/**
 * WordPress dependencies
 */
import { forwardRef } from '@wordpress/element';

/**
 * Internal dependencies
 */
import Label from './label';
import { useResizeLabel, POSITIONS } from './utils';
import { Root } from './styles/resize-tooltip.styles';
const noop = () => {};
function ResizeTooltip({
  axis,
  className,
  fadeTimeout = 180,
  isVisible = true,
  labelRef,
  onResize = noop,
  position = POSITIONS.bottom,
  showPx = true,
  zIndex = 1000,
  ...props
}, ref) {
  const {
    label,
    resizeListener
  } = useResizeLabel({
    axis,
    fadeTimeout,
    onResize,
    showPx,
    position
  });
  if (!isVisible) return null;
  const classes = classnames('components-resize-tooltip', className);
  return createElement(Root, {
    "aria-hidden": "true",
    className: classes,
    ref: ref,
    ...props
  }, resizeListener, createElement(Label, {
    "aria-hidden": props['aria-hidden'],
    label: label,
    position: position,
    ref: labelRef,
    zIndex: zIndex
  }));
}
const ForwardedComponent = forwardRef(ResizeTooltip);
export default ForwardedComponent;
//# sourceMappingURL=index.js.map