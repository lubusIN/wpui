import {
  useDialogDisclosure
} from "../__chunks/5I6BQS7D.js";
import "../__chunks/LDJKN2ZV.js";
import "../__chunks/O6CV6VRM.js";
import "../__chunks/P4RGQGTG.js";
import "../__chunks/MYID4V27.js";
import "../__chunks/BMLNRUFQ.js";
import {
  useVisuallyHidden
} from "../__chunks/FL2AU7YJ.js";
import {
  createComponent,
  createElement,
  createHook
} from "../__chunks/NQJBHION.js";
import {
  useEvent,
  useMergeRefs
} from "../__chunks/J7Q2EO23.js";
import "../__chunks/CP3U4HPL.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "../__chunks/PNRLI7OV.js";

// src/hovercard/hovercard-disclosure.tsx
import { useEffect, useState } from "react";
import { contains } from "@ariakit/core/utils/dom";
import { addGlobalEventListener } from "@ariakit/core/utils/events";
import { sync } from "@ariakit/core/utils/store";
import { jsx } from "react/jsx-runtime";
var useHovercardDisclosure = createHook(
  (_a) => {
    var _b = _a, { store } = _b, props = __objRest(_b, ["store"]);
    const [visible, setVisible] = useState(false);
    useEffect(() => {
      if (!visible)
        return;
      const onBlur = (event) => {
        const nextActiveElement = event.relatedTarget;
        if (nextActiveElement) {
          const {
            anchorElement: anchor,
            popoverElement: popover,
            disclosureElement: disclosure
          } = store.getState();
          if (anchor && contains(anchor, nextActiveElement))
            return;
          if (popover && contains(popover, nextActiveElement))
            return;
          if (disclosure && contains(disclosure, nextActiveElement))
            return;
          if (nextActiveElement.hasAttribute("data-focus-trap"))
            return;
        }
        setVisible(false);
      };
      return addGlobalEventListener("focusout", onBlur, true);
    }, [visible, store]);
    useEffect(() => {
      return sync(store, ["anchorElement"], (state) => {
        const anchor = state.anchorElement;
        if (!anchor)
          return;
        const observer = new MutationObserver(() => {
          if (!anchor.hasAttribute("data-focus-visible"))
            return;
          setVisible(true);
        });
        observer.observe(anchor, { attributeFilter: ["data-focus-visible"] });
        return () => observer.disconnect();
      });
    }, [store]);
    const onClickProp = props.onClick;
    const onClick = useEvent((event) => {
      onClickProp == null ? void 0 : onClickProp(event);
      if (event.defaultPrevented)
        return;
      store.setAutoFocusOnShow(true);
    });
    const onFocusProp = props.onFocus;
    const onFocus = useEvent((event) => {
      onFocusProp == null ? void 0 : onFocusProp(event);
      if (event.defaultPrevented)
        return;
      setVisible(true);
    });
    const { style } = useVisuallyHidden();
    if (!visible) {
      props = __spreadProps(__spreadValues({}, props), {
        style: __spreadValues(__spreadValues({}, style), props.style)
      });
    }
    const children = /* @__PURE__ */ jsx(
      "svg",
      {
        display: "block",
        fill: "none",
        stroke: "currentColor",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "1.5pt",
        viewBox: "0 0 16 16",
        height: "1em",
        width: "1em",
        children: /* @__PURE__ */ jsx("polyline", { points: "4,6 8,10 12,6" })
      }
    );
    props = __spreadProps(__spreadValues({
      children
    }, props), {
      ref: useMergeRefs(store.setDisclosureElement, props.ref),
      onClick,
      onFocus
    });
    props = useDialogDisclosure(__spreadValues({ store }, props));
    return props;
  }
);
var HovercardDisclosure = createComponent(
  (props) => {
    const htmlProps = useHovercardDisclosure(props);
    return createElement("button", htmlProps);
  }
);
if (process.env.NODE_ENV !== "production") {
  HovercardDisclosure.displayName = "HovercardDisclosure";
}
export {
  HovercardDisclosure,
  useHovercardDisclosure
};
