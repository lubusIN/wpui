import type { FocusableOptions } from "../focusable/focusable.js";
import type { As, Props } from "../utils/types.js";
import type { FormFieldOptions } from "./form-field.js";
/**
 * Returns props to create a `FormInput` component. Unlike `useFormField`, this
 * hook returns the `value` and `onChange` props that can be passed to a native
 * input, select or textarea elements.
 * @see https://ariakit.org/components/form
 * @example
 * ```jsx
 * const store = useFormStore({ defaultValues: { email: "" } });
 * const props = useFormInput({ store, name: store.names.email });
 * <Form store={store}>
 *   <FormLabel name={store.names.email}>Email</FormLabel>
 *   <Role {...props} render={<input />} />
 * </Form>
 * ```
 */
export declare const useFormInput: import("../utils/types.js").Hook<FormInputOptions<"input">>;
/**
 * Renders a form input. Unlike `FormField`, this component passes the `value`
 * and `onChange` props down to the underlying element that can be a native
 * input, select or textarea elements.
 * @see https://ariakit.org/components/form
 * @example
 * ```jsx
 * const form = useFormStore({ defaultValues: { email: "" } });
 * <Form store={form}>
 *   <FormLabel name={form.names.email}>Email</FormLabel>
 *   <FormInput name={form.names.email} />
 * </Form>
 * ```
 */
export declare const FormInput: import("../utils/types.js").Component<FormInputOptions<"input">>;
export interface FormInputOptions<T extends As = "input"> extends FormFieldOptions<T>, FocusableOptions<T> {
}
export type FormInputProps<T extends As = "input"> = Props<FormInputOptions<T>>;
