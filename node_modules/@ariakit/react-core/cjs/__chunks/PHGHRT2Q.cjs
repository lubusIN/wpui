"use strict";Object.defineProperty(exports, "__esModule", {value: true});

var _NXDHPYNQcjs = require('./NXDHPYNQ.cjs');




var _CWY2PHPRcjs = require('./CWY2PHPR.cjs');




var _5WLTMVVQcjs = require('./5WLTMVVQ.cjs');




var _72I2GWXFcjs = require('./72I2GWXF.cjs');

// src/disclosure/disclosure.ts
var _react = require('react');
var useDisclosure = _CWY2PHPRcjs.createHook.call(void 0, 
  (_a) => {
    var _b = _a, { store, toggleOnClick = true } = _b, props = _72I2GWXFcjs.__objRest.call(void 0, _b, ["store", "toggleOnClick"]);
    const ref = _react.useRef.call(void 0, null);
    const [expanded, setExpanded] = _react.useState.call(void 0, false);
    const disclosureElement = store.useState("disclosureElement");
    const open = store.useState("open");
    _react.useEffect.call(void 0, () => {
      let isCurrentDisclosure = disclosureElement === ref.current;
      if (!disclosureElement || !disclosureElement.isConnected) {
        store.setDisclosureElement(ref.current);
        isCurrentDisclosure = true;
      }
      setExpanded(open && isCurrentDisclosure);
    }, [disclosureElement, open]);
    const onMouseDownProp = props.onMouseDown;
    const onMouseDown = _5WLTMVVQcjs.useEvent.call(void 0, (event) => {
      store.setDisclosureElement(event.currentTarget);
      onMouseDownProp == null ? void 0 : onMouseDownProp(event);
    });
    const onClickProp = props.onClick;
    const toggleOnClickProp = _5WLTMVVQcjs.useBooleanEvent.call(void 0, toggleOnClick);
    const isDuplicate = "data-disclosure" in props;
    const onClick = _5WLTMVVQcjs.useEvent.call(void 0, (event) => {
      store.setDisclosureElement(event.currentTarget);
      onClickProp == null ? void 0 : onClickProp(event);
      if (event.defaultPrevented)
        return;
      if (isDuplicate)
        return;
      if (!toggleOnClickProp(event))
        return;
      store.toggle();
    });
    const contentElement = store.useState("contentElement");
    props = _72I2GWXFcjs.__spreadProps.call(void 0, _72I2GWXFcjs.__spreadValues.call(void 0, {
      "data-disclosure": "",
      "aria-expanded": expanded,
      "aria-controls": contentElement == null ? void 0 : contentElement.id
    }, props), {
      ref: _5WLTMVVQcjs.useMergeRefs.call(void 0, ref, props.ref),
      onMouseDown,
      onClick
    });
    props = _NXDHPYNQcjs.useButton.call(void 0, props);
    return props;
  }
);
var Disclosure = _CWY2PHPRcjs.createComponent.call(void 0, (props) => {
  const htmlProps = useDisclosure(props);
  return _CWY2PHPRcjs.createElement.call(void 0, "button", htmlProps);
});
if (process.env.NODE_ENV !== "production") {
  Disclosure.displayName = "Disclosure";
}




exports.useDisclosure = useDisclosure; exports.Disclosure = Disclosure;
