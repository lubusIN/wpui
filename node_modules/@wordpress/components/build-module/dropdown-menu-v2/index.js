import { createElement, Fragment } from "@wordpress/element";
/**
 * External dependencies
 */
import * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu';

/**
 * WordPress dependencies
 */
import { forwardRef, createContext, useContext, useMemo } from '@wordpress/element';
import { isRTL } from '@wordpress/i18n';
import { check, chevronRightSmall, lineSolid } from '@wordpress/icons';
import { SVG, Circle } from '@wordpress/primitives';

/**
 * Internal dependencies
 */
import { useContextSystem, contextConnectWithoutRef } from '../ui/context';
import { useSlot } from '../slot-fill';
import Icon from '../icon';
import { SLOT_NAME as POPOVER_DEFAULT_SLOT_NAME } from '../popover';
import * as DropdownMenuStyled from './styles';
// Menu content's side padding + 4px
const SUB_MENU_OFFSET_SIDE = 16;
// Opposite amount of the top padding of the menu item
const SUB_MENU_OFFSET_ALIGN = -8;
const DropdownMenuPrivateContext = createContext({
  variant: undefined,
  portalContainer: null
});
const UnconnectedDropdownMenu = props => {
  const {
    // Root props
    defaultOpen,
    open,
    onOpenChange,
    modal = true,
    // Content positioning props
    side = 'bottom',
    sideOffset = 0,
    align = 'center',
    alignOffset = 0,
    // Render props
    children,
    trigger,
    // From internal components context
    variant
  } = useContextSystem(props, 'DropdownMenu');

  // Render the portal in the default slot used by the legacy Popover component.
  const slot = useSlot(POPOVER_DEFAULT_SLOT_NAME);
  const portalContainer = slot.ref?.current;
  const privateContextValue = useMemo(() => ({
    variant,
    portalContainer
  }), [variant, portalContainer]);
  return createElement(DropdownMenuPrimitive.Root, {
    defaultOpen: defaultOpen,
    open: open,
    onOpenChange: onOpenChange,
    modal: modal,
    dir: isRTL() ? 'rtl' : 'ltr'
  }, createElement(DropdownMenuPrimitive.Trigger, {
    asChild: true
  }, trigger), createElement(DropdownMenuPrimitive.Portal, {
    container: portalContainer
  }, createElement(DropdownMenuStyled.Content, {
    side: side,
    align: align,
    sideOffset: sideOffset,
    alignOffset: alignOffset,
    loop: true,
    variant: variant
  }, createElement(DropdownMenuPrivateContext.Provider, {
    value: privateContextValue
  }, children))));
};

/**
 * `DropdownMenu` displays a menu to the user (such as a set of actions
 * or functions) triggered by a button.
 */
export const DropdownMenu = contextConnectWithoutRef(UnconnectedDropdownMenu, 'DropdownMenu');
export const DropdownSubMenuTrigger = ({
  prefix,
  suffix = createElement(DropdownMenuStyled.SubmenuRtlChevronIcon, {
    icon: chevronRightSmall,
    size: 24
  }),
  children
}) => {
  return createElement(Fragment, null, prefix && createElement(DropdownMenuStyled.ItemPrefixWrapper, null, prefix), children, suffix && createElement(DropdownMenuStyled.ItemSuffixWrapper, null, suffix));
};
export const DropdownSubMenu = ({
  // Sub props
  defaultOpen,
  open,
  onOpenChange,
  // Sub trigger props
  disabled,
  textValue,
  // Render props
  children,
  trigger
}) => {
  const {
    variant,
    portalContainer
  } = useContext(DropdownMenuPrivateContext);
  return createElement(DropdownMenuPrimitive.Sub, {
    defaultOpen: defaultOpen,
    open: open,
    onOpenChange: onOpenChange
  }, createElement(DropdownMenuStyled.SubTrigger, {
    disabled: disabled,
    textValue: textValue
  }, trigger), createElement(DropdownMenuPrimitive.Portal, {
    container: portalContainer
  }, createElement(DropdownMenuStyled.SubContent, {
    loop: true,
    sideOffset: SUB_MENU_OFFSET_SIDE,
    alignOffset: SUB_MENU_OFFSET_ALIGN,
    variant: variant
  }, children)));
};
export const DropdownMenuLabel = props => createElement(DropdownMenuStyled.Label, {
  ...props
});
export const DropdownMenuGroup = props => createElement(DropdownMenuPrimitive.Group, {
  ...props
});
export const DropdownMenuItem = forwardRef(({
  children,
  prefix,
  suffix,
  ...props
}, forwardedRef) => {
  return createElement(DropdownMenuStyled.Item, {
    ...props,
    ref: forwardedRef
  }, prefix && createElement(DropdownMenuStyled.ItemPrefixWrapper, null, prefix), children, suffix && createElement(DropdownMenuStyled.ItemSuffixWrapper, null, suffix));
});
export const DropdownMenuCheckboxItem = ({
  children,
  checked = false,
  suffix,
  ...props
}) => {
  return createElement(DropdownMenuStyled.CheckboxItem, {
    ...props,
    checked: checked
  }, createElement(DropdownMenuStyled.ItemPrefixWrapper, null, createElement(DropdownMenuStyled.ItemIndicator, null, (checked === 'indeterminate' || checked === true) && createElement(Icon, {
    icon: checked === 'indeterminate' ? lineSolid : check,
    size: 24
  }))), children, suffix && createElement(DropdownMenuStyled.ItemSuffixWrapper, null, suffix));
};
export const DropdownMenuRadioGroup = props => createElement(DropdownMenuPrimitive.RadioGroup, {
  ...props
});
const radioDot = createElement(SVG, {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, createElement(Circle, {
  cx: 12,
  cy: 12,
  r: 3,
  fill: "currentColor"
}));
export const DropdownMenuRadioItem = ({
  children,
  suffix,
  ...props
}) => {
  return createElement(DropdownMenuStyled.RadioItem, {
    ...props
  }, createElement(DropdownMenuStyled.ItemPrefixWrapper, null, createElement(DropdownMenuStyled.ItemIndicator, null, createElement(Icon, {
    icon: radioDot,
    size: 22
  }))), children, suffix && createElement(DropdownMenuStyled.ItemSuffixWrapper, null, suffix));
};
export const DropdownMenuSeparator = props => {
  const {
    variant
  } = useContext(DropdownMenuPrivateContext);
  return createElement(DropdownMenuStyled.Separator, {
    ...props,
    variant: variant
  });
};
//# sourceMappingURL=index.js.map