import {
  TabContext
} from "../__chunks/UZKBEGMB.js";
import {
  useCompositeItem
} from "../__chunks/FVD2NJZN.js";
import "../__chunks/P4RGQGTG.js";
import "../__chunks/VFNGSUSF.js";
import "../__chunks/T3DJZG63.js";
import "../__chunks/OXPV2NBK.js";
import "../__chunks/WJ37OVG2.js";
import "../__chunks/MYID4V27.js";
import "../__chunks/BMLNRUFQ.js";
import {
  createElement,
  createHook,
  createMemoComponent
} from "../__chunks/NQJBHION.js";
import "../__chunks/P63NRZ4A.js";
import {
  useEvent,
  useId
} from "../__chunks/J7Q2EO23.js";
import "../__chunks/CP3U4HPL.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "../__chunks/PNRLI7OV.js";

// src/tab/tab.ts
import { useCallback, useContext } from "react";
import { invariant } from "@ariakit/core/utils/misc";
var useTab = createHook(
  (_a) => {
    var _b = _a, {
      store,
      accessibleWhenDisabled = true,
      getItem: getItemProp
    } = _b, props = __objRest(_b, [
      "store",
      "accessibleWhenDisabled",
      "getItem"
    ]);
    const context = useContext(TabContext);
    store = store || context;
    invariant(
      store,
      process.env.NODE_ENV !== "production" && "Tab must be wrapped in a TabList component"
    );
    const defaultId = useId();
    const id = props.id || defaultId;
    const dimmed = props.disabled;
    const getItem = useCallback(
      (item) => {
        const nextItem = __spreadProps(__spreadValues({}, item), { dimmed });
        if (getItemProp) {
          return getItemProp(nextItem);
        }
        return nextItem;
      },
      [dimmed, getItemProp]
    );
    const onClickProp = props.onClick;
    const onClick = useEvent((event) => {
      onClickProp == null ? void 0 : onClickProp(event);
      if (event.defaultPrevented)
        return;
      store == null ? void 0 : store.setSelectedId(id);
    });
    const panelId = store.panels.useState(
      (state) => {
        var _a2;
        return (_a2 = state.items.find((item) => item.tabId === id)) == null ? void 0 : _a2.id;
      }
    );
    const selected = store.useState((state) => !!id && state.selectedId === id);
    props = __spreadProps(__spreadValues({
      id,
      role: "tab",
      "aria-selected": selected,
      "aria-controls": panelId || void 0
    }, props), {
      onClick
    });
    props = useCompositeItem(__spreadProps(__spreadValues({
      store
    }, props), {
      accessibleWhenDisabled,
      getItem,
      shouldRegisterItem: !!defaultId ? props.shouldRegisterItem : false
    }));
    return props;
  }
);
var Tab = createMemoComponent((props) => {
  const htmlProps = useTab(props);
  return createElement("button", htmlProps);
});
if (process.env.NODE_ENV !== "production") {
  Tab.displayName = "Tab";
}
export {
  Tab,
  useTab
};
