"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _element = require("@wordpress/element");
var _reakit = require("reakit");
var _context = require("../context");
var _view = require("../../view");
var _context2 = require("./context");
var styles = _interopRequireWildcard(require("./styles"));
var _useCx = require("../../utils/hooks/use-cx");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/**
 * External dependencies
 */
// eslint-disable-next-line no-restricted-imports

/**
 * Internal dependencies
 */

const {
  TooltipPopoverView
} = styles;

/**
 *
 * @param {import('../context').WordPressComponentProps<import('./types').ContentProps, 'div'>} props
 * @param {import('react').ForwardedRef<any>}                                                   forwardedRef
 */
function TooltipContent(props, forwardedRef) {
  const {
    children,
    className,
    ...otherProps
  } = (0, _context.useContextSystem)(props, 'TooltipContent');
  const {
    tooltip
  } = (0, _context2.useTooltipContext)();
  const cx = (0, _useCx.useCx)();
  const classes = cx(styles.TooltipContent, className);
  return (0, _element.createElement)(_reakit.Tooltip, {
    as: _view.View,
    ...otherProps,
    ...tooltip,
    className: classes,
    ref: forwardedRef
  }, (0, _element.createElement)(TooltipPopoverView, null, children));
}
var _default = (0, _context.contextConnect)(TooltipContent, 'TooltipContent');
exports.default = _default;
//# sourceMappingURL=content.js.map