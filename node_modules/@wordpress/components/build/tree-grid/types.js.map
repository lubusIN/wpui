{"version":3,"names":[],"sources":["@wordpress/components/src/tree-grid/types.ts"],"sourcesContent":["export type TreeGridRowProps = {\n\t/**\n\t * The children to be rendered in the row.\n\t */\n\tchildren: React.ReactNode;\n\t/**\n\t * An integer value designating the level in the hierarchical tree structure.\n\t * Counting starts at 1. A value of `1` indicates the root level of the structure.\n\t */\n\tlevel: NonNullable< React.AriaAttributes[ 'aria-level' ] >;\n\t/**\n\t * An integer value that represents the position in the set.\n\t * A set is the count of elements at a specific level. Counting starts at 1.\n\t */\n\tpositionInSet: NonNullable< React.AriaAttributes[ 'aria-posinset' ] >;\n\t/**\n\t * An integer value that represents the total number of items in the set,\n\t * at this specific level of the hierarchy.\n\t */\n\tsetSize: NonNullable< React.AriaAttributes[ 'aria-setsize' ] >;\n\t/**\n\t * An optional value that designates whether a row is expanded or collapsed.\n\t * Currently this value only sets the correct aria-expanded property on a row,\n\t * it has no other built-in behavior.\n\t *\n\t * If there is a need to implement `aria-expanded` elsewhere in the row, cell,\n\t * or element within a cell, you may pass `isExpanded={ undefined }`.\n\t * In order for keyboard navigation to continue working, add the\n\t * `data-expanded` attribute with either `true`/`false`. This allows the\n\t * `TreeGrid` component to still manage keyboard interactions while allowing\n\t * the `aria-expanded` attribute to be placed elsewhere.\n\t */\n\tisExpanded?: boolean;\n};\n\ntype RovingTabIndexItemPassThruProps = {\n\tref: React.ForwardedRef< any >;\n\ttabIndex?: number;\n\tonFocus: React.FocusEventHandler< any >;\n\t[ key: string ]: any;\n};\n\nexport type RovingTabIndexItemProps = {\n\t/**\n\t * A render function that receives the props necessary to make it participate in the\n\t * roving tabindex. Any extra props will also be passed through to this function.\n\t *\n\t * Props passed as an argument to the render prop must be passed to the child\n\t * focusable component/element within the cell. If a component is used, it must\n\t * correctly handle the `onFocus`, `tabIndex`, and `ref` props, passing these to the\n\t * element it renders. These props are used to handle the roving tabindex functionality\n\t * of the tree grid.\n\t *\n\t * ```jsx\n\t * <TreeGridCell>\n\t * \t{ ( props ) => (\n\t * \t\t<Button onClick={ doSomething } { ...props }>\n\t * \t\t\tDo something\n\t * \t\t</Button>\n\t * \t) }\n\t * </TreeGridCell>\n\t * ```\n\t */\n\tchildren?: ( props: RovingTabIndexItemPassThruProps ) => JSX.Element;\n\t/**\n\t * If `children` is not a function, this component will be used instead.\n\t */\n\tas?: React.ComponentType< RovingTabIndexItemPassThruProps >;\n\t[ key: string ]: any;\n};\n\nexport type TreeGridCellProps =\n\t| ( {\n\t\t\t/**\n\t\t\t * Render `children` without wrapping it in a `TreeGridItem` component.\n\t\t\t * This means that `children` will not participate in the roving tabindex.\n\t\t\t *\n\t\t\t * @default false\n\t\t\t */\n\t\t\twithoutGridItem?: false;\n\t  } & NonNullable< Pick< RovingTabIndexItemProps, 'children' > > )\n\t| {\n\t\t\tchildren: React.ReactNode;\n\t\t\twithoutGridItem: true;\n\t  };\n\nexport type TreeGridProps = {\n\t/**\n\t * Label to use for the element with the `application` role.\n\t */\n\tapplicationAriaLabel?: string;\n\t/**\n\t * The children to be rendered in the tree grid.\n\t */\n\tchildren: React.ReactNode;\n\t/**\n\t * Callback to fire when row is expanded.\n\t *\n\t * @default noop\n\t */\n\tonExpandRow?: ( row: HTMLElement ) => void;\n\t/**\n\t * Callback to fire when row is collapsed.\n\t *\n\t * @default noop\n\t */\n\tonCollapseRow?: ( row: HTMLElement ) => void;\n\t/**\n\t * Callback that fires when focus is shifted from one row to another via\n\t * the Up and Down keys. Callback is also fired on Home and End keys which\n\t * move focus from the beginning row to the end row.\n\t *\n\t * The callback is passed the event, the start row element that the focus was on\n\t * originally, and the destination row element after the focus has moved.\n\t *\n\t * @default noop\n\t */\n\tonFocusRow?: (\n\t\tevent: React.KeyboardEvent< HTMLTableElement >,\n\t\tstartRow: HTMLElement,\n\t\tdestinationRow: HTMLElement\n\t) => void;\n};\n"],"mappings":""}