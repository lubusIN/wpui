"use strict";Object.defineProperty(exports, "__esModule", {value: true});

var _HTEAWNBYcjs = require('./HTEAWNBY.cjs');


var _X2GXTE3Pcjs = require('./X2GXTE3P.cjs');



var _5WLTMVVQcjs = require('./5WLTMVVQ.cjs');



var _72I2GWXFcjs = require('./72I2GWXF.cjs');

// src/dialog/utils/use-hide-on-interact-outside.ts
var _react = require('react');
var _dom = require('@ariakit/core/utils/dom');
var _events = require('@ariakit/core/utils/events');
function isInDocument(target) {
  if (target.tagName === "HTML")
    return true;
  return _dom.contains.call(void 0, _dom.getDocument.call(void 0, target).body, target);
}
function isDisclosure(disclosure, target) {
  if (!disclosure)
    return false;
  if (_dom.contains.call(void 0, disclosure, target))
    return true;
  const activeId = target.getAttribute("aria-activedescendant");
  if (activeId) {
    const activeElement = _dom.getDocument.call(void 0, disclosure).getElementById(activeId);
    if (activeElement) {
      return _dom.contains.call(void 0, disclosure, activeElement);
    }
  }
  return false;
}
function isMouseEventOnDialog(event, dialog) {
  if (!("clientY" in event))
    return false;
  const rect = dialog.getBoundingClientRect();
  if (rect.width === 0 || rect.height === 0)
    return false;
  return rect.top <= event.clientY && event.clientY <= rect.top + rect.height && rect.left <= event.clientX && event.clientX <= rect.left + rect.width;
}
function useEventOutside({
  store,
  type,
  listener,
  capture,
  domReady
}) {
  const callListener = _5WLTMVVQcjs.useEvent.call(void 0, listener);
  const open = store.useState("open");
  const focusedRef = _react.useRef.call(void 0, false);
  _5WLTMVVQcjs.useSafeLayoutEffect.call(void 0, () => {
    if (!open)
      return;
    if (!domReady)
      return;
    const { contentElement } = store.getState();
    if (!contentElement)
      return;
    const onFocus = () => {
      focusedRef.current = true;
    };
    contentElement.addEventListener("focusin", onFocus, true);
    return () => contentElement.removeEventListener("focusin", onFocus, true);
  }, [store, open, domReady]);
  _react.useEffect.call(void 0, () => {
    if (!open)
      return;
    const onEvent = (event) => {
      const { contentElement, disclosureElement } = store.getState();
      const target = event.target;
      if (!contentElement)
        return;
      if (!target)
        return;
      if (!isInDocument(target))
        return;
      if (_dom.contains.call(void 0, contentElement, target))
        return;
      if (isDisclosure(disclosureElement, target))
        return;
      if (target.hasAttribute("data-focus-trap"))
        return;
      if (isMouseEventOnDialog(event, contentElement))
        return;
      const focused = focusedRef.current;
      if (focused && !_HTEAWNBYcjs.isElementMarked.call(void 0, target, contentElement.id))
        return;
      callListener(event);
    };
    return _events.addGlobalEventListener.call(void 0, type, onEvent, capture);
  }, [open, capture]);
}
function shouldHideOnInteractOutside(hideOnInteractOutside, event) {
  if (typeof hideOnInteractOutside === "function") {
    return hideOnInteractOutside(event);
  }
  return !!hideOnInteractOutside;
}
function useHideOnInteractOutside(store, hideOnInteractOutside, domReady) {
  const open = store.useState("open");
  const previousMouseDownRef = _X2GXTE3Pcjs.usePreviousMouseDownRef.call(void 0, open);
  const props = { store, domReady, capture: true };
  useEventOutside(_72I2GWXFcjs.__spreadProps.call(void 0, _72I2GWXFcjs.__spreadValues.call(void 0, {}, props), {
    type: "click",
    listener: (event) => {
      const { contentElement } = store.getState();
      const previousMouseDown = previousMouseDownRef.current;
      if (!previousMouseDown)
        return;
      if (!_dom.isVisible.call(void 0, previousMouseDown))
        return;
      if (!_HTEAWNBYcjs.isElementMarked.call(void 0, previousMouseDown, contentElement == null ? void 0 : contentElement.id))
        return;
      if (!shouldHideOnInteractOutside(hideOnInteractOutside, event))
        return;
      store.hide();
    }
  }));
  useEventOutside(_72I2GWXFcjs.__spreadProps.call(void 0, _72I2GWXFcjs.__spreadValues.call(void 0, {}, props), {
    type: "focusin",
    listener: (event) => {
      const { contentElement } = store.getState();
      if (!contentElement)
        return;
      if (event.target === _dom.getDocument.call(void 0, contentElement))
        return;
      if (!shouldHideOnInteractOutside(hideOnInteractOutside, event))
        return;
      store.hide();
    }
  }));
  useEventOutside(_72I2GWXFcjs.__spreadProps.call(void 0, _72I2GWXFcjs.__spreadValues.call(void 0, {}, props), {
    type: "contextmenu",
    listener: (event) => {
      if (!shouldHideOnInteractOutside(hideOnInteractOutside, event))
        return;
      store.hide();
    }
  }));
}



exports.useHideOnInteractOutside = useHideOnInteractOutside;
