import _styled from "@emotion/styled/base";
import { createElement } from "@wordpress/element";
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
/**
 * External dependencies
 */

import { css } from '@emotion/react';
import { Flex, FlexItem } from '../../flex';
import { Text } from '../../text';
import { baseLabelTypography, COLORS, CONFIG, rtl } from '../../utils';
import { space } from '../../ui/utils/space';
var _ref2 = process.env.NODE_ENV === "production" ? {
  name: "1739oy8",
  styles: "z-index:1"
} : {
  name: "1x8rmag-rootFocusedStyles",
  styles: "z-index:1;label:rootFocusedStyles;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
const rootFocusedStyles = ({
  isFocused
}) => {
  if (!isFocused) return '';
  return _ref2;
};
export const Root = /*#__PURE__*/_styled(Flex, process.env.NODE_ENV === "production" ? {
  target: "em5sgkm7"
} : {
  target: "em5sgkm7",
  label: "Root"
})("box-sizing:border-box;position:relative;border-radius:2px;padding-top:0;", rootFocusedStyles, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const containerDisabledStyles = ({
  disabled
}) => {
  const backgroundColor = disabled ? COLORS.ui.backgroundDisabled : COLORS.ui.background;
  return /*#__PURE__*/css({
    backgroundColor
  }, process.env.NODE_ENV === "production" ? "" : ";label:containerDisabledStyles;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};
var _ref = process.env.NODE_ENV === "production" ? {
  name: "1d3w5wq",
  styles: "width:100%"
} : {
  name: "uo2pd2-containerWidthStyles",
  styles: "width:100%;label:containerWidthStyles;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
const containerWidthStyles = ({
  __unstableInputWidth,
  labelPosition
}) => {
  if (!__unstableInputWidth) return _ref;
  if (labelPosition === 'side') return '';
  if (labelPosition === 'edge') {
    return /*#__PURE__*/css({
      flex: `0 0 ${__unstableInputWidth}`
    }, process.env.NODE_ENV === "production" ? "" : ";label:containerWidthStyles;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
  }
  return /*#__PURE__*/css({
    width: __unstableInputWidth
  }, process.env.NODE_ENV === "production" ? "" : ";label:containerWidthStyles;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};
export const Container = _styled("div", process.env.NODE_ENV === "production" ? {
  target: "em5sgkm6"
} : {
  target: "em5sgkm6",
  label: "Container"
})("align-items:center;box-sizing:border-box;border-radius:inherit;display:flex;flex:1;position:relative;", containerDisabledStyles, " ", containerWidthStyles, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const disabledStyles = ({
  disabled
}) => {
  if (!disabled) return '';
  return /*#__PURE__*/css({
    color: COLORS.ui.textDisabled
  }, process.env.NODE_ENV === "production" ? "" : ";label:disabledStyles;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};
const fontSizeStyles = ({
  inputSize: size
}) => {
  const sizes = {
    default: '13px',
    small: '11px',
    '__unstable-large': '13px'
  };
  const fontSize = sizes[size] || sizes.default;
  const fontSizeMobile = '16px';
  if (!fontSize) return '';
  return /*#__PURE__*/css("font-size:", fontSizeMobile, ";@media ( min-width: 600px ){font-size:", fontSize, ";}" + (process.env.NODE_ENV === "production" ? "" : ";label:fontSizeStyles;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};
export const getSizeConfig = ({
  inputSize: size,
  __next36pxDefaultSize
}) => {
  // Paddings may be overridden by the custom paddings props.
  const sizes = {
    default: {
      height: 36,
      lineHeight: 1,
      minHeight: 36,
      paddingLeft: space(4),
      paddingRight: space(4)
    },
    small: {
      height: 24,
      lineHeight: 1,
      minHeight: 24,
      paddingLeft: space(2),
      paddingRight: space(2)
    },
    '__unstable-large': {
      height: 40,
      lineHeight: 1,
      minHeight: 40,
      paddingLeft: space(4),
      paddingRight: space(4)
    }
  };
  if (!__next36pxDefaultSize) {
    sizes.default = {
      height: 30,
      lineHeight: 1,
      minHeight: 30,
      paddingLeft: space(2),
      paddingRight: space(2)
    };
  }
  return sizes[size] || sizes.default;
};
const sizeStyles = props => {
  return /*#__PURE__*/css(getSizeConfig(props), process.env.NODE_ENV === "production" ? "" : ";label:sizeStyles;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};
const customPaddings = ({
  paddingInlineStart,
  paddingInlineEnd
}) => {
  return /*#__PURE__*/css({
    paddingInlineStart,
    paddingInlineEnd
  }, process.env.NODE_ENV === "production" ? "" : ";label:customPaddings;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvaW5wdXQtY29udHJvbC9zdHlsZXMvaW5wdXQtY29udHJvbC1zdHlsZXMudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTBLUSIsImZpbGUiOiJAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL2lucHV0LWNvbnRyb2wvc3R5bGVzL2lucHV0LWNvbnRyb2wtc3R5bGVzLnRzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRXh0ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB0eXBlIHsgU2VyaWFsaXplZFN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB0eXBlIHsgQ1NTUHJvcGVydGllcywgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIEludGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgdHlwZSB7IFdvcmRQcmVzc0NvbXBvbmVudFByb3BzIH0gZnJvbSAnLi4vLi4vdWkvY29udGV4dCc7XG5pbXBvcnQgeyBGbGV4LCBGbGV4SXRlbSB9IGZyb20gJy4uLy4uL2ZsZXgnO1xuaW1wb3J0IHsgVGV4dCB9IGZyb20gJy4uLy4uL3RleHQnO1xuaW1wb3J0IHsgYmFzZUxhYmVsVHlwb2dyYXBoeSwgQ09MT1JTLCBDT05GSUcsIHJ0bCB9IGZyb20gJy4uLy4uL3V0aWxzJztcbmltcG9ydCB0eXBlIHsgTGFiZWxQb3NpdGlvbiwgU2l6ZSB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IHNwYWNlIH0gZnJvbSAnLi4vLi4vdWkvdXRpbHMvc3BhY2UnO1xuXG50eXBlIENvbnRhaW5lclByb3BzID0ge1xuXHRkaXNhYmxlZD86IGJvb2xlYW47XG5cdGhpZGVMYWJlbD86IGJvb2xlYW47XG5cdF9fdW5zdGFibGVJbnB1dFdpZHRoPzogQ1NTUHJvcGVydGllc1sgJ3dpZHRoJyBdO1xuXHRsYWJlbFBvc2l0aW9uPzogTGFiZWxQb3NpdGlvbjtcbn07XG5cbnR5cGUgUm9vdFByb3BzID0ge1xuXHRpc0ZvY3VzZWQ/OiBib29sZWFuO1xuXHRsYWJlbFBvc2l0aW9uPzogTGFiZWxQb3NpdGlvbjtcbn07XG5cbmNvbnN0IHJvb3RGb2N1c2VkU3R5bGVzID0gKCB7IGlzRm9jdXNlZCB9OiBSb290UHJvcHMgKSA9PiB7XG5cdGlmICggISBpc0ZvY3VzZWQgKSByZXR1cm4gJyc7XG5cblx0cmV0dXJuIGNzcyggeyB6SW5kZXg6IDEgfSApO1xufTtcblxuZXhwb3J0IGNvbnN0IFJvb3QgPSBzdHlsZWQoIEZsZXggKTwgUm9vdFByb3BzID5gXG5cdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdHBvc2l0aW9uOiByZWxhdGl2ZTtcblx0Ym9yZGVyLXJhZGl1czogMnB4O1xuXHRwYWRkaW5nLXRvcDogMDtcblx0JHsgcm9vdEZvY3VzZWRTdHlsZXMgfVxuYDtcblxuY29uc3QgY29udGFpbmVyRGlzYWJsZWRTdHlsZXMgPSAoIHsgZGlzYWJsZWQgfTogQ29udGFpbmVyUHJvcHMgKSA9PiB7XG5cdGNvbnN0IGJhY2tncm91bmRDb2xvciA9IGRpc2FibGVkXG5cdFx0PyBDT0xPUlMudWkuYmFja2dyb3VuZERpc2FibGVkXG5cdFx0OiBDT0xPUlMudWkuYmFja2dyb3VuZDtcblxuXHRyZXR1cm4gY3NzKCB7IGJhY2tncm91bmRDb2xvciB9ICk7XG59O1xuXG5jb25zdCBjb250YWluZXJXaWR0aFN0eWxlcyA9ICgge1xuXHRfX3Vuc3RhYmxlSW5wdXRXaWR0aCxcblx0bGFiZWxQb3NpdGlvbixcbn06IENvbnRhaW5lclByb3BzICkgPT4ge1xuXHRpZiAoICEgX191bnN0YWJsZUlucHV0V2lkdGggKSByZXR1cm4gY3NzKCB7IHdpZHRoOiAnMTAwJScgfSApO1xuXG5cdGlmICggbGFiZWxQb3NpdGlvbiA9PT0gJ3NpZGUnICkgcmV0dXJuICcnO1xuXG5cdGlmICggbGFiZWxQb3NpdGlvbiA9PT0gJ2VkZ2UnICkge1xuXHRcdHJldHVybiBjc3MoIHtcblx0XHRcdGZsZXg6IGAwIDAgJHsgX191bnN0YWJsZUlucHV0V2lkdGggfWAsXG5cdFx0fSApO1xuXHR9XG5cblx0cmV0dXJuIGNzcyggeyB3aWR0aDogX191bnN0YWJsZUlucHV0V2lkdGggfSApO1xufTtcblxuZXhwb3J0IGNvbnN0IENvbnRhaW5lciA9IHN0eWxlZC5kaXY8IENvbnRhaW5lclByb3BzID5gXG5cdGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdGJvcmRlci1yYWRpdXM6IGluaGVyaXQ7XG5cdGRpc3BsYXk6IGZsZXg7XG5cdGZsZXg6IDE7XG5cdHBvc2l0aW9uOiByZWxhdGl2ZTtcblxuXHQkeyBjb250YWluZXJEaXNhYmxlZFN0eWxlcyB9XG5cdCR7IGNvbnRhaW5lcldpZHRoU3R5bGVzIH1cbmA7XG5cbnR5cGUgSW5wdXRQcm9wcyA9IHtcblx0X19uZXh0MzZweERlZmF1bHRTaXplPzogYm9vbGVhbjtcblx0ZGlzYWJsZWQ/OiBib29sZWFuO1xuXHRpbnB1dFNpemU/OiBTaXplO1xuXHRpc0RyYWdnaW5nPzogYm9vbGVhbjtcblx0ZHJhZ0N1cnNvcj86IENTU1Byb3BlcnRpZXNbICdjdXJzb3InIF07XG5cdHBhZGRpbmdJbmxpbmVTdGFydD86IENTU1Byb3BlcnRpZXNbICdwYWRkaW5nSW5saW5lU3RhcnQnIF07XG5cdHBhZGRpbmdJbmxpbmVFbmQ/OiBDU1NQcm9wZXJ0aWVzWyAncGFkZGluZ0lubGluZUVuZCcgXTtcbn07XG5cbmNvbnN0IGRpc2FibGVkU3R5bGVzID0gKCB7IGRpc2FibGVkIH06IElucHV0UHJvcHMgKSA9PiB7XG5cdGlmICggISBkaXNhYmxlZCApIHJldHVybiAnJztcblxuXHRyZXR1cm4gY3NzKCB7XG5cdFx0Y29sb3I6IENPTE9SUy51aS50ZXh0RGlzYWJsZWQsXG5cdH0gKTtcbn07XG5cbmNvbnN0IGZvbnRTaXplU3R5bGVzID0gKCB7IGlucHV0U2l6ZTogc2l6ZSB9OiBJbnB1dFByb3BzICkgPT4ge1xuXHRjb25zdCBzaXplcyA9IHtcblx0XHRkZWZhdWx0OiAnMTNweCcsXG5cdFx0c21hbGw6ICcxMXB4Jyxcblx0XHQnX191bnN0YWJsZS1sYXJnZSc6ICcxM3B4Jyxcblx0fTtcblxuXHRjb25zdCBmb250U2l6ZSA9IHNpemVzWyBzaXplIGFzIFNpemUgXSB8fCBzaXplcy5kZWZhdWx0O1xuXHRjb25zdCBmb250U2l6ZU1vYmlsZSA9ICcxNnB4JztcblxuXHRpZiAoICEgZm9udFNpemUgKSByZXR1cm4gJyc7XG5cblx0cmV0dXJuIGNzc2Bcblx0XHRmb250LXNpemU6ICR7IGZvbnRTaXplTW9iaWxlIH07XG5cblx0XHRAbWVkaWEgKCBtaW4td2lkdGg6IDYwMHB4ICkge1xuXHRcdFx0Zm9udC1zaXplOiAkeyBmb250U2l6ZSB9O1xuXHRcdH1cblx0YDtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRTaXplQ29uZmlnID0gKCB7XG5cdGlucHV0U2l6ZTogc2l6ZSxcblx0X19uZXh0MzZweERlZmF1bHRTaXplLFxufTogSW5wdXRQcm9wcyApID0+IHtcblx0Ly8gUGFkZGluZ3MgbWF5IGJlIG92ZXJyaWRkZW4gYnkgdGhlIGN1c3RvbSBwYWRkaW5ncyBwcm9wcy5cblx0Y29uc3Qgc2l6ZXMgPSB7XG5cdFx0ZGVmYXVsdDoge1xuXHRcdFx0aGVpZ2h0OiAzNixcblx0XHRcdGxpbmVIZWlnaHQ6IDEsXG5cdFx0XHRtaW5IZWlnaHQ6IDM2LFxuXHRcdFx0cGFkZGluZ0xlZnQ6IHNwYWNlKCA0ICksXG5cdFx0XHRwYWRkaW5nUmlnaHQ6IHNwYWNlKCA0ICksXG5cdFx0fSxcblx0XHRzbWFsbDoge1xuXHRcdFx0aGVpZ2h0OiAyNCxcblx0XHRcdGxpbmVIZWlnaHQ6IDEsXG5cdFx0XHRtaW5IZWlnaHQ6IDI0LFxuXHRcdFx0cGFkZGluZ0xlZnQ6IHNwYWNlKCAyICksXG5cdFx0XHRwYWRkaW5nUmlnaHQ6IHNwYWNlKCAyICksXG5cdFx0fSxcblx0XHQnX191bnN0YWJsZS1sYXJnZSc6IHtcblx0XHRcdGhlaWdodDogNDAsXG5cdFx0XHRsaW5lSGVpZ2h0OiAxLFxuXHRcdFx0bWluSGVpZ2h0OiA0MCxcblx0XHRcdHBhZGRpbmdMZWZ0OiBzcGFjZSggNCApLFxuXHRcdFx0cGFkZGluZ1JpZ2h0OiBzcGFjZSggNCApLFxuXHRcdH0sXG5cdH07XG5cblx0aWYgKCAhIF9fbmV4dDM2cHhEZWZhdWx0U2l6ZSApIHtcblx0XHRzaXplcy5kZWZhdWx0ID0ge1xuXHRcdFx0aGVpZ2h0OiAzMCxcblx0XHRcdGxpbmVIZWlnaHQ6IDEsXG5cdFx0XHRtaW5IZWlnaHQ6IDMwLFxuXHRcdFx0cGFkZGluZ0xlZnQ6IHNwYWNlKCAyICksXG5cdFx0XHRwYWRkaW5nUmlnaHQ6IHNwYWNlKCAyICksXG5cdFx0fTtcblx0fVxuXG5cdHJldHVybiBzaXplc1sgc2l6ZSBhcyBTaXplIF0gfHwgc2l6ZXMuZGVmYXVsdDtcbn07XG5cbmNvbnN0IHNpemVTdHlsZXMgPSAoIHByb3BzOiBJbnB1dFByb3BzICkgPT4ge1xuXHRyZXR1cm4gY3NzKCBnZXRTaXplQ29uZmlnKCBwcm9wcyApICk7XG59O1xuXG5jb25zdCBjdXN0b21QYWRkaW5ncyA9ICgge1xuXHRwYWRkaW5nSW5saW5lU3RhcnQsXG5cdHBhZGRpbmdJbmxpbmVFbmQsXG59OiBJbnB1dFByb3BzICkgPT4ge1xuXHRyZXR1cm4gY3NzKCB7IHBhZGRpbmdJbmxpbmVTdGFydCwgcGFkZGluZ0lubGluZUVuZCB9ICk7XG59O1xuXG5jb25zdCBkcmFnU3R5bGVzID0gKCB7IGlzRHJhZ2dpbmcsIGRyYWdDdXJzb3IgfTogSW5wdXRQcm9wcyApID0+IHtcblx0bGV0IGRlZmF1bHRBcnJvd1N0eWxlczogU2VyaWFsaXplZFN0eWxlcyB8IHVuZGVmaW5lZDtcblx0bGV0IGFjdGl2ZURyYWdDdXJzb3JTdHlsZXM6IFNlcmlhbGl6ZWRTdHlsZXMgfCB1bmRlZmluZWQ7XG5cblx0aWYgKCBpc0RyYWdnaW5nICkge1xuXHRcdGRlZmF1bHRBcnJvd1N0eWxlcyA9IGNzc2Bcblx0XHRcdGN1cnNvcjogJHsgZHJhZ0N1cnNvciB9O1xuXHRcdFx0dXNlci1zZWxlY3Q6IG5vbmU7XG5cblx0XHRcdCY6Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b24sXG5cdFx0XHQmOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uIHtcblx0XHRcdFx0LXdlYmtpdC1hcHBlYXJhbmNlOiBub25lICFpbXBvcnRhbnQ7XG5cdFx0XHRcdG1hcmdpbjogMCAhaW1wb3J0YW50O1xuXHRcdFx0fVxuXHRcdGA7XG5cdH1cblxuXHRpZiAoIGlzRHJhZ2dpbmcgJiYgZHJhZ0N1cnNvciApIHtcblx0XHRhY3RpdmVEcmFnQ3Vyc29yU3R5bGVzID0gY3NzYFxuXHRcdFx0JjphY3RpdmUge1xuXHRcdFx0XHRjdXJzb3I6ICR7IGRyYWdDdXJzb3IgfTtcblx0XHRcdH1cblx0XHRgO1xuXHR9XG5cblx0cmV0dXJuIGNzc2Bcblx0XHQkeyBkZWZhdWx0QXJyb3dTdHlsZXMgfVxuXHRcdCR7IGFjdGl2ZURyYWdDdXJzb3JTdHlsZXMgfVxuXHRgO1xufTtcblxuLy8gVE9ETzogUmVzb2x2ZSBuZWVkIHRvIHVzZSAmJiYgdG8gaW5jcmVhc2Ugc3BlY2lmaWNpdHlcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9Xb3JkUHJlc3MvZ3V0ZW5iZXJnL2lzc3Vlcy8xODQ4M1xuXG5leHBvcnQgY29uc3QgSW5wdXQgPSBzdHlsZWQuaW5wdXQ8IElucHV0UHJvcHMgPmBcblx0JiYmIHtcblx0XHRiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcblx0XHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRcdGJvcmRlcjogbm9uZTtcblx0XHRib3gtc2hhZG93OiBub25lICFpbXBvcnRhbnQ7XG5cdFx0Y29sb3I6ICR7IENPTE9SUy5ncmF5WyA5MDAgXSB9O1xuXHRcdGRpc3BsYXk6IGJsb2NrO1xuXHRcdGZvbnQtZmFtaWx5OiBpbmhlcml0O1xuXHRcdG1hcmdpbjogMDtcblx0XHRvdXRsaW5lOiBub25lO1xuXHRcdHdpZHRoOiAxMDAlO1xuXG5cdFx0JHsgZHJhZ1N0eWxlcyB9XG5cdFx0JHsgZGlzYWJsZWRTdHlsZXMgfVxuXHRcdCR7IGZvbnRTaXplU3R5bGVzIH1cblx0XHQkeyBzaXplU3R5bGVzIH1cblx0XHQkeyBjdXN0b21QYWRkaW5ncyB9XG5cblx0XHQmOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyIHtcblx0XHRcdGxpbmUtaGVpZ2h0OiBub3JtYWw7XG5cdFx0fVxuXHR9XG5gO1xuXG5jb25zdCBCYXNlTGFiZWwgPSBzdHlsZWQoIFRleHQgKTwgeyBsYWJlbFBvc2l0aW9uPzogTGFiZWxQb3NpdGlvbiB9ID5gXG5cdCYmJiB7XG5cdFx0JHsgYmFzZUxhYmVsVHlwb2dyYXBoeSB9O1xuXG5cdFx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0XHRkaXNwbGF5OiBibG9jaztcblx0XHRwYWRkaW5nLXRvcDogMDtcblx0XHRwYWRkaW5nLWJvdHRvbTogMDtcblx0XHRtYXgtd2lkdGg6IDEwMCU7XG5cdFx0ei1pbmRleDogMTtcblxuXHRcdG92ZXJmbG93OiBoaWRkZW47XG5cdFx0dGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG5cdFx0d2hpdGUtc3BhY2U6IG5vd3JhcDtcblx0fVxuYDtcblxuZXhwb3J0IGNvbnN0IExhYmVsID0gKFxuXHRwcm9wczogV29yZFByZXNzQ29tcG9uZW50UHJvcHM8XG5cdFx0eyBsYWJlbFBvc2l0aW9uPzogTGFiZWxQb3NpdGlvbjsgY2hpbGRyZW46IFJlYWN0Tm9kZSB9LFxuXHRcdCdsYWJlbCcsXG5cdFx0ZmFsc2Vcblx0PlxuKSA9PiA8QmFzZUxhYmVsIHsgLi4ucHJvcHMgfSBhcz1cImxhYmVsXCIgLz47XG5cbmV4cG9ydCBjb25zdCBMYWJlbFdyYXBwZXIgPSBzdHlsZWQoIEZsZXhJdGVtIClgXG5cdG1heC13aWR0aDogY2FsYyggMTAwJSAtIDEwcHggKTtcbmA7XG5cbnR5cGUgQmFja2Ryb3BQcm9wcyA9IHtcblx0ZGlzYWJsZWQ/OiBib29sZWFuO1xuXHRpc0ZvY3VzZWQ/OiBib29sZWFuO1xufTtcblxuY29uc3QgYmFja2Ryb3BGb2N1c2VkU3R5bGVzID0gKCB7XG5cdGRpc2FibGVkLFxuXHRpc0ZvY3VzZWQsXG59OiBCYWNrZHJvcFByb3BzICk6IFNlcmlhbGl6ZWRTdHlsZXMgPT4ge1xuXHRsZXQgYm9yZGVyQ29sb3IgPSBpc0ZvY3VzZWQgPyBDT0xPUlMudWkuYm9yZGVyRm9jdXMgOiBDT0xPUlMudWkuYm9yZGVyO1xuXG5cdGxldCBib3hTaGFkb3c7XG5cdGxldCBvdXRsaW5lO1xuXHRsZXQgb3V0bGluZU9mZnNldDtcblxuXHRpZiAoIGlzRm9jdXNlZCApIHtcblx0XHRib3hTaGFkb3cgPSBDT05GSUcuY29udHJvbEJveFNoYWRvd0ZvY3VzO1xuXHRcdC8vIFdpbmRvd3MgSGlnaCBDb250cmFzdCBtb2RlIHdpbGwgc2hvdyB0aGlzIG91dGxpbmUsIGJ1dCBub3QgdGhlIGJveC1zaGFkb3cuXG5cdFx0b3V0bGluZSA9IGAycHggc29saWQgdHJhbnNwYXJlbnRgO1xuXHRcdG91dGxpbmVPZmZzZXQgPSBgLTJweGA7XG5cdH1cblxuXHRpZiAoIGRpc2FibGVkICkge1xuXHRcdGJvcmRlckNvbG9yID0gQ09MT1JTLnVpLmJvcmRlckRpc2FibGVkO1xuXHR9XG5cblx0cmV0dXJuIGNzcygge1xuXHRcdGJveFNoYWRvdyxcblx0XHRib3JkZXJDb2xvcixcblx0XHRib3JkZXJTdHlsZTogJ3NvbGlkJyxcblx0XHRib3JkZXJXaWR0aDogMSxcblx0XHRvdXRsaW5lLFxuXHRcdG91dGxpbmVPZmZzZXQsXG5cdH0gKTtcbn07XG5cbmV4cG9ydCBjb25zdCBCYWNrZHJvcFVJID0gc3R5bGVkLmRpdjwgQmFja2Ryb3BQcm9wcyA+YFxuXHQmJiYge1xuXHRcdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdFx0Ym9yZGVyLXJhZGl1czogaW5oZXJpdDtcblx0XHRib3R0b206IDA7XG5cdFx0bGVmdDogMDtcblx0XHRtYXJnaW46IDA7XG5cdFx0cGFkZGluZzogMDtcblx0XHRwb2ludGVyLWV2ZW50czogbm9uZTtcblx0XHRwb3NpdGlvbjogYWJzb2x1dGU7XG5cdFx0cmlnaHQ6IDA7XG5cdFx0dG9wOiAwO1xuXG5cdFx0JHsgYmFja2Ryb3BGb2N1c2VkU3R5bGVzIH1cblx0XHQkeyBydGwoIHsgcGFkZGluZ0xlZnQ6IDIgfSApIH1cblx0fVxuYDtcblxuZXhwb3J0IGNvbnN0IFByZWZpeCA9IHN0eWxlZC5zcGFuYFxuXHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRkaXNwbGF5OiBibG9jaztcbmA7XG5cbmV4cG9ydCBjb25zdCBTdWZmaXggPSBzdHlsZWQuc3BhbmBcblx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0YWxpZ24tc2VsZjogc3RyZXRjaDtcblx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0ZGlzcGxheTogZmxleDtcbmA7XG4iXX0= */");
};
const dragStyles = ({
  isDragging,
  dragCursor
}) => {
  let defaultArrowStyles;
  let activeDragCursorStyles;
  if (isDragging) {
    defaultArrowStyles = /*#__PURE__*/css("cursor:", dragCursor, ";user-select:none;&::-webkit-outer-spin-button,&::-webkit-inner-spin-button{-webkit-appearance:none!important;margin:0!important;}" + (process.env.NODE_ENV === "production" ? "" : ";label:defaultArrowStyles;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvaW5wdXQtY29udHJvbC9zdHlsZXMvaW5wdXQtY29udHJvbC1zdHlsZXMudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWtMMEIiLCJmaWxlIjoiQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy9pbnB1dC1jb250cm9sL3N0eWxlcy9pbnB1dC1jb250cm9sLXN0eWxlcy50c3giLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgdHlwZSB7IFNlcmlhbGl6ZWRTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgdHlwZSB7IENTU1Byb3BlcnRpZXMsIFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcblxuLyoqXG4gKiBJbnRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHR5cGUgeyBXb3JkUHJlc3NDb21wb25lbnRQcm9wcyB9IGZyb20gJy4uLy4uL3VpL2NvbnRleHQnO1xuaW1wb3J0IHsgRmxleCwgRmxleEl0ZW0gfSBmcm9tICcuLi8uLi9mbGV4JztcbmltcG9ydCB7IFRleHQgfSBmcm9tICcuLi8uLi90ZXh0JztcbmltcG9ydCB7IGJhc2VMYWJlbFR5cG9ncmFwaHksIENPTE9SUywgQ09ORklHLCBydGwgfSBmcm9tICcuLi8uLi91dGlscyc7XG5pbXBvcnQgdHlwZSB7IExhYmVsUG9zaXRpb24sIFNpemUgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBzcGFjZSB9IGZyb20gJy4uLy4uL3VpL3V0aWxzL3NwYWNlJztcblxudHlwZSBDb250YWluZXJQcm9wcyA9IHtcblx0ZGlzYWJsZWQ/OiBib29sZWFuO1xuXHRoaWRlTGFiZWw/OiBib29sZWFuO1xuXHRfX3Vuc3RhYmxlSW5wdXRXaWR0aD86IENTU1Byb3BlcnRpZXNbICd3aWR0aCcgXTtcblx0bGFiZWxQb3NpdGlvbj86IExhYmVsUG9zaXRpb247XG59O1xuXG50eXBlIFJvb3RQcm9wcyA9IHtcblx0aXNGb2N1c2VkPzogYm9vbGVhbjtcblx0bGFiZWxQb3NpdGlvbj86IExhYmVsUG9zaXRpb247XG59O1xuXG5jb25zdCByb290Rm9jdXNlZFN0eWxlcyA9ICggeyBpc0ZvY3VzZWQgfTogUm9vdFByb3BzICkgPT4ge1xuXHRpZiAoICEgaXNGb2N1c2VkICkgcmV0dXJuICcnO1xuXG5cdHJldHVybiBjc3MoIHsgekluZGV4OiAxIH0gKTtcbn07XG5cbmV4cG9ydCBjb25zdCBSb290ID0gc3R5bGVkKCBGbGV4ICk8IFJvb3RQcm9wcyA+YFxuXHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cdGJvcmRlci1yYWRpdXM6IDJweDtcblx0cGFkZGluZy10b3A6IDA7XG5cdCR7IHJvb3RGb2N1c2VkU3R5bGVzIH1cbmA7XG5cbmNvbnN0IGNvbnRhaW5lckRpc2FibGVkU3R5bGVzID0gKCB7IGRpc2FibGVkIH06IENvbnRhaW5lclByb3BzICkgPT4ge1xuXHRjb25zdCBiYWNrZ3JvdW5kQ29sb3IgPSBkaXNhYmxlZFxuXHRcdD8gQ09MT1JTLnVpLmJhY2tncm91bmREaXNhYmxlZFxuXHRcdDogQ09MT1JTLnVpLmJhY2tncm91bmQ7XG5cblx0cmV0dXJuIGNzcyggeyBiYWNrZ3JvdW5kQ29sb3IgfSApO1xufTtcblxuY29uc3QgY29udGFpbmVyV2lkdGhTdHlsZXMgPSAoIHtcblx0X191bnN0YWJsZUlucHV0V2lkdGgsXG5cdGxhYmVsUG9zaXRpb24sXG59OiBDb250YWluZXJQcm9wcyApID0+IHtcblx0aWYgKCAhIF9fdW5zdGFibGVJbnB1dFdpZHRoICkgcmV0dXJuIGNzcyggeyB3aWR0aDogJzEwMCUnIH0gKTtcblxuXHRpZiAoIGxhYmVsUG9zaXRpb24gPT09ICdzaWRlJyApIHJldHVybiAnJztcblxuXHRpZiAoIGxhYmVsUG9zaXRpb24gPT09ICdlZGdlJyApIHtcblx0XHRyZXR1cm4gY3NzKCB7XG5cdFx0XHRmbGV4OiBgMCAwICR7IF9fdW5zdGFibGVJbnB1dFdpZHRoIH1gLFxuXHRcdH0gKTtcblx0fVxuXG5cdHJldHVybiBjc3MoIHsgd2lkdGg6IF9fdW5zdGFibGVJbnB1dFdpZHRoIH0gKTtcbn07XG5cbmV4cG9ydCBjb25zdCBDb250YWluZXIgPSBzdHlsZWQuZGl2PCBDb250YWluZXJQcm9wcyA+YFxuXHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRib3JkZXItcmFkaXVzOiBpbmhlcml0O1xuXHRkaXNwbGF5OiBmbGV4O1xuXHRmbGV4OiAxO1xuXHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cblx0JHsgY29udGFpbmVyRGlzYWJsZWRTdHlsZXMgfVxuXHQkeyBjb250YWluZXJXaWR0aFN0eWxlcyB9XG5gO1xuXG50eXBlIElucHV0UHJvcHMgPSB7XG5cdF9fbmV4dDM2cHhEZWZhdWx0U2l6ZT86IGJvb2xlYW47XG5cdGRpc2FibGVkPzogYm9vbGVhbjtcblx0aW5wdXRTaXplPzogU2l6ZTtcblx0aXNEcmFnZ2luZz86IGJvb2xlYW47XG5cdGRyYWdDdXJzb3I/OiBDU1NQcm9wZXJ0aWVzWyAnY3Vyc29yJyBdO1xuXHRwYWRkaW5nSW5saW5lU3RhcnQ/OiBDU1NQcm9wZXJ0aWVzWyAncGFkZGluZ0lubGluZVN0YXJ0JyBdO1xuXHRwYWRkaW5nSW5saW5lRW5kPzogQ1NTUHJvcGVydGllc1sgJ3BhZGRpbmdJbmxpbmVFbmQnIF07XG59O1xuXG5jb25zdCBkaXNhYmxlZFN0eWxlcyA9ICggeyBkaXNhYmxlZCB9OiBJbnB1dFByb3BzICkgPT4ge1xuXHRpZiAoICEgZGlzYWJsZWQgKSByZXR1cm4gJyc7XG5cblx0cmV0dXJuIGNzcygge1xuXHRcdGNvbG9yOiBDT0xPUlMudWkudGV4dERpc2FibGVkLFxuXHR9ICk7XG59O1xuXG5jb25zdCBmb250U2l6ZVN0eWxlcyA9ICggeyBpbnB1dFNpemU6IHNpemUgfTogSW5wdXRQcm9wcyApID0+IHtcblx0Y29uc3Qgc2l6ZXMgPSB7XG5cdFx0ZGVmYXVsdDogJzEzcHgnLFxuXHRcdHNtYWxsOiAnMTFweCcsXG5cdFx0J19fdW5zdGFibGUtbGFyZ2UnOiAnMTNweCcsXG5cdH07XG5cblx0Y29uc3QgZm9udFNpemUgPSBzaXplc1sgc2l6ZSBhcyBTaXplIF0gfHwgc2l6ZXMuZGVmYXVsdDtcblx0Y29uc3QgZm9udFNpemVNb2JpbGUgPSAnMTZweCc7XG5cblx0aWYgKCAhIGZvbnRTaXplICkgcmV0dXJuICcnO1xuXG5cdHJldHVybiBjc3NgXG5cdFx0Zm9udC1zaXplOiAkeyBmb250U2l6ZU1vYmlsZSB9O1xuXG5cdFx0QG1lZGlhICggbWluLXdpZHRoOiA2MDBweCApIHtcblx0XHRcdGZvbnQtc2l6ZTogJHsgZm9udFNpemUgfTtcblx0XHR9XG5cdGA7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0U2l6ZUNvbmZpZyA9ICgge1xuXHRpbnB1dFNpemU6IHNpemUsXG5cdF9fbmV4dDM2cHhEZWZhdWx0U2l6ZSxcbn06IElucHV0UHJvcHMgKSA9PiB7XG5cdC8vIFBhZGRpbmdzIG1heSBiZSBvdmVycmlkZGVuIGJ5IHRoZSBjdXN0b20gcGFkZGluZ3MgcHJvcHMuXG5cdGNvbnN0IHNpemVzID0ge1xuXHRcdGRlZmF1bHQ6IHtcblx0XHRcdGhlaWdodDogMzYsXG5cdFx0XHRsaW5lSGVpZ2h0OiAxLFxuXHRcdFx0bWluSGVpZ2h0OiAzNixcblx0XHRcdHBhZGRpbmdMZWZ0OiBzcGFjZSggNCApLFxuXHRcdFx0cGFkZGluZ1JpZ2h0OiBzcGFjZSggNCApLFxuXHRcdH0sXG5cdFx0c21hbGw6IHtcblx0XHRcdGhlaWdodDogMjQsXG5cdFx0XHRsaW5lSGVpZ2h0OiAxLFxuXHRcdFx0bWluSGVpZ2h0OiAyNCxcblx0XHRcdHBhZGRpbmdMZWZ0OiBzcGFjZSggMiApLFxuXHRcdFx0cGFkZGluZ1JpZ2h0OiBzcGFjZSggMiApLFxuXHRcdH0sXG5cdFx0J19fdW5zdGFibGUtbGFyZ2UnOiB7XG5cdFx0XHRoZWlnaHQ6IDQwLFxuXHRcdFx0bGluZUhlaWdodDogMSxcblx0XHRcdG1pbkhlaWdodDogNDAsXG5cdFx0XHRwYWRkaW5nTGVmdDogc3BhY2UoIDQgKSxcblx0XHRcdHBhZGRpbmdSaWdodDogc3BhY2UoIDQgKSxcblx0XHR9LFxuXHR9O1xuXG5cdGlmICggISBfX25leHQzNnB4RGVmYXVsdFNpemUgKSB7XG5cdFx0c2l6ZXMuZGVmYXVsdCA9IHtcblx0XHRcdGhlaWdodDogMzAsXG5cdFx0XHRsaW5lSGVpZ2h0OiAxLFxuXHRcdFx0bWluSGVpZ2h0OiAzMCxcblx0XHRcdHBhZGRpbmdMZWZ0OiBzcGFjZSggMiApLFxuXHRcdFx0cGFkZGluZ1JpZ2h0OiBzcGFjZSggMiApLFxuXHRcdH07XG5cdH1cblxuXHRyZXR1cm4gc2l6ZXNbIHNpemUgYXMgU2l6ZSBdIHx8IHNpemVzLmRlZmF1bHQ7XG59O1xuXG5jb25zdCBzaXplU3R5bGVzID0gKCBwcm9wczogSW5wdXRQcm9wcyApID0+IHtcblx0cmV0dXJuIGNzcyggZ2V0U2l6ZUNvbmZpZyggcHJvcHMgKSApO1xufTtcblxuY29uc3QgY3VzdG9tUGFkZGluZ3MgPSAoIHtcblx0cGFkZGluZ0lubGluZVN0YXJ0LFxuXHRwYWRkaW5nSW5saW5lRW5kLFxufTogSW5wdXRQcm9wcyApID0+IHtcblx0cmV0dXJuIGNzcyggeyBwYWRkaW5nSW5saW5lU3RhcnQsIHBhZGRpbmdJbmxpbmVFbmQgfSApO1xufTtcblxuY29uc3QgZHJhZ1N0eWxlcyA9ICggeyBpc0RyYWdnaW5nLCBkcmFnQ3Vyc29yIH06IElucHV0UHJvcHMgKSA9PiB7XG5cdGxldCBkZWZhdWx0QXJyb3dTdHlsZXM6IFNlcmlhbGl6ZWRTdHlsZXMgfCB1bmRlZmluZWQ7XG5cdGxldCBhY3RpdmVEcmFnQ3Vyc29yU3R5bGVzOiBTZXJpYWxpemVkU3R5bGVzIHwgdW5kZWZpbmVkO1xuXG5cdGlmICggaXNEcmFnZ2luZyApIHtcblx0XHRkZWZhdWx0QXJyb3dTdHlsZXMgPSBjc3NgXG5cdFx0XHRjdXJzb3I6ICR7IGRyYWdDdXJzb3IgfTtcblx0XHRcdHVzZXItc2VsZWN0OiBub25lO1xuXG5cdFx0XHQmOjotd2Via2l0LW91dGVyLXNwaW4tYnV0dG9uLFxuXHRcdFx0Jjo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbiB7XG5cdFx0XHRcdC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZSAhaW1wb3J0YW50O1xuXHRcdFx0XHRtYXJnaW46IDAgIWltcG9ydGFudDtcblx0XHRcdH1cblx0XHRgO1xuXHR9XG5cblx0aWYgKCBpc0RyYWdnaW5nICYmIGRyYWdDdXJzb3IgKSB7XG5cdFx0YWN0aXZlRHJhZ0N1cnNvclN0eWxlcyA9IGNzc2Bcblx0XHRcdCY6YWN0aXZlIHtcblx0XHRcdFx0Y3Vyc29yOiAkeyBkcmFnQ3Vyc29yIH07XG5cdFx0XHR9XG5cdFx0YDtcblx0fVxuXG5cdHJldHVybiBjc3NgXG5cdFx0JHsgZGVmYXVsdEFycm93U3R5bGVzIH1cblx0XHQkeyBhY3RpdmVEcmFnQ3Vyc29yU3R5bGVzIH1cblx0YDtcbn07XG5cbi8vIFRPRE86IFJlc29sdmUgbmVlZCB0byB1c2UgJiYmIHRvIGluY3JlYXNlIHNwZWNpZmljaXR5XG4vLyBodHRwczovL2dpdGh1Yi5jb20vV29yZFByZXNzL2d1dGVuYmVyZy9pc3N1ZXMvMTg0ODNcblxuZXhwb3J0IGNvbnN0IElucHV0ID0gc3R5bGVkLmlucHV0PCBJbnB1dFByb3BzID5gXG5cdCYmJiB7XG5cdFx0YmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG5cdFx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0XHRib3JkZXI6IG5vbmU7XG5cdFx0Ym94LXNoYWRvdzogbm9uZSAhaW1wb3J0YW50O1xuXHRcdGNvbG9yOiAkeyBDT0xPUlMuZ3JheVsgOTAwIF0gfTtcblx0XHRkaXNwbGF5OiBibG9jaztcblx0XHRmb250LWZhbWlseTogaW5oZXJpdDtcblx0XHRtYXJnaW46IDA7XG5cdFx0b3V0bGluZTogbm9uZTtcblx0XHR3aWR0aDogMTAwJTtcblxuXHRcdCR7IGRyYWdTdHlsZXMgfVxuXHRcdCR7IGRpc2FibGVkU3R5bGVzIH1cblx0XHQkeyBmb250U2l6ZVN0eWxlcyB9XG5cdFx0JHsgc2l6ZVN0eWxlcyB9XG5cdFx0JHsgY3VzdG9tUGFkZGluZ3MgfVxuXG5cdFx0Jjo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciB7XG5cdFx0XHRsaW5lLWhlaWdodDogbm9ybWFsO1xuXHRcdH1cblx0fVxuYDtcblxuY29uc3QgQmFzZUxhYmVsID0gc3R5bGVkKCBUZXh0ICk8IHsgbGFiZWxQb3NpdGlvbj86IExhYmVsUG9zaXRpb24gfSA+YFxuXHQmJiYge1xuXHRcdCR7IGJhc2VMYWJlbFR5cG9ncmFwaHkgfTtcblxuXHRcdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdFx0ZGlzcGxheTogYmxvY2s7XG5cdFx0cGFkZGluZy10b3A6IDA7XG5cdFx0cGFkZGluZy1ib3R0b206IDA7XG5cdFx0bWF4LXdpZHRoOiAxMDAlO1xuXHRcdHotaW5kZXg6IDE7XG5cblx0XHRvdmVyZmxvdzogaGlkZGVuO1xuXHRcdHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuXHRcdHdoaXRlLXNwYWNlOiBub3dyYXA7XG5cdH1cbmA7XG5cbmV4cG9ydCBjb25zdCBMYWJlbCA9IChcblx0cHJvcHM6IFdvcmRQcmVzc0NvbXBvbmVudFByb3BzPFxuXHRcdHsgbGFiZWxQb3NpdGlvbj86IExhYmVsUG9zaXRpb247IGNoaWxkcmVuOiBSZWFjdE5vZGUgfSxcblx0XHQnbGFiZWwnLFxuXHRcdGZhbHNlXG5cdD5cbikgPT4gPEJhc2VMYWJlbCB7IC4uLnByb3BzIH0gYXM9XCJsYWJlbFwiIC8+O1xuXG5leHBvcnQgY29uc3QgTGFiZWxXcmFwcGVyID0gc3R5bGVkKCBGbGV4SXRlbSApYFxuXHRtYXgtd2lkdGg6IGNhbGMoIDEwMCUgLSAxMHB4ICk7XG5gO1xuXG50eXBlIEJhY2tkcm9wUHJvcHMgPSB7XG5cdGRpc2FibGVkPzogYm9vbGVhbjtcblx0aXNGb2N1c2VkPzogYm9vbGVhbjtcbn07XG5cbmNvbnN0IGJhY2tkcm9wRm9jdXNlZFN0eWxlcyA9ICgge1xuXHRkaXNhYmxlZCxcblx0aXNGb2N1c2VkLFxufTogQmFja2Ryb3BQcm9wcyApOiBTZXJpYWxpemVkU3R5bGVzID0+IHtcblx0bGV0IGJvcmRlckNvbG9yID0gaXNGb2N1c2VkID8gQ09MT1JTLnVpLmJvcmRlckZvY3VzIDogQ09MT1JTLnVpLmJvcmRlcjtcblxuXHRsZXQgYm94U2hhZG93O1xuXHRsZXQgb3V0bGluZTtcblx0bGV0IG91dGxpbmVPZmZzZXQ7XG5cblx0aWYgKCBpc0ZvY3VzZWQgKSB7XG5cdFx0Ym94U2hhZG93ID0gQ09ORklHLmNvbnRyb2xCb3hTaGFkb3dGb2N1cztcblx0XHQvLyBXaW5kb3dzIEhpZ2ggQ29udHJhc3QgbW9kZSB3aWxsIHNob3cgdGhpcyBvdXRsaW5lLCBidXQgbm90IHRoZSBib3gtc2hhZG93LlxuXHRcdG91dGxpbmUgPSBgMnB4IHNvbGlkIHRyYW5zcGFyZW50YDtcblx0XHRvdXRsaW5lT2Zmc2V0ID0gYC0ycHhgO1xuXHR9XG5cblx0aWYgKCBkaXNhYmxlZCApIHtcblx0XHRib3JkZXJDb2xvciA9IENPTE9SUy51aS5ib3JkZXJEaXNhYmxlZDtcblx0fVxuXG5cdHJldHVybiBjc3MoIHtcblx0XHRib3hTaGFkb3csXG5cdFx0Ym9yZGVyQ29sb3IsXG5cdFx0Ym9yZGVyU3R5bGU6ICdzb2xpZCcsXG5cdFx0Ym9yZGVyV2lkdGg6IDEsXG5cdFx0b3V0bGluZSxcblx0XHRvdXRsaW5lT2Zmc2V0LFxuXHR9ICk7XG59O1xuXG5leHBvcnQgY29uc3QgQmFja2Ryb3BVSSA9IHN0eWxlZC5kaXY8IEJhY2tkcm9wUHJvcHMgPmBcblx0JiYmIHtcblx0XHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRcdGJvcmRlci1yYWRpdXM6IGluaGVyaXQ7XG5cdFx0Ym90dG9tOiAwO1xuXHRcdGxlZnQ6IDA7XG5cdFx0bWFyZ2luOiAwO1xuXHRcdHBhZGRpbmc6IDA7XG5cdFx0cG9pbnRlci1ldmVudHM6IG5vbmU7XG5cdFx0cG9zaXRpb246IGFic29sdXRlO1xuXHRcdHJpZ2h0OiAwO1xuXHRcdHRvcDogMDtcblxuXHRcdCR7IGJhY2tkcm9wRm9jdXNlZFN0eWxlcyB9XG5cdFx0JHsgcnRsKCB7IHBhZGRpbmdMZWZ0OiAyIH0gKSB9XG5cdH1cbmA7XG5cbmV4cG9ydCBjb25zdCBQcmVmaXggPSBzdHlsZWQuc3BhbmBcblx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0ZGlzcGxheTogYmxvY2s7XG5gO1xuXG5leHBvcnQgY29uc3QgU3VmZml4ID0gc3R5bGVkLnNwYW5gXG5cdGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cdGFsaWduLXNlbGY6IHN0cmV0Y2g7XG5cdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdGRpc3BsYXk6IGZsZXg7XG5gO1xuIl19 */");
  }
  if (isDragging && dragCursor) {
    activeDragCursorStyles = /*#__PURE__*/css("&:active{cursor:", dragCursor, ";}" + (process.env.NODE_ENV === "production" ? "" : ";label:activeDragCursorStyles;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvaW5wdXQtY29udHJvbC9zdHlsZXMvaW5wdXQtY29udHJvbC1zdHlsZXMudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQStMOEIiLCJmaWxlIjoiQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy9pbnB1dC1jb250cm9sL3N0eWxlcy9pbnB1dC1jb250cm9sLXN0eWxlcy50c3giLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgdHlwZSB7IFNlcmlhbGl6ZWRTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgdHlwZSB7IENTU1Byb3BlcnRpZXMsIFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcblxuLyoqXG4gKiBJbnRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHR5cGUgeyBXb3JkUHJlc3NDb21wb25lbnRQcm9wcyB9IGZyb20gJy4uLy4uL3VpL2NvbnRleHQnO1xuaW1wb3J0IHsgRmxleCwgRmxleEl0ZW0gfSBmcm9tICcuLi8uLi9mbGV4JztcbmltcG9ydCB7IFRleHQgfSBmcm9tICcuLi8uLi90ZXh0JztcbmltcG9ydCB7IGJhc2VMYWJlbFR5cG9ncmFwaHksIENPTE9SUywgQ09ORklHLCBydGwgfSBmcm9tICcuLi8uLi91dGlscyc7XG5pbXBvcnQgdHlwZSB7IExhYmVsUG9zaXRpb24sIFNpemUgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBzcGFjZSB9IGZyb20gJy4uLy4uL3VpL3V0aWxzL3NwYWNlJztcblxudHlwZSBDb250YWluZXJQcm9wcyA9IHtcblx0ZGlzYWJsZWQ/OiBib29sZWFuO1xuXHRoaWRlTGFiZWw/OiBib29sZWFuO1xuXHRfX3Vuc3RhYmxlSW5wdXRXaWR0aD86IENTU1Byb3BlcnRpZXNbICd3aWR0aCcgXTtcblx0bGFiZWxQb3NpdGlvbj86IExhYmVsUG9zaXRpb247XG59O1xuXG50eXBlIFJvb3RQcm9wcyA9IHtcblx0aXNGb2N1c2VkPzogYm9vbGVhbjtcblx0bGFiZWxQb3NpdGlvbj86IExhYmVsUG9zaXRpb247XG59O1xuXG5jb25zdCByb290Rm9jdXNlZFN0eWxlcyA9ICggeyBpc0ZvY3VzZWQgfTogUm9vdFByb3BzICkgPT4ge1xuXHRpZiAoICEgaXNGb2N1c2VkICkgcmV0dXJuICcnO1xuXG5cdHJldHVybiBjc3MoIHsgekluZGV4OiAxIH0gKTtcbn07XG5cbmV4cG9ydCBjb25zdCBSb290ID0gc3R5bGVkKCBGbGV4ICk8IFJvb3RQcm9wcyA+YFxuXHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cdGJvcmRlci1yYWRpdXM6IDJweDtcblx0cGFkZGluZy10b3A6IDA7XG5cdCR7IHJvb3RGb2N1c2VkU3R5bGVzIH1cbmA7XG5cbmNvbnN0IGNvbnRhaW5lckRpc2FibGVkU3R5bGVzID0gKCB7IGRpc2FibGVkIH06IENvbnRhaW5lclByb3BzICkgPT4ge1xuXHRjb25zdCBiYWNrZ3JvdW5kQ29sb3IgPSBkaXNhYmxlZFxuXHRcdD8gQ09MT1JTLnVpLmJhY2tncm91bmREaXNhYmxlZFxuXHRcdDogQ09MT1JTLnVpLmJhY2tncm91bmQ7XG5cblx0cmV0dXJuIGNzcyggeyBiYWNrZ3JvdW5kQ29sb3IgfSApO1xufTtcblxuY29uc3QgY29udGFpbmVyV2lkdGhTdHlsZXMgPSAoIHtcblx0X191bnN0YWJsZUlucHV0V2lkdGgsXG5cdGxhYmVsUG9zaXRpb24sXG59OiBDb250YWluZXJQcm9wcyApID0+IHtcblx0aWYgKCAhIF9fdW5zdGFibGVJbnB1dFdpZHRoICkgcmV0dXJuIGNzcyggeyB3aWR0aDogJzEwMCUnIH0gKTtcblxuXHRpZiAoIGxhYmVsUG9zaXRpb24gPT09ICdzaWRlJyApIHJldHVybiAnJztcblxuXHRpZiAoIGxhYmVsUG9zaXRpb24gPT09ICdlZGdlJyApIHtcblx0XHRyZXR1cm4gY3NzKCB7XG5cdFx0XHRmbGV4OiBgMCAwICR7IF9fdW5zdGFibGVJbnB1dFdpZHRoIH1gLFxuXHRcdH0gKTtcblx0fVxuXG5cdHJldHVybiBjc3MoIHsgd2lkdGg6IF9fdW5zdGFibGVJbnB1dFdpZHRoIH0gKTtcbn07XG5cbmV4cG9ydCBjb25zdCBDb250YWluZXIgPSBzdHlsZWQuZGl2PCBDb250YWluZXJQcm9wcyA+YFxuXHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRib3JkZXItcmFkaXVzOiBpbmhlcml0O1xuXHRkaXNwbGF5OiBmbGV4O1xuXHRmbGV4OiAxO1xuXHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cblx0JHsgY29udGFpbmVyRGlzYWJsZWRTdHlsZXMgfVxuXHQkeyBjb250YWluZXJXaWR0aFN0eWxlcyB9XG5gO1xuXG50eXBlIElucHV0UHJvcHMgPSB7XG5cdF9fbmV4dDM2cHhEZWZhdWx0U2l6ZT86IGJvb2xlYW47XG5cdGRpc2FibGVkPzogYm9vbGVhbjtcblx0aW5wdXRTaXplPzogU2l6ZTtcblx0aXNEcmFnZ2luZz86IGJvb2xlYW47XG5cdGRyYWdDdXJzb3I/OiBDU1NQcm9wZXJ0aWVzWyAnY3Vyc29yJyBdO1xuXHRwYWRkaW5nSW5saW5lU3RhcnQ/OiBDU1NQcm9wZXJ0aWVzWyAncGFkZGluZ0lubGluZVN0YXJ0JyBdO1xuXHRwYWRkaW5nSW5saW5lRW5kPzogQ1NTUHJvcGVydGllc1sgJ3BhZGRpbmdJbmxpbmVFbmQnIF07XG59O1xuXG5jb25zdCBkaXNhYmxlZFN0eWxlcyA9ICggeyBkaXNhYmxlZCB9OiBJbnB1dFByb3BzICkgPT4ge1xuXHRpZiAoICEgZGlzYWJsZWQgKSByZXR1cm4gJyc7XG5cblx0cmV0dXJuIGNzcygge1xuXHRcdGNvbG9yOiBDT0xPUlMudWkudGV4dERpc2FibGVkLFxuXHR9ICk7XG59O1xuXG5jb25zdCBmb250U2l6ZVN0eWxlcyA9ICggeyBpbnB1dFNpemU6IHNpemUgfTogSW5wdXRQcm9wcyApID0+IHtcblx0Y29uc3Qgc2l6ZXMgPSB7XG5cdFx0ZGVmYXVsdDogJzEzcHgnLFxuXHRcdHNtYWxsOiAnMTFweCcsXG5cdFx0J19fdW5zdGFibGUtbGFyZ2UnOiAnMTNweCcsXG5cdH07XG5cblx0Y29uc3QgZm9udFNpemUgPSBzaXplc1sgc2l6ZSBhcyBTaXplIF0gfHwgc2l6ZXMuZGVmYXVsdDtcblx0Y29uc3QgZm9udFNpemVNb2JpbGUgPSAnMTZweCc7XG5cblx0aWYgKCAhIGZvbnRTaXplICkgcmV0dXJuICcnO1xuXG5cdHJldHVybiBjc3NgXG5cdFx0Zm9udC1zaXplOiAkeyBmb250U2l6ZU1vYmlsZSB9O1xuXG5cdFx0QG1lZGlhICggbWluLXdpZHRoOiA2MDBweCApIHtcblx0XHRcdGZvbnQtc2l6ZTogJHsgZm9udFNpemUgfTtcblx0XHR9XG5cdGA7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0U2l6ZUNvbmZpZyA9ICgge1xuXHRpbnB1dFNpemU6IHNpemUsXG5cdF9fbmV4dDM2cHhEZWZhdWx0U2l6ZSxcbn06IElucHV0UHJvcHMgKSA9PiB7XG5cdC8vIFBhZGRpbmdzIG1heSBiZSBvdmVycmlkZGVuIGJ5IHRoZSBjdXN0b20gcGFkZGluZ3MgcHJvcHMuXG5cdGNvbnN0IHNpemVzID0ge1xuXHRcdGRlZmF1bHQ6IHtcblx0XHRcdGhlaWdodDogMzYsXG5cdFx0XHRsaW5lSGVpZ2h0OiAxLFxuXHRcdFx0bWluSGVpZ2h0OiAzNixcblx0XHRcdHBhZGRpbmdMZWZ0OiBzcGFjZSggNCApLFxuXHRcdFx0cGFkZGluZ1JpZ2h0OiBzcGFjZSggNCApLFxuXHRcdH0sXG5cdFx0c21hbGw6IHtcblx0XHRcdGhlaWdodDogMjQsXG5cdFx0XHRsaW5lSGVpZ2h0OiAxLFxuXHRcdFx0bWluSGVpZ2h0OiAyNCxcblx0XHRcdHBhZGRpbmdMZWZ0OiBzcGFjZSggMiApLFxuXHRcdFx0cGFkZGluZ1JpZ2h0OiBzcGFjZSggMiApLFxuXHRcdH0sXG5cdFx0J19fdW5zdGFibGUtbGFyZ2UnOiB7XG5cdFx0XHRoZWlnaHQ6IDQwLFxuXHRcdFx0bGluZUhlaWdodDogMSxcblx0XHRcdG1pbkhlaWdodDogNDAsXG5cdFx0XHRwYWRkaW5nTGVmdDogc3BhY2UoIDQgKSxcblx0XHRcdHBhZGRpbmdSaWdodDogc3BhY2UoIDQgKSxcblx0XHR9LFxuXHR9O1xuXG5cdGlmICggISBfX25leHQzNnB4RGVmYXVsdFNpemUgKSB7XG5cdFx0c2l6ZXMuZGVmYXVsdCA9IHtcblx0XHRcdGhlaWdodDogMzAsXG5cdFx0XHRsaW5lSGVpZ2h0OiAxLFxuXHRcdFx0bWluSGVpZ2h0OiAzMCxcblx0XHRcdHBhZGRpbmdMZWZ0OiBzcGFjZSggMiApLFxuXHRcdFx0cGFkZGluZ1JpZ2h0OiBzcGFjZSggMiApLFxuXHRcdH07XG5cdH1cblxuXHRyZXR1cm4gc2l6ZXNbIHNpemUgYXMgU2l6ZSBdIHx8IHNpemVzLmRlZmF1bHQ7XG59O1xuXG5jb25zdCBzaXplU3R5bGVzID0gKCBwcm9wczogSW5wdXRQcm9wcyApID0+IHtcblx0cmV0dXJuIGNzcyggZ2V0U2l6ZUNvbmZpZyggcHJvcHMgKSApO1xufTtcblxuY29uc3QgY3VzdG9tUGFkZGluZ3MgPSAoIHtcblx0cGFkZGluZ0lubGluZVN0YXJ0LFxuXHRwYWRkaW5nSW5saW5lRW5kLFxufTogSW5wdXRQcm9wcyApID0+IHtcblx0cmV0dXJuIGNzcyggeyBwYWRkaW5nSW5saW5lU3RhcnQsIHBhZGRpbmdJbmxpbmVFbmQgfSApO1xufTtcblxuY29uc3QgZHJhZ1N0eWxlcyA9ICggeyBpc0RyYWdnaW5nLCBkcmFnQ3Vyc29yIH06IElucHV0UHJvcHMgKSA9PiB7XG5cdGxldCBkZWZhdWx0QXJyb3dTdHlsZXM6IFNlcmlhbGl6ZWRTdHlsZXMgfCB1bmRlZmluZWQ7XG5cdGxldCBhY3RpdmVEcmFnQ3Vyc29yU3R5bGVzOiBTZXJpYWxpemVkU3R5bGVzIHwgdW5kZWZpbmVkO1xuXG5cdGlmICggaXNEcmFnZ2luZyApIHtcblx0XHRkZWZhdWx0QXJyb3dTdHlsZXMgPSBjc3NgXG5cdFx0XHRjdXJzb3I6ICR7IGRyYWdDdXJzb3IgfTtcblx0XHRcdHVzZXItc2VsZWN0OiBub25lO1xuXG5cdFx0XHQmOjotd2Via2l0LW91dGVyLXNwaW4tYnV0dG9uLFxuXHRcdFx0Jjo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbiB7XG5cdFx0XHRcdC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZSAhaW1wb3J0YW50O1xuXHRcdFx0XHRtYXJnaW46IDAgIWltcG9ydGFudDtcblx0XHRcdH1cblx0XHRgO1xuXHR9XG5cblx0aWYgKCBpc0RyYWdnaW5nICYmIGRyYWdDdXJzb3IgKSB7XG5cdFx0YWN0aXZlRHJhZ0N1cnNvclN0eWxlcyA9IGNzc2Bcblx0XHRcdCY6YWN0aXZlIHtcblx0XHRcdFx0Y3Vyc29yOiAkeyBkcmFnQ3Vyc29yIH07XG5cdFx0XHR9XG5cdFx0YDtcblx0fVxuXG5cdHJldHVybiBjc3NgXG5cdFx0JHsgZGVmYXVsdEFycm93U3R5bGVzIH1cblx0XHQkeyBhY3RpdmVEcmFnQ3Vyc29yU3R5bGVzIH1cblx0YDtcbn07XG5cbi8vIFRPRE86IFJlc29sdmUgbmVlZCB0byB1c2UgJiYmIHRvIGluY3JlYXNlIHNwZWNpZmljaXR5XG4vLyBodHRwczovL2dpdGh1Yi5jb20vV29yZFByZXNzL2d1dGVuYmVyZy9pc3N1ZXMvMTg0ODNcblxuZXhwb3J0IGNvbnN0IElucHV0ID0gc3R5bGVkLmlucHV0PCBJbnB1dFByb3BzID5gXG5cdCYmJiB7XG5cdFx0YmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG5cdFx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0XHRib3JkZXI6IG5vbmU7XG5cdFx0Ym94LXNoYWRvdzogbm9uZSAhaW1wb3J0YW50O1xuXHRcdGNvbG9yOiAkeyBDT0xPUlMuZ3JheVsgOTAwIF0gfTtcblx0XHRkaXNwbGF5OiBibG9jaztcblx0XHRmb250LWZhbWlseTogaW5oZXJpdDtcblx0XHRtYXJnaW46IDA7XG5cdFx0b3V0bGluZTogbm9uZTtcblx0XHR3aWR0aDogMTAwJTtcblxuXHRcdCR7IGRyYWdTdHlsZXMgfVxuXHRcdCR7IGRpc2FibGVkU3R5bGVzIH1cblx0XHQkeyBmb250U2l6ZVN0eWxlcyB9XG5cdFx0JHsgc2l6ZVN0eWxlcyB9XG5cdFx0JHsgY3VzdG9tUGFkZGluZ3MgfVxuXG5cdFx0Jjo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciB7XG5cdFx0XHRsaW5lLWhlaWdodDogbm9ybWFsO1xuXHRcdH1cblx0fVxuYDtcblxuY29uc3QgQmFzZUxhYmVsID0gc3R5bGVkKCBUZXh0ICk8IHsgbGFiZWxQb3NpdGlvbj86IExhYmVsUG9zaXRpb24gfSA+YFxuXHQmJiYge1xuXHRcdCR7IGJhc2VMYWJlbFR5cG9ncmFwaHkgfTtcblxuXHRcdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdFx0ZGlzcGxheTogYmxvY2s7XG5cdFx0cGFkZGluZy10b3A6IDA7XG5cdFx0cGFkZGluZy1ib3R0b206IDA7XG5cdFx0bWF4LXdpZHRoOiAxMDAlO1xuXHRcdHotaW5kZXg6IDE7XG5cblx0XHRvdmVyZmxvdzogaGlkZGVuO1xuXHRcdHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuXHRcdHdoaXRlLXNwYWNlOiBub3dyYXA7XG5cdH1cbmA7XG5cbmV4cG9ydCBjb25zdCBMYWJlbCA9IChcblx0cHJvcHM6IFdvcmRQcmVzc0NvbXBvbmVudFByb3BzPFxuXHRcdHsgbGFiZWxQb3NpdGlvbj86IExhYmVsUG9zaXRpb247IGNoaWxkcmVuOiBSZWFjdE5vZGUgfSxcblx0XHQnbGFiZWwnLFxuXHRcdGZhbHNlXG5cdD5cbikgPT4gPEJhc2VMYWJlbCB7IC4uLnByb3BzIH0gYXM9XCJsYWJlbFwiIC8+O1xuXG5leHBvcnQgY29uc3QgTGFiZWxXcmFwcGVyID0gc3R5bGVkKCBGbGV4SXRlbSApYFxuXHRtYXgtd2lkdGg6IGNhbGMoIDEwMCUgLSAxMHB4ICk7XG5gO1xuXG50eXBlIEJhY2tkcm9wUHJvcHMgPSB7XG5cdGRpc2FibGVkPzogYm9vbGVhbjtcblx0aXNGb2N1c2VkPzogYm9vbGVhbjtcbn07XG5cbmNvbnN0IGJhY2tkcm9wRm9jdXNlZFN0eWxlcyA9ICgge1xuXHRkaXNhYmxlZCxcblx0aXNGb2N1c2VkLFxufTogQmFja2Ryb3BQcm9wcyApOiBTZXJpYWxpemVkU3R5bGVzID0+IHtcblx0bGV0IGJvcmRlckNvbG9yID0gaXNGb2N1c2VkID8gQ09MT1JTLnVpLmJvcmRlckZvY3VzIDogQ09MT1JTLnVpLmJvcmRlcjtcblxuXHRsZXQgYm94U2hhZG93O1xuXHRsZXQgb3V0bGluZTtcblx0bGV0IG91dGxpbmVPZmZzZXQ7XG5cblx0aWYgKCBpc0ZvY3VzZWQgKSB7XG5cdFx0Ym94U2hhZG93ID0gQ09ORklHLmNvbnRyb2xCb3hTaGFkb3dGb2N1cztcblx0XHQvLyBXaW5kb3dzIEhpZ2ggQ29udHJhc3QgbW9kZSB3aWxsIHNob3cgdGhpcyBvdXRsaW5lLCBidXQgbm90IHRoZSBib3gtc2hhZG93LlxuXHRcdG91dGxpbmUgPSBgMnB4IHNvbGlkIHRyYW5zcGFyZW50YDtcblx0XHRvdXRsaW5lT2Zmc2V0ID0gYC0ycHhgO1xuXHR9XG5cblx0aWYgKCBkaXNhYmxlZCApIHtcblx0XHRib3JkZXJDb2xvciA9IENPTE9SUy51aS5ib3JkZXJEaXNhYmxlZDtcblx0fVxuXG5cdHJldHVybiBjc3MoIHtcblx0XHRib3hTaGFkb3csXG5cdFx0Ym9yZGVyQ29sb3IsXG5cdFx0Ym9yZGVyU3R5bGU6ICdzb2xpZCcsXG5cdFx0Ym9yZGVyV2lkdGg6IDEsXG5cdFx0b3V0bGluZSxcblx0XHRvdXRsaW5lT2Zmc2V0LFxuXHR9ICk7XG59O1xuXG5leHBvcnQgY29uc3QgQmFja2Ryb3BVSSA9IHN0eWxlZC5kaXY8IEJhY2tkcm9wUHJvcHMgPmBcblx0JiYmIHtcblx0XHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRcdGJvcmRlci1yYWRpdXM6IGluaGVyaXQ7XG5cdFx0Ym90dG9tOiAwO1xuXHRcdGxlZnQ6IDA7XG5cdFx0bWFyZ2luOiAwO1xuXHRcdHBhZGRpbmc6IDA7XG5cdFx0cG9pbnRlci1ldmVudHM6IG5vbmU7XG5cdFx0cG9zaXRpb246IGFic29sdXRlO1xuXHRcdHJpZ2h0OiAwO1xuXHRcdHRvcDogMDtcblxuXHRcdCR7IGJhY2tkcm9wRm9jdXNlZFN0eWxlcyB9XG5cdFx0JHsgcnRsKCB7IHBhZGRpbmdMZWZ0OiAyIH0gKSB9XG5cdH1cbmA7XG5cbmV4cG9ydCBjb25zdCBQcmVmaXggPSBzdHlsZWQuc3BhbmBcblx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0ZGlzcGxheTogYmxvY2s7XG5gO1xuXG5leHBvcnQgY29uc3QgU3VmZml4ID0gc3R5bGVkLnNwYW5gXG5cdGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cdGFsaWduLXNlbGY6IHN0cmV0Y2g7XG5cdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdGRpc3BsYXk6IGZsZXg7XG5gO1xuIl19 */");
  }
  return /*#__PURE__*/css(defaultArrowStyles, " ", activeDragCursorStyles, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:dragStyles;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};

// TODO: Resolve need to use &&& to increase specificity
// https://github.com/WordPress/gutenberg/issues/18483

export const Input = _styled("input", process.env.NODE_ENV === "production" ? {
  target: "em5sgkm5"
} : {
  target: "em5sgkm5",
  label: "Input"
})("&&&{background-color:transparent;box-sizing:border-box;border:none;box-shadow:none!important;color:", COLORS.gray[900], ";display:block;font-family:inherit;margin:0;outline:none;width:100%;", dragStyles, " ", disabledStyles, " ", fontSizeStyles, " ", sizeStyles, " ", customPaddings, " &::-webkit-input-placeholder{line-height:normal;}}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const BaseLabel = /*#__PURE__*/_styled(Text, process.env.NODE_ENV === "production" ? {
  target: "em5sgkm4"
} : {
  target: "em5sgkm4",
  label: "BaseLabel"
})("&&&{", baseLabelTypography, ";box-sizing:border-box;display:block;padding-top:0;padding-bottom:0;max-width:100%;z-index:1;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
export const Label = props => createElement(BaseLabel, {
  ...props,
  as: "label"
});
export const LabelWrapper = /*#__PURE__*/_styled(FlexItem, process.env.NODE_ENV === "production" ? {
  target: "em5sgkm3"
} : {
  target: "em5sgkm3",
  label: "LabelWrapper"
})(process.env.NODE_ENV === "production" ? {
  name: "1b6uupn",
  styles: "max-width:calc( 100% - 10px )"
} : {
  name: "1b6uupn",
  styles: "max-width:calc( 100% - 10px )",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvaW5wdXQtY29udHJvbC9zdHlsZXMvaW5wdXQtY29udHJvbC1zdHlsZXMudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlROEMiLCJmaWxlIjoiQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy9pbnB1dC1jb250cm9sL3N0eWxlcy9pbnB1dC1jb250cm9sLXN0eWxlcy50c3giLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgdHlwZSB7IFNlcmlhbGl6ZWRTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgdHlwZSB7IENTU1Byb3BlcnRpZXMsIFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcblxuLyoqXG4gKiBJbnRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHR5cGUgeyBXb3JkUHJlc3NDb21wb25lbnRQcm9wcyB9IGZyb20gJy4uLy4uL3VpL2NvbnRleHQnO1xuaW1wb3J0IHsgRmxleCwgRmxleEl0ZW0gfSBmcm9tICcuLi8uLi9mbGV4JztcbmltcG9ydCB7IFRleHQgfSBmcm9tICcuLi8uLi90ZXh0JztcbmltcG9ydCB7IGJhc2VMYWJlbFR5cG9ncmFwaHksIENPTE9SUywgQ09ORklHLCBydGwgfSBmcm9tICcuLi8uLi91dGlscyc7XG5pbXBvcnQgdHlwZSB7IExhYmVsUG9zaXRpb24sIFNpemUgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBzcGFjZSB9IGZyb20gJy4uLy4uL3VpL3V0aWxzL3NwYWNlJztcblxudHlwZSBDb250YWluZXJQcm9wcyA9IHtcblx0ZGlzYWJsZWQ/OiBib29sZWFuO1xuXHRoaWRlTGFiZWw/OiBib29sZWFuO1xuXHRfX3Vuc3RhYmxlSW5wdXRXaWR0aD86IENTU1Byb3BlcnRpZXNbICd3aWR0aCcgXTtcblx0bGFiZWxQb3NpdGlvbj86IExhYmVsUG9zaXRpb247XG59O1xuXG50eXBlIFJvb3RQcm9wcyA9IHtcblx0aXNGb2N1c2VkPzogYm9vbGVhbjtcblx0bGFiZWxQb3NpdGlvbj86IExhYmVsUG9zaXRpb247XG59O1xuXG5jb25zdCByb290Rm9jdXNlZFN0eWxlcyA9ICggeyBpc0ZvY3VzZWQgfTogUm9vdFByb3BzICkgPT4ge1xuXHRpZiAoICEgaXNGb2N1c2VkICkgcmV0dXJuICcnO1xuXG5cdHJldHVybiBjc3MoIHsgekluZGV4OiAxIH0gKTtcbn07XG5cbmV4cG9ydCBjb25zdCBSb290ID0gc3R5bGVkKCBGbGV4ICk8IFJvb3RQcm9wcyA+YFxuXHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cdGJvcmRlci1yYWRpdXM6IDJweDtcblx0cGFkZGluZy10b3A6IDA7XG5cdCR7IHJvb3RGb2N1c2VkU3R5bGVzIH1cbmA7XG5cbmNvbnN0IGNvbnRhaW5lckRpc2FibGVkU3R5bGVzID0gKCB7IGRpc2FibGVkIH06IENvbnRhaW5lclByb3BzICkgPT4ge1xuXHRjb25zdCBiYWNrZ3JvdW5kQ29sb3IgPSBkaXNhYmxlZFxuXHRcdD8gQ09MT1JTLnVpLmJhY2tncm91bmREaXNhYmxlZFxuXHRcdDogQ09MT1JTLnVpLmJhY2tncm91bmQ7XG5cblx0cmV0dXJuIGNzcyggeyBiYWNrZ3JvdW5kQ29sb3IgfSApO1xufTtcblxuY29uc3QgY29udGFpbmVyV2lkdGhTdHlsZXMgPSAoIHtcblx0X191bnN0YWJsZUlucHV0V2lkdGgsXG5cdGxhYmVsUG9zaXRpb24sXG59OiBDb250YWluZXJQcm9wcyApID0+IHtcblx0aWYgKCAhIF9fdW5zdGFibGVJbnB1dFdpZHRoICkgcmV0dXJuIGNzcyggeyB3aWR0aDogJzEwMCUnIH0gKTtcblxuXHRpZiAoIGxhYmVsUG9zaXRpb24gPT09ICdzaWRlJyApIHJldHVybiAnJztcblxuXHRpZiAoIGxhYmVsUG9zaXRpb24gPT09ICdlZGdlJyApIHtcblx0XHRyZXR1cm4gY3NzKCB7XG5cdFx0XHRmbGV4OiBgMCAwICR7IF9fdW5zdGFibGVJbnB1dFdpZHRoIH1gLFxuXHRcdH0gKTtcblx0fVxuXG5cdHJldHVybiBjc3MoIHsgd2lkdGg6IF9fdW5zdGFibGVJbnB1dFdpZHRoIH0gKTtcbn07XG5cbmV4cG9ydCBjb25zdCBDb250YWluZXIgPSBzdHlsZWQuZGl2PCBDb250YWluZXJQcm9wcyA+YFxuXHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRib3JkZXItcmFkaXVzOiBpbmhlcml0O1xuXHRkaXNwbGF5OiBmbGV4O1xuXHRmbGV4OiAxO1xuXHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cblx0JHsgY29udGFpbmVyRGlzYWJsZWRTdHlsZXMgfVxuXHQkeyBjb250YWluZXJXaWR0aFN0eWxlcyB9XG5gO1xuXG50eXBlIElucHV0UHJvcHMgPSB7XG5cdF9fbmV4dDM2cHhEZWZhdWx0U2l6ZT86IGJvb2xlYW47XG5cdGRpc2FibGVkPzogYm9vbGVhbjtcblx0aW5wdXRTaXplPzogU2l6ZTtcblx0aXNEcmFnZ2luZz86IGJvb2xlYW47XG5cdGRyYWdDdXJzb3I/OiBDU1NQcm9wZXJ0aWVzWyAnY3Vyc29yJyBdO1xuXHRwYWRkaW5nSW5saW5lU3RhcnQ/OiBDU1NQcm9wZXJ0aWVzWyAncGFkZGluZ0lubGluZVN0YXJ0JyBdO1xuXHRwYWRkaW5nSW5saW5lRW5kPzogQ1NTUHJvcGVydGllc1sgJ3BhZGRpbmdJbmxpbmVFbmQnIF07XG59O1xuXG5jb25zdCBkaXNhYmxlZFN0eWxlcyA9ICggeyBkaXNhYmxlZCB9OiBJbnB1dFByb3BzICkgPT4ge1xuXHRpZiAoICEgZGlzYWJsZWQgKSByZXR1cm4gJyc7XG5cblx0cmV0dXJuIGNzcygge1xuXHRcdGNvbG9yOiBDT0xPUlMudWkudGV4dERpc2FibGVkLFxuXHR9ICk7XG59O1xuXG5jb25zdCBmb250U2l6ZVN0eWxlcyA9ICggeyBpbnB1dFNpemU6IHNpemUgfTogSW5wdXRQcm9wcyApID0+IHtcblx0Y29uc3Qgc2l6ZXMgPSB7XG5cdFx0ZGVmYXVsdDogJzEzcHgnLFxuXHRcdHNtYWxsOiAnMTFweCcsXG5cdFx0J19fdW5zdGFibGUtbGFyZ2UnOiAnMTNweCcsXG5cdH07XG5cblx0Y29uc3QgZm9udFNpemUgPSBzaXplc1sgc2l6ZSBhcyBTaXplIF0gfHwgc2l6ZXMuZGVmYXVsdDtcblx0Y29uc3QgZm9udFNpemVNb2JpbGUgPSAnMTZweCc7XG5cblx0aWYgKCAhIGZvbnRTaXplICkgcmV0dXJuICcnO1xuXG5cdHJldHVybiBjc3NgXG5cdFx0Zm9udC1zaXplOiAkeyBmb250U2l6ZU1vYmlsZSB9O1xuXG5cdFx0QG1lZGlhICggbWluLXdpZHRoOiA2MDBweCApIHtcblx0XHRcdGZvbnQtc2l6ZTogJHsgZm9udFNpemUgfTtcblx0XHR9XG5cdGA7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0U2l6ZUNvbmZpZyA9ICgge1xuXHRpbnB1dFNpemU6IHNpemUsXG5cdF9fbmV4dDM2cHhEZWZhdWx0U2l6ZSxcbn06IElucHV0UHJvcHMgKSA9PiB7XG5cdC8vIFBhZGRpbmdzIG1heSBiZSBvdmVycmlkZGVuIGJ5IHRoZSBjdXN0b20gcGFkZGluZ3MgcHJvcHMuXG5cdGNvbnN0IHNpemVzID0ge1xuXHRcdGRlZmF1bHQ6IHtcblx0XHRcdGhlaWdodDogMzYsXG5cdFx0XHRsaW5lSGVpZ2h0OiAxLFxuXHRcdFx0bWluSGVpZ2h0OiAzNixcblx0XHRcdHBhZGRpbmdMZWZ0OiBzcGFjZSggNCApLFxuXHRcdFx0cGFkZGluZ1JpZ2h0OiBzcGFjZSggNCApLFxuXHRcdH0sXG5cdFx0c21hbGw6IHtcblx0XHRcdGhlaWdodDogMjQsXG5cdFx0XHRsaW5lSGVpZ2h0OiAxLFxuXHRcdFx0bWluSGVpZ2h0OiAyNCxcblx0XHRcdHBhZGRpbmdMZWZ0OiBzcGFjZSggMiApLFxuXHRcdFx0cGFkZGluZ1JpZ2h0OiBzcGFjZSggMiApLFxuXHRcdH0sXG5cdFx0J19fdW5zdGFibGUtbGFyZ2UnOiB7XG5cdFx0XHRoZWlnaHQ6IDQwLFxuXHRcdFx0bGluZUhlaWdodDogMSxcblx0XHRcdG1pbkhlaWdodDogNDAsXG5cdFx0XHRwYWRkaW5nTGVmdDogc3BhY2UoIDQgKSxcblx0XHRcdHBhZGRpbmdSaWdodDogc3BhY2UoIDQgKSxcblx0XHR9LFxuXHR9O1xuXG5cdGlmICggISBfX25leHQzNnB4RGVmYXVsdFNpemUgKSB7XG5cdFx0c2l6ZXMuZGVmYXVsdCA9IHtcblx0XHRcdGhlaWdodDogMzAsXG5cdFx0XHRsaW5lSGVpZ2h0OiAxLFxuXHRcdFx0bWluSGVpZ2h0OiAzMCxcblx0XHRcdHBhZGRpbmdMZWZ0OiBzcGFjZSggMiApLFxuXHRcdFx0cGFkZGluZ1JpZ2h0OiBzcGFjZSggMiApLFxuXHRcdH07XG5cdH1cblxuXHRyZXR1cm4gc2l6ZXNbIHNpemUgYXMgU2l6ZSBdIHx8IHNpemVzLmRlZmF1bHQ7XG59O1xuXG5jb25zdCBzaXplU3R5bGVzID0gKCBwcm9wczogSW5wdXRQcm9wcyApID0+IHtcblx0cmV0dXJuIGNzcyggZ2V0U2l6ZUNvbmZpZyggcHJvcHMgKSApO1xufTtcblxuY29uc3QgY3VzdG9tUGFkZGluZ3MgPSAoIHtcblx0cGFkZGluZ0lubGluZVN0YXJ0LFxuXHRwYWRkaW5nSW5saW5lRW5kLFxufTogSW5wdXRQcm9wcyApID0+IHtcblx0cmV0dXJuIGNzcyggeyBwYWRkaW5nSW5saW5lU3RhcnQsIHBhZGRpbmdJbmxpbmVFbmQgfSApO1xufTtcblxuY29uc3QgZHJhZ1N0eWxlcyA9ICggeyBpc0RyYWdnaW5nLCBkcmFnQ3Vyc29yIH06IElucHV0UHJvcHMgKSA9PiB7XG5cdGxldCBkZWZhdWx0QXJyb3dTdHlsZXM6IFNlcmlhbGl6ZWRTdHlsZXMgfCB1bmRlZmluZWQ7XG5cdGxldCBhY3RpdmVEcmFnQ3Vyc29yU3R5bGVzOiBTZXJpYWxpemVkU3R5bGVzIHwgdW5kZWZpbmVkO1xuXG5cdGlmICggaXNEcmFnZ2luZyApIHtcblx0XHRkZWZhdWx0QXJyb3dTdHlsZXMgPSBjc3NgXG5cdFx0XHRjdXJzb3I6ICR7IGRyYWdDdXJzb3IgfTtcblx0XHRcdHVzZXItc2VsZWN0OiBub25lO1xuXG5cdFx0XHQmOjotd2Via2l0LW91dGVyLXNwaW4tYnV0dG9uLFxuXHRcdFx0Jjo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbiB7XG5cdFx0XHRcdC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZSAhaW1wb3J0YW50O1xuXHRcdFx0XHRtYXJnaW46IDAgIWltcG9ydGFudDtcblx0XHRcdH1cblx0XHRgO1xuXHR9XG5cblx0aWYgKCBpc0RyYWdnaW5nICYmIGRyYWdDdXJzb3IgKSB7XG5cdFx0YWN0aXZlRHJhZ0N1cnNvclN0eWxlcyA9IGNzc2Bcblx0XHRcdCY6YWN0aXZlIHtcblx0XHRcdFx0Y3Vyc29yOiAkeyBkcmFnQ3Vyc29yIH07XG5cdFx0XHR9XG5cdFx0YDtcblx0fVxuXG5cdHJldHVybiBjc3NgXG5cdFx0JHsgZGVmYXVsdEFycm93U3R5bGVzIH1cblx0XHQkeyBhY3RpdmVEcmFnQ3Vyc29yU3R5bGVzIH1cblx0YDtcbn07XG5cbi8vIFRPRE86IFJlc29sdmUgbmVlZCB0byB1c2UgJiYmIHRvIGluY3JlYXNlIHNwZWNpZmljaXR5XG4vLyBodHRwczovL2dpdGh1Yi5jb20vV29yZFByZXNzL2d1dGVuYmVyZy9pc3N1ZXMvMTg0ODNcblxuZXhwb3J0IGNvbnN0IElucHV0ID0gc3R5bGVkLmlucHV0PCBJbnB1dFByb3BzID5gXG5cdCYmJiB7XG5cdFx0YmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG5cdFx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0XHRib3JkZXI6IG5vbmU7XG5cdFx0Ym94LXNoYWRvdzogbm9uZSAhaW1wb3J0YW50O1xuXHRcdGNvbG9yOiAkeyBDT0xPUlMuZ3JheVsgOTAwIF0gfTtcblx0XHRkaXNwbGF5OiBibG9jaztcblx0XHRmb250LWZhbWlseTogaW5oZXJpdDtcblx0XHRtYXJnaW46IDA7XG5cdFx0b3V0bGluZTogbm9uZTtcblx0XHR3aWR0aDogMTAwJTtcblxuXHRcdCR7IGRyYWdTdHlsZXMgfVxuXHRcdCR7IGRpc2FibGVkU3R5bGVzIH1cblx0XHQkeyBmb250U2l6ZVN0eWxlcyB9XG5cdFx0JHsgc2l6ZVN0eWxlcyB9XG5cdFx0JHsgY3VzdG9tUGFkZGluZ3MgfVxuXG5cdFx0Jjo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciB7XG5cdFx0XHRsaW5lLWhlaWdodDogbm9ybWFsO1xuXHRcdH1cblx0fVxuYDtcblxuY29uc3QgQmFzZUxhYmVsID0gc3R5bGVkKCBUZXh0ICk8IHsgbGFiZWxQb3NpdGlvbj86IExhYmVsUG9zaXRpb24gfSA+YFxuXHQmJiYge1xuXHRcdCR7IGJhc2VMYWJlbFR5cG9ncmFwaHkgfTtcblxuXHRcdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdFx0ZGlzcGxheTogYmxvY2s7XG5cdFx0cGFkZGluZy10b3A6IDA7XG5cdFx0cGFkZGluZy1ib3R0b206IDA7XG5cdFx0bWF4LXdpZHRoOiAxMDAlO1xuXHRcdHotaW5kZXg6IDE7XG5cblx0XHRvdmVyZmxvdzogaGlkZGVuO1xuXHRcdHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuXHRcdHdoaXRlLXNwYWNlOiBub3dyYXA7XG5cdH1cbmA7XG5cbmV4cG9ydCBjb25zdCBMYWJlbCA9IChcblx0cHJvcHM6IFdvcmRQcmVzc0NvbXBvbmVudFByb3BzPFxuXHRcdHsgbGFiZWxQb3NpdGlvbj86IExhYmVsUG9zaXRpb247IGNoaWxkcmVuOiBSZWFjdE5vZGUgfSxcblx0XHQnbGFiZWwnLFxuXHRcdGZhbHNlXG5cdD5cbikgPT4gPEJhc2VMYWJlbCB7IC4uLnByb3BzIH0gYXM9XCJsYWJlbFwiIC8+O1xuXG5leHBvcnQgY29uc3QgTGFiZWxXcmFwcGVyID0gc3R5bGVkKCBGbGV4SXRlbSApYFxuXHRtYXgtd2lkdGg6IGNhbGMoIDEwMCUgLSAxMHB4ICk7XG5gO1xuXG50eXBlIEJhY2tkcm9wUHJvcHMgPSB7XG5cdGRpc2FibGVkPzogYm9vbGVhbjtcblx0aXNGb2N1c2VkPzogYm9vbGVhbjtcbn07XG5cbmNvbnN0IGJhY2tkcm9wRm9jdXNlZFN0eWxlcyA9ICgge1xuXHRkaXNhYmxlZCxcblx0aXNGb2N1c2VkLFxufTogQmFja2Ryb3BQcm9wcyApOiBTZXJpYWxpemVkU3R5bGVzID0+IHtcblx0bGV0IGJvcmRlckNvbG9yID0gaXNGb2N1c2VkID8gQ09MT1JTLnVpLmJvcmRlckZvY3VzIDogQ09MT1JTLnVpLmJvcmRlcjtcblxuXHRsZXQgYm94U2hhZG93O1xuXHRsZXQgb3V0bGluZTtcblx0bGV0IG91dGxpbmVPZmZzZXQ7XG5cblx0aWYgKCBpc0ZvY3VzZWQgKSB7XG5cdFx0Ym94U2hhZG93ID0gQ09ORklHLmNvbnRyb2xCb3hTaGFkb3dGb2N1cztcblx0XHQvLyBXaW5kb3dzIEhpZ2ggQ29udHJhc3QgbW9kZSB3aWxsIHNob3cgdGhpcyBvdXRsaW5lLCBidXQgbm90IHRoZSBib3gtc2hhZG93LlxuXHRcdG91dGxpbmUgPSBgMnB4IHNvbGlkIHRyYW5zcGFyZW50YDtcblx0XHRvdXRsaW5lT2Zmc2V0ID0gYC0ycHhgO1xuXHR9XG5cblx0aWYgKCBkaXNhYmxlZCApIHtcblx0XHRib3JkZXJDb2xvciA9IENPTE9SUy51aS5ib3JkZXJEaXNhYmxlZDtcblx0fVxuXG5cdHJldHVybiBjc3MoIHtcblx0XHRib3hTaGFkb3csXG5cdFx0Ym9yZGVyQ29sb3IsXG5cdFx0Ym9yZGVyU3R5bGU6ICdzb2xpZCcsXG5cdFx0Ym9yZGVyV2lkdGg6IDEsXG5cdFx0b3V0bGluZSxcblx0XHRvdXRsaW5lT2Zmc2V0LFxuXHR9ICk7XG59O1xuXG5leHBvcnQgY29uc3QgQmFja2Ryb3BVSSA9IHN0eWxlZC5kaXY8IEJhY2tkcm9wUHJvcHMgPmBcblx0JiYmIHtcblx0XHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRcdGJvcmRlci1yYWRpdXM6IGluaGVyaXQ7XG5cdFx0Ym90dG9tOiAwO1xuXHRcdGxlZnQ6IDA7XG5cdFx0bWFyZ2luOiAwO1xuXHRcdHBhZGRpbmc6IDA7XG5cdFx0cG9pbnRlci1ldmVudHM6IG5vbmU7XG5cdFx0cG9zaXRpb246IGFic29sdXRlO1xuXHRcdHJpZ2h0OiAwO1xuXHRcdHRvcDogMDtcblxuXHRcdCR7IGJhY2tkcm9wRm9jdXNlZFN0eWxlcyB9XG5cdFx0JHsgcnRsKCB7IHBhZGRpbmdMZWZ0OiAyIH0gKSB9XG5cdH1cbmA7XG5cbmV4cG9ydCBjb25zdCBQcmVmaXggPSBzdHlsZWQuc3BhbmBcblx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0ZGlzcGxheTogYmxvY2s7XG5gO1xuXG5leHBvcnQgY29uc3QgU3VmZml4ID0gc3R5bGVkLnNwYW5gXG5cdGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cdGFsaWduLXNlbGY6IHN0cmV0Y2g7XG5cdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdGRpc3BsYXk6IGZsZXg7XG5gO1xuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const backdropFocusedStyles = ({
  disabled,
  isFocused
}) => {
  let borderColor = isFocused ? COLORS.ui.borderFocus : COLORS.ui.border;
  let boxShadow;
  let outline;
  let outlineOffset;
  if (isFocused) {
    boxShadow = CONFIG.controlBoxShadowFocus;
    // Windows High Contrast mode will show this outline, but not the box-shadow.
    outline = `2px solid transparent`;
    outlineOffset = `-2px`;
  }
  if (disabled) {
    borderColor = COLORS.ui.borderDisabled;
  }
  return /*#__PURE__*/css({
    boxShadow,
    borderColor,
    borderStyle: 'solid',
    borderWidth: 1,
    outline,
    outlineOffset
  }, process.env.NODE_ENV === "production" ? "" : ";label:backdropFocusedStyles;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};
export const BackdropUI = _styled("div", process.env.NODE_ENV === "production" ? {
  target: "em5sgkm2"
} : {
  target: "em5sgkm2",
  label: "BackdropUI"
})("&&&{box-sizing:border-box;border-radius:inherit;bottom:0;left:0;margin:0;padding:0;pointer-events:none;position:absolute;right:0;top:0;", backdropFocusedStyles, " ", rtl({
  paddingLeft: 2
}), ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
export const Prefix = _styled("span", process.env.NODE_ENV === "production" ? {
  target: "em5sgkm1"
} : {
  target: "em5sgkm1",
  label: "Prefix"
})(process.env.NODE_ENV === "production" ? {
  name: "pvvbxf",
  styles: "box-sizing:border-box;display:block"
} : {
  name: "pvvbxf",
  styles: "box-sizing:border-box;display:block",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
export const Suffix = _styled("span", process.env.NODE_ENV === "production" ? {
  target: "em5sgkm0"
} : {
  target: "em5sgkm0",
  label: "Suffix"
})(process.env.NODE_ENV === "production" ? {
  name: "jgf79h",
  styles: "align-items:center;align-self:stretch;box-sizing:border-box;display:flex"
} : {
  name: "jgf79h",
  styles: "align-items:center;align-self:stretch;box-sizing:border-box;display:flex",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
//# sourceMappingURL=input-control-styles.js.map