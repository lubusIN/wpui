import type { CompositeContainerOptions } from "../composite/composite-container.js";
import type { As, Props } from "../utils/types.js";
import type { ToolbarItemOptions } from "./toolbar-item.js";
/**
 * Returns props to create a `ToolbarContainer` component.
 * @see https://ariakit.org/components/toolbar
 * @example
 * ```jsx
 * const store = useToolbarStore();
 * const props = useToolbarContainer({ store });
 * <Toolbar store={store}>
 *   <Role {...props}>
 *     <input type="text" />
 *   </Role>
 * </Toolbar>
 * ```
 */
export declare const useToolbarContainer: import("../utils/types.js").Hook<ToolbarContainerOptions<"div">>;
/**
 * Renders a container for interactive widgets inside toolbar items.
 * @see https://ariakit.org/components/toolbar
 * @example
 * ```jsx
 * const toolbar = useToolbarStore();
 * <Toolbar store={toolbar}>
 *   <ToolbarContainer>
 *     <input type="text" />
 *   </ToolbarContainer>
 * </Toolbar>
 * ```
 */
export declare const ToolbarContainer: import("../utils/types.js").Component<ToolbarContainerOptions<"div">>;
export interface ToolbarContainerOptions<T extends As = "div"> extends ToolbarItemOptions<T>, CompositeContainerOptions<T> {
}
export type ToolbarContainerProps<T extends As = "div"> = Props<ToolbarContainerOptions<T>>;
