import type { As, Options, Props } from "../utils/types.js";
import type { FormStore } from "./form-store.js";
/**
 * Returns props to create a `Form` component.
 * @see https://ariakit.org/components/form
 * @example
 * ```jsx
 * const store = useFormStore();
 * const props = useForm({ store, render: <form /> });
 * <Role {...props} />
 * ```
 */
export declare const useForm: import("../utils/types.js").Hook<FormOptions<"form">>;
/**
 * Renders a form element.
 * @see https://ariakit.org/components/form
 * @example
 * ```jsx
 * const form = useFormStore({ defaultValues: { username: "johndoe" } });
 * <Form store={form}>
 *   <FormLabel name={form.names.username}>Username</FormLabel>
 *   <FormInput name={form.names.username} />
 * </Form>
 * ```
 */
export declare const Form: import("../utils/types.js").Component<FormOptions<"form">>;
export interface FormOptions<T extends As = "form"> extends Options<T> {
    /**
     * Object returned by the `useFormStore` hook.
     */
    store: FormStore;
    /**
     * Whether the form should trigger the validation callbacks when values
     * change.
     * @default true
     */
    validateOnChange?: boolean;
    /**
     * Whether the form should trigger the validation callbacks when form fields
     * are blurred.
     * @default true
     */
    validateOnBlur?: boolean;
    /**
     * Whether the form store should be reset when the form element gets
     * unmounted.
     * @default false
     */
    resetOnUnmount?: boolean;
    /**
     * Whether the form store should be reset when the form gets successfully
     * submitted.
     * @default true
     */
    resetOnSubmit?: boolean;
    /**
     * Whether the form should automatically focus the first invalid field when
     * the form gets submitted.
     * @default true
     */
    autoFocusOnSubmit?: boolean;
}
export type FormProps<T extends As = "form"> = Props<FormOptions<T>>;
