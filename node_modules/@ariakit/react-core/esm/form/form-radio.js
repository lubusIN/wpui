import {
  useFormField
} from "../__chunks/5QHNNZNE.js";
import {
  FormContext
} from "../__chunks/P3I4MECH.js";
import {
  useRadio
} from "../__chunks/UVKFBOMX.js";
import "../__chunks/6I2PARRP.js";
import "../__chunks/FVD2NJZN.js";
import "../__chunks/P4RGQGTG.js";
import "../__chunks/VFNGSUSF.js";
import "../__chunks/T3DJZG63.js";
import "../__chunks/OXPV2NBK.js";
import "../__chunks/WJ37OVG2.js";
import "../__chunks/MYID4V27.js";
import "../__chunks/BMLNRUFQ.js";
import {
  createElement,
  createHook,
  createMemoComponent
} from "../__chunks/NQJBHION.js";
import "../__chunks/P63NRZ4A.js";
import {
  useEvent
} from "../__chunks/J7Q2EO23.js";
import "../__chunks/CP3U4HPL.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "../__chunks/PNRLI7OV.js";

// src/form/form-radio.ts
import { useContext } from "react";
import { invariant } from "@ariakit/core/utils/misc";
var useFormRadio = createHook(
  (_a) => {
    var _b = _a, { store, name: nameProp, value } = _b, props = __objRest(_b, ["store", "name", "value"]);
    const context = useContext(FormContext);
    store = store || context;
    invariant(
      store,
      process.env.NODE_ENV !== "production" && "FormRadio must be wrapped in a Form component"
    );
    const name = `${nameProp}`;
    const onChangeProp = props.onChange;
    const onChange = useEvent((event) => {
      onChangeProp == null ? void 0 : onChangeProp(event);
      if (event.defaultPrevented)
        return;
      store == null ? void 0 : store.setValue(name, value);
    });
    const checkedProp = props.checked;
    const checked = store.useState(
      () => checkedProp != null ? checkedProp : (store == null ? void 0 : store.getValue(name)) === value
    );
    props = __spreadProps(__spreadValues({}, props), {
      checked,
      onChange
    });
    props = useRadio(__spreadValues({ value }, props));
    props = useFormField(__spreadValues({
      store,
      name,
      "aria-labelledby": void 0
    }, props));
    return props;
  }
);
var FormRadio = createMemoComponent((props) => {
  const htmlProps = useFormRadio(props);
  return createElement("input", htmlProps);
});
if (process.env.NODE_ENV !== "production") {
  FormRadio.displayName = "FormRadio";
}
export {
  FormRadio,
  useFormRadio
};
