/// <reference types="react" />
import type { DialogInputEvent } from './types';
declare const _default: import("../ui/context").WordPressComponent<import("react").ElementType<any>, {
    children: import("react").ReactNode;
    onConfirm: (event: DialogInputEvent) => void;
    confirmButtonText?: string | undefined;
    cancelButtonText?: string | undefined;
} & {
    onCancel: (event: DialogInputEvent) => void;
    isOpen: boolean;
} & Omit<Pick<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof import("react").HTMLAttributes<HTMLDivElement>>, "as" | "onCancel" | "isOpen" | keyof {
    children: import("react").ReactNode;
    onConfirm: (event: DialogInputEvent) => void;
    confirmButtonText?: string | undefined;
    cancelButtonText?: string | undefined;
}> & import("react").RefAttributes<any>, boolean> | import("../ui/context").WordPressComponent<import("react").ElementType<any>, {
    children: import("react").ReactNode;
    onConfirm: (event: DialogInputEvent) => void;
    confirmButtonText?: string | undefined;
    cancelButtonText?: string | undefined;
} & {
    onCancel?: ((event: DialogInputEvent) => void) | undefined;
    isOpen?: undefined;
} & Omit<Pick<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof import("react").HTMLAttributes<HTMLDivElement>>, "as" | "onCancel" | "isOpen" | keyof {
    children: import("react").ReactNode;
    onConfirm: (event: DialogInputEvent) => void;
    confirmButtonText?: string | undefined;
    cancelButtonText?: string | undefined;
}> & import("react").RefAttributes<any>, boolean>;
export default _default;
//# sourceMappingURL=component.d.ts.map