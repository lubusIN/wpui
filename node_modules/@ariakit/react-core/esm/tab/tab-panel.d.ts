import type { CollectionItemOptions } from "../collection/collection-item.js";
import type { DisclosureContentOptions } from "../disclosure/disclosure-content.js";
import type { FocusableOptions } from "../focusable/focusable.js";
import type { As, Props } from "../utils/types.js";
import type { TabStore } from "./tab-store.js";
/**
 * Returns props to create a `TabPanel` component.
 * @see https://ariakit.org/components/tab
 * @example
 * ```jsx
 * const store = useTabStore();
 * const props = useTabPanel({ store });
 * <TabList store={store}>
 *   <Tab>Tab 1</Tab>
 * </TabList>
 * <Role {...props}>Panel 1</Role>
 * ```
 */
export declare const useTabPanel: import("../utils/types.js").Hook<TabPanelOptions<"div">>;
/**
 * Renders a tab panel element.
 * @see https://ariakit.org/components/tab
 * @example
 * ```jsx
 * const tab = useTabStore();
 * <TabList store={tab}>
 *   <Tab>Tab 1</Tab>
 *   <Tab>Tab 2</Tab>
 * </TabList>
 * <TabPanel store={tab}>Panel 1</TabPanel>
 * <TabPanel store={tab}>Panel 2</TabPanel>
 * ```
 */
export declare const TabPanel: import("../utils/types.js").Component<TabPanelOptions<"div">>;
export interface TabPanelOptions<T extends As = "div"> extends FocusableOptions<T>, CollectionItemOptions<T>, Omit<DisclosureContentOptions<T>, "store"> {
    /**
     * Object returned by the `useTabStore` hook.
     */
    store: TabStore;
    /**
     * The id of the tab that controls this panel. By default, this value will
     * be inferred based on the order of the tabs and the panels.
     *
     * Live examples:
     * - [Tab with React Router](https://ariakit.org/examples/tab-react-router)
     */
    tabId?: string | null;
}
export type TabPanelProps<T extends As = "div"> = Props<TabPanelOptions<T>>;
