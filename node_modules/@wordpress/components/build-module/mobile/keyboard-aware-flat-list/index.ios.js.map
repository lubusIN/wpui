{"version":3,"names":["ScrollView","FlatList","useWindowDimensions","Animated","useAnimatedScrollHandler","useSharedValue","useCallback","useEffect","useRef","useThrottle","useTextInputOffset","useKeyboardOffset","useScrollToTextInput","useTextInputCaretPosition","AnimatedScrollView","createAnimatedComponent","KeyboardAwareFlatList","extraScrollHeight","innerRef","onScroll","scrollEnabled","scrollViewStyle","shouldPreventAutomaticScroll","props","scrollViewRef","scrollViewMeasurements","scrollViewYOffset","height","windowHeight","width","windowWidth","isLandscape","keyboardOffset","currentCaretData","getTextInputOffset","scrollToTextInputOffset","onScrollToTextInput","caret","textInputOffset","hasTextInputOffset","leading","current","scrollHandler","event","contentOffset","value","y","measureScrollView","scrollRef","getNativeScrollRef","measureInWindow","_x","onContentSizeChange","getRef","ref","contentInset","bottom","style","flex","createElement","automaticallyAdjustContentInsets","keyboardShouldPersistTaps","scrollEventThrottle"],"sources":["@wordpress/components/src/mobile/keyboard-aware-flat-list/index.ios.js"],"sourcesContent":["/**\n * External dependencies\n */\n\nimport { ScrollView, FlatList, useWindowDimensions } from 'react-native';\nimport Animated, {\n\tuseAnimatedScrollHandler,\n\tuseSharedValue,\n} from 'react-native-reanimated';\n\n/**\n * WordPress dependencies\n */\nimport { useCallback, useEffect, useRef } from '@wordpress/element';\nimport { useThrottle } from '@wordpress/compose';\n\n/**\n * Internal dependencies\n */\nimport useTextInputOffset from './use-text-input-offset';\nimport useKeyboardOffset from './use-keyboard-offset';\nimport useScrollToTextInput from './use-scroll-to-text-input';\nimport useTextInputCaretPosition from './use-text-input-caret-position';\n\nconst AnimatedScrollView = Animated.createAnimatedComponent( ScrollView );\n\n/**\n * React component that provides a FlatList that is aware of the keyboard state and can scroll\n * to the currently focused TextInput.\n *\n * @param {Object}   props                              Component props.\n * @param {number}   props.extraScrollHeight            Extra scroll height for the content.\n * @param {Function} props.innerRef                     Function to pass the ScrollView ref to the parent component.\n * @param {Function} props.onScroll                     Function to be called when the list is scrolled.\n * @param {boolean}  props.scrollEnabled                Whether the list can be scrolled.\n * @param {Object}   props.scrollViewStyle              Additional style for the ScrollView component.\n * @param {boolean}  props.shouldPreventAutomaticScroll Whether to prevent scrolling when there's a Keyboard offset set.\n * @param {Object}   props...                           Other props to pass to the FlatList component.\n * @return {WPComponent} KeyboardAwareFlatList component.\n */\nexport const KeyboardAwareFlatList = ( {\n\textraScrollHeight,\n\tinnerRef,\n\tonScroll,\n\tscrollEnabled,\n\tscrollViewStyle,\n\tshouldPreventAutomaticScroll,\n\t...props\n} ) => {\n\tconst scrollViewRef = useRef();\n\tconst scrollViewMeasurements = useRef();\n\tconst scrollViewYOffset = useSharedValue( -1 );\n\n\tconst { height: windowHeight, width: windowWidth } = useWindowDimensions();\n\tconst isLandscape = windowWidth >= windowHeight;\n\n\tconst [ keyboardOffset ] = useKeyboardOffset(\n\t\tscrollEnabled,\n\t\tshouldPreventAutomaticScroll\n\t);\n\n\tconst [ currentCaretData ] = useTextInputCaretPosition( scrollEnabled );\n\n\tconst [ getTextInputOffset ] = useTextInputOffset(\n\t\tscrollEnabled,\n\t\tscrollViewRef\n\t);\n\n\tconst [ scrollToTextInputOffset ] = useScrollToTextInput(\n\t\textraScrollHeight,\n\t\tkeyboardOffset,\n\t\tscrollEnabled,\n\t\tscrollViewMeasurements,\n\t\tscrollViewRef,\n\t\tscrollViewYOffset\n\t);\n\n\tconst onScrollToTextInput = useThrottle(\n\t\tuseCallback(\n\t\t\tasync ( caret ) => {\n\t\t\t\tconst textInputOffset = await getTextInputOffset( caret );\n\t\t\t\tconst hasTextInputOffset = textInputOffset !== null;\n\n\t\t\t\tif ( hasTextInputOffset ) {\n\t\t\t\t\tscrollToTextInputOffset( caret, textInputOffset );\n\t\t\t\t}\n\t\t\t},\n\t\t\t[ getTextInputOffset, scrollToTextInputOffset ]\n\t\t),\n\t\t200,\n\t\t{ leading: false }\n\t);\n\n\tuseEffect( () => {\n\t\tonScrollToTextInput( currentCaretData );\n\t}, [ currentCaretData, onScrollToTextInput ] );\n\n\t// When the orientation changes, the ScrollView measurements\n\t// need to be re-calculated.\n\tuseEffect( () => {\n\t\tscrollViewMeasurements.current = null;\n\t}, [ isLandscape ] );\n\n\tconst scrollHandler = useAnimatedScrollHandler( {\n\t\tonScroll: ( event ) => {\n\t\t\tconst { contentOffset } = event;\n\t\t\tscrollViewYOffset.value = contentOffset.y;\n\t\t\tonScroll( event );\n\t\t},\n\t} );\n\n\tconst measureScrollView = useCallback( () => {\n\t\tif ( scrollViewRef.current ) {\n\t\t\tconst scrollRef = scrollViewRef.current.getNativeScrollRef();\n\n\t\t\tscrollRef.measureInWindow( ( _x, y, width, height ) => {\n\t\t\t\tscrollViewMeasurements.current = { y, width, height };\n\t\t\t} );\n\t\t}\n\t}, [] );\n\n\tconst onContentSizeChange = useCallback( () => {\n\t\tonScrollToTextInput( currentCaretData );\n\n\t\t// Sets the first values when the content size changes.\n\t\tif ( ! scrollViewMeasurements.current ) {\n\t\t\tmeasureScrollView();\n\t\t}\n\t}, [ measureScrollView, onScrollToTextInput, currentCaretData ] );\n\n\tconst getRef = useCallback(\n\t\t( ref ) => {\n\t\t\tscrollViewRef.current = ref;\n\t\t\tinnerRef( ref );\n\t\t},\n\t\t[ innerRef ]\n\t);\n\n\t// Adds content insets when the keyboard is opened to have\n\t// extra padding at the bottom.\n\tconst contentInset = { bottom: keyboardOffset };\n\n\tconst style = [ { flex: 1 }, scrollViewStyle ];\n\n\treturn (\n\t\t<AnimatedScrollView\n\t\t\tautomaticallyAdjustContentInsets={ false }\n\t\t\tcontentInset={ contentInset }\n\t\t\tkeyboardShouldPersistTaps=\"handled\"\n\t\t\tonContentSizeChange={ onContentSizeChange }\n\t\t\tonScroll={ scrollHandler }\n\t\t\tref={ getRef }\n\t\t\tscrollEnabled={ scrollEnabled }\n\t\t\tscrollEventThrottle={ 16 }\n\t\t\tstyle={ style }\n\t\t>\n\t\t\t<FlatList { ...props } scrollEnabled={ false } />\n\t\t</AnimatedScrollView>\n\t);\n};\n\nexport default KeyboardAwareFlatList;\n"],"mappings":";AAAA;AACA;AACA;;AAEA,SAASA,UAAU,EAAEC,QAAQ,EAAEC,mBAAmB,QAAQ,cAAc;AACxE,OAAOC,QAAQ,IACdC,wBAAwB,EACxBC,cAAc,QACR,yBAAyB;;AAEhC;AACA;AACA;AACA,SAASC,WAAW,EAAEC,SAAS,EAAEC,MAAM,QAAQ,oBAAoB;AACnE,SAASC,WAAW,QAAQ,oBAAoB;;AAEhD;AACA;AACA;AACA,OAAOC,kBAAkB,MAAM,yBAAyB;AACxD,OAAOC,iBAAiB,MAAM,uBAAuB;AACrD,OAAOC,oBAAoB,MAAM,4BAA4B;AAC7D,OAAOC,yBAAyB,MAAM,iCAAiC;AAEvE,MAAMC,kBAAkB,GAAGX,QAAQ,CAACY,uBAAuB,CAAEf,UAAW,CAAC;;AAEzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMgB,qBAAqB,GAAGA,CAAE;EACtCC,iBAAiB;EACjBC,QAAQ;EACRC,QAAQ;EACRC,aAAa;EACbC,eAAe;EACfC,4BAA4B;EAC5B,GAAGC;AACJ,CAAC,KAAM;EACN,MAAMC,aAAa,GAAGhB,MAAM,CAAC,CAAC;EAC9B,MAAMiB,sBAAsB,GAAGjB,MAAM,CAAC,CAAC;EACvC,MAAMkB,iBAAiB,GAAGrB,cAAc,CAAE,CAAC,CAAE,CAAC;EAE9C,MAAM;IAAEsB,MAAM,EAAEC,YAAY;IAAEC,KAAK,EAAEC;EAAY,CAAC,GAAG5B,mBAAmB,CAAC,CAAC;EAC1E,MAAM6B,WAAW,GAAGD,WAAW,IAAIF,YAAY;EAE/C,MAAM,CAAEI,cAAc,CAAE,GAAGrB,iBAAiB,CAC3CS,aAAa,EACbE,4BACD,CAAC;EAED,MAAM,CAAEW,gBAAgB,CAAE,GAAGpB,yBAAyB,CAAEO,aAAc,CAAC;EAEvE,MAAM,CAAEc,kBAAkB,CAAE,GAAGxB,kBAAkB,CAChDU,aAAa,EACbI,aACD,CAAC;EAED,MAAM,CAAEW,uBAAuB,CAAE,GAAGvB,oBAAoB,CACvDK,iBAAiB,EACjBe,cAAc,EACdZ,aAAa,EACbK,sBAAsB,EACtBD,aAAa,EACbE,iBACD,CAAC;EAED,MAAMU,mBAAmB,GAAG3B,WAAW,CACtCH,WAAW,CACV,MAAQ+B,KAAK,IAAM;IAClB,MAAMC,eAAe,GAAG,MAAMJ,kBAAkB,CAAEG,KAAM,CAAC;IACzD,MAAME,kBAAkB,GAAGD,eAAe,KAAK,IAAI;IAEnD,IAAKC,kBAAkB,EAAG;MACzBJ,uBAAuB,CAAEE,KAAK,EAAEC,eAAgB,CAAC;IAClD;EACD,CAAC,EACD,CAAEJ,kBAAkB,EAAEC,uBAAuB,CAC9C,CAAC,EACD,GAAG,EACH;IAAEK,OAAO,EAAE;EAAM,CAClB,CAAC;EAEDjC,SAAS,CAAE,MAAM;IAChB6B,mBAAmB,CAAEH,gBAAiB,CAAC;EACxC,CAAC,EAAE,CAAEA,gBAAgB,EAAEG,mBAAmB,CAAG,CAAC;;EAE9C;EACA;EACA7B,SAAS,CAAE,MAAM;IAChBkB,sBAAsB,CAACgB,OAAO,GAAG,IAAI;EACtC,CAAC,EAAE,CAAEV,WAAW,CAAG,CAAC;EAEpB,MAAMW,aAAa,GAAGtC,wBAAwB,CAAE;IAC/Ce,QAAQ,EAAIwB,KAAK,IAAM;MACtB,MAAM;QAAEC;MAAc,CAAC,GAAGD,KAAK;MAC/BjB,iBAAiB,CAACmB,KAAK,GAAGD,aAAa,CAACE,CAAC;MACzC3B,QAAQ,CAAEwB,KAAM,CAAC;IAClB;EACD,CAAE,CAAC;EAEH,MAAMI,iBAAiB,GAAGzC,WAAW,CAAE,MAAM;IAC5C,IAAKkB,aAAa,CAACiB,OAAO,EAAG;MAC5B,MAAMO,SAAS,GAAGxB,aAAa,CAACiB,OAAO,CAACQ,kBAAkB,CAAC,CAAC;MAE5DD,SAAS,CAACE,eAAe,CAAE,CAAEC,EAAE,EAAEL,CAAC,EAAEjB,KAAK,EAAEF,MAAM,KAAM;QACtDF,sBAAsB,CAACgB,OAAO,GAAG;UAAEK,CAAC;UAAEjB,KAAK;UAAEF;QAAO,CAAC;MACtD,CAAE,CAAC;IACJ;EACD,CAAC,EAAE,EAAG,CAAC;EAEP,MAAMyB,mBAAmB,GAAG9C,WAAW,CAAE,MAAM;IAC9C8B,mBAAmB,CAAEH,gBAAiB,CAAC;;IAEvC;IACA,IAAK,CAAER,sBAAsB,CAACgB,OAAO,EAAG;MACvCM,iBAAiB,CAAC,CAAC;IACpB;EACD,CAAC,EAAE,CAAEA,iBAAiB,EAAEX,mBAAmB,EAAEH,gBAAgB,CAAG,CAAC;EAEjE,MAAMoB,MAAM,GAAG/C,WAAW,CACvBgD,GAAG,IAAM;IACV9B,aAAa,CAACiB,OAAO,GAAGa,GAAG;IAC3BpC,QAAQ,CAAEoC,GAAI,CAAC;EAChB,CAAC,EACD,CAAEpC,QAAQ,CACX,CAAC;;EAED;EACA;EACA,MAAMqC,YAAY,GAAG;IAAEC,MAAM,EAAExB;EAAe,CAAC;EAE/C,MAAMyB,KAAK,GAAG,CAAE;IAAEC,IAAI,EAAE;EAAE,CAAC,EAAErC,eAAe,CAAE;EAE9C,OACCsC,aAAA,CAAC7C,kBAAkB;IAClB8C,gCAAgC,EAAG,KAAO;IAC1CL,YAAY,EAAGA,YAAc;IAC7BM,yBAAyB,EAAC,SAAS;IACnCT,mBAAmB,EAAGA,mBAAqB;IAC3CjC,QAAQ,EAAGuB,aAAe;IAC1BY,GAAG,EAAGD,MAAQ;IACdjC,aAAa,EAAGA,aAAe;IAC/B0C,mBAAmB,EAAG,EAAI;IAC1BL,KAAK,EAAGA;EAAO,GAEfE,aAAA,CAAC1D,QAAQ;IAAA,GAAMsB,KAAK;IAAGH,aAAa,EAAG;EAAO,CAAE,CAC7B,CAAC;AAEvB,CAAC;AAED,eAAeJ,qBAAqB"}