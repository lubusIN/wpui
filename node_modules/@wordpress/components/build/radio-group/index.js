"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _element = require("@wordpress/element");
var _Radio = require("reakit/Radio");
var _buttonGroup = _interopRequireDefault(require("../button-group"));
var _radioContext = _interopRequireDefault(require("./radio-context"));
// @ts-nocheck

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function RadioGroup({
  label,
  checked,
  defaultChecked,
  disabled,
  onChange,
  ...props
}, ref) {
  const radioState = (0, _Radio.useRadioState)({
    state: defaultChecked,
    baseId: props.id
  });
  const radioContext = {
    ...radioState,
    disabled,
    // Controlled or uncontrolled.
    state: checked !== null && checked !== void 0 ? checked : radioState.state,
    setState: onChange !== null && onChange !== void 0 ? onChange : radioState.setState
  };
  return (0, _element.createElement)(_radioContext.default.Provider, {
    value: radioContext
  }, (0, _element.createElement)(_Radio.RadioGroup, {
    ref: ref,
    as: _buttonGroup.default,
    "aria-label": label,
    ...radioState,
    ...props
  }));
}

/**
 * @deprecated Use `RadioControl` or `ToggleGroupControl` instead.
 */
var _default = (0, _element.forwardRef)(RadioGroup);
exports.default = _default;
//# sourceMappingURL=index.js.map