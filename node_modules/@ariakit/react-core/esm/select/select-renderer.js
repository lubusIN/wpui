import {
  useCompositeRenderer
} from "../__chunks/DITMA5PJ.js";
import {
  getCollectionRendererItem,
  getCollectionRendererItemId
} from "../__chunks/ONFAHVST.js";
import {
  SelectContext
} from "../__chunks/EEVSGAZW.js";
import "../__chunks/T3DJZG63.js";
import "../__chunks/WJ37OVG2.js";
import {
  createElement,
  forwardRef
} from "../__chunks/NQJBHION.js";
import {
  useStoreState
} from "../__chunks/P63NRZ4A.js";
import "../__chunks/J7Q2EO23.js";
import "../__chunks/CP3U4HPL.js";
import {
  __objRest,
  __spreadValues
} from "../__chunks/PNRLI7OV.js";

// src/select/select-renderer.tsx
import { useContext, useMemo } from "react";
import { toArray } from "@ariakit/core/utils/array";
function getItemObject(item) {
  if (!item || typeof item !== "object") {
    return { value: `${item}` };
  }
  return item;
}
function findIndicesByValue(items, value) {
  var _a;
  const values = toArray(value);
  const indices = [];
  for (const [index, item] of items.entries()) {
    if (indices.length === values.length)
      break;
    const object = getItemObject(item);
    if (object.value != null && values.includes(object.value)) {
      indices.push(index);
    } else if ((_a = object.items) == null ? void 0 : _a.length) {
      const childIndices = findIndicesByValue(object.items, value);
      if (childIndices.length) {
        indices.push(index);
      }
    }
  }
  return indices;
}
function useSelectRenderer(_a) {
  var _b = _a, {
    store,
    orientation: orientationProp,
    persistentIndices: persistentIndicesProp,
    items: itemsProp,
    value: valueProp
  } = _b, props = __objRest(_b, [
    "store",
    "orientation",
    "persistentIndices",
    "items",
    "value"
  ]);
  var _a2, _b2;
  const context = useContext(SelectContext);
  store = store || context;
  const items = (_a2 = useStoreState(
    store,
    (state) => state.mounted ? itemsProp != null ? itemsProp : state.items : 0
  )) != null ? _a2 : itemsProp;
  const value = (_b2 = useStoreState(store, (state) => valueProp != null ? valueProp : state.value)) != null ? _b2 : valueProp;
  const valueIndices = useMemo(() => {
    if (!items)
      return [];
    if (value == null)
      return [];
    if (typeof items === "number")
      return [];
    if (!items.length)
      return [];
    return findIndicesByValue(items, value);
  }, [items, value]);
  const persistentIndices = useMemo(() => {
    if (persistentIndicesProp) {
      return [...persistentIndicesProp, ...valueIndices];
    }
    return valueIndices;
  }, [valueIndices, persistentIndicesProp]);
  return useCompositeRenderer(__spreadValues({
    store,
    items,
    persistentIndices
  }, props));
}
var SelectRenderer = forwardRef(function SelectRenderer2(props) {
  const htmlProps = useSelectRenderer(props);
  return createElement("div", htmlProps);
});
export {
  SelectRenderer,
  getCollectionRendererItem as getSelectRendererItem,
  getCollectionRendererItemId as getSelectRendererItemId
};
