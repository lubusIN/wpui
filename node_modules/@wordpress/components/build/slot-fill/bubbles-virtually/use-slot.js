"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useSlot;
var _valtio = require("valtio");
var _element = require("@wordpress/element");
var _slotFillContext = _interopRequireDefault(require("./slot-fill-context"));
// @ts-nocheck
/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function useSlot(name) {
  const registry = (0, _element.useContext)(_slotFillContext.default);
  const slots = (0, _valtio.useSnapshot)(registry.slots, {
    sync: true
  });
  // The important bit here is that the `useSnapshot` call ensures that the
  // hook only causes a re-render if the slot with the given name changes,
  // not any other slot.
  const slot = slots.get(name);
  const api = (0, _element.useMemo)(() => ({
    updateSlot: fillProps => registry.updateSlot(name, fillProps),
    unregisterSlot: ref => registry.unregisterSlot(name, ref),
    registerFill: ref => registry.registerFill(name, ref),
    unregisterFill: ref => registry.unregisterFill(name, ref)
  }), [name, registry]);
  return {
    ...slot,
    ...api
  };
}
//# sourceMappingURL=use-slot.js.map