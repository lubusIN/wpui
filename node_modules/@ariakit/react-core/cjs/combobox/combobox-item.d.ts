import type { MouseEvent } from "react";
import type { BooleanOrCallback } from "@ariakit/core/utils/types";
import type { CompositeHoverOptions } from "../composite/composite-hover.js";
import type { CompositeItemOptions } from "../composite/composite-item.js";
import type { As, Props } from "../utils/types.js";
import type { ComboboxStore } from "./combobox-store.js";
/**
 * Returns props to create a `ComboboxItem` component.
 * @see https://ariakit.org/components/combobox
 * @example
 * ```jsx
 * const store = useComboboxStore();
 * const props = useComboboxItem({ store, value: "value" });
 * <Role {...props} />
 * ```
 */
export declare const useComboboxItem: import("../utils/types.js").Hook<ComboboxItemOptions<"div">>;
/**
 * Renders a combobox item inside a combobox list or popover. The `role` prop
 * will be automatically set based on the `ComboboxList` or `ComboboxPopover`
 * own `role` prop. For example, if the `ComboboxPopover` component's `role`
 * prop is set to `listbox` (default), the `ComboboxItem` `role` will be set to
 * `option`. By default, the `value` prop will be rendered as the children, but
 * this can be overriden.
 * @see https://ariakit.org/components/combobox
 * @example
 * ```jsx
 * const combobox = useComboboxStore();
 * <Combobox store={combobox} />
 * <ComboboxPopover store={combobox}>
 *   <ComboboxItem value="Item 1" />
 *   <ComboboxItem value="Item 2" />
 *   <ComboboxItem value="Item 3" />
 * </ComboboxPopover>
 * ```
 */
export declare const ComboboxItem: import("../utils/types.js").Component<ComboboxItemOptions<"div">>;
export interface ComboboxItemOptions<T extends As = "div"> extends CompositeItemOptions<T>, CompositeHoverOptions<T> {
    /**
     * Object returned by the `useComboboxStore` hook. If not provided, the parent
     * `ComboboxList` or `ComboboxPopover` components' context will be used.
     */
    store?: ComboboxStore;
    /**
     * The value of the item. This will be rendered as the children by default.
     *   - If `setValueOnClick` is set to `true`, this will be the value of the
     *     combobox input when the user clicks on this item.
     *   - If the `autoComplete` prop on the `Combobox` component is set to `both`
     *     or `inline`, this will be the value of the combobox input when the
     *     combobox loses focus.
     */
    value?: string;
    /**
     * Whether to hide the combobox when this item is clicked.
     * @default true
     */
    hideOnClick?: BooleanOrCallback<MouseEvent<HTMLElement>>;
    /**
     * Whether to set the combobox value with this item's value when this item is
     * clicked.
     * @default true
     */
    setValueOnClick?: BooleanOrCallback<MouseEvent<HTMLElement>>;
    /**
     * @default false
     */
    focusOnHover?: CompositeHoverOptions["focusOnHover"];
}
export type ComboboxItemProps<T extends As = "div"> = Props<ComboboxItemOptions<T>>;
