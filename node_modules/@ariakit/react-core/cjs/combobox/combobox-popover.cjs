"use strict";Object.defineProperty(exports, "__esModule", {value: true});

var _TQ2AADTYcjs = require('../__chunks/TQ2AADTY.cjs');
require('../__chunks/2WZVSPAI.cjs');


var _3ALHBZ3Rcjs = require('../__chunks/3ALHBZ3R.cjs');
require('../__chunks/MNUCM2FP.cjs');
require('../__chunks/TUSNAJ32.cjs');
require('../__chunks/CHVOMF22.cjs');
require('../__chunks/FA3DXDDT.cjs');
require('../__chunks/F4UT5TWU.cjs');
require('../__chunks/ELOQI33M.cjs');
require('../__chunks/6BAHKJ5K.cjs');
require('../__chunks/KJBIRAH5.cjs');
require('../__chunks/HTEAWNBY.cjs');
require('../__chunks/Z3TLXRS7.cjs');
require('../__chunks/X2GXTE3P.cjs');
require('../__chunks/56NPFF7P.cjs');
require('../__chunks/W32FX7DM.cjs');
require('../__chunks/BWQVQDGC.cjs');
require('../__chunks/G6F4DPHM.cjs');
require('../__chunks/PD5YFDLO.cjs');
require('../__chunks/SOPRUU56.cjs');
require('../__chunks/YPXV3X22.cjs');
require('../__chunks/RXCUKHX3.cjs');
require('../__chunks/NS56XHXG.cjs');
require('../__chunks/CQSUIL2D.cjs');
require('../__chunks/N2VCZZLP.cjs');
require('../__chunks/AGPJKWIO.cjs');
require('../__chunks/SZTCN3SG.cjs');
require('../__chunks/W5PBA4D6.cjs');
require('../__chunks/I4JDDV3V.cjs');
require('../__chunks/LHHW5ZQP.cjs');
require('../__chunks/QR3ATHWU.cjs');




var _CWY2PHPRcjs = require('../__chunks/CWY2PHPR.cjs');
require('../__chunks/OVOYNBFC.cjs');
require('../__chunks/MPGRRS75.cjs');
require('../__chunks/5WLTMVVQ.cjs');
require('../__chunks/7WUTS26Y.cjs');




var _72I2GWXFcjs = require('../__chunks/72I2GWXF.cjs');

// src/combobox/combobox-popover.ts
var _dom = require('@ariakit/core/utils/dom');
function isController(target, ...ids) {
  if (!target)
    return false;
  if ("id" in target) {
    const selector = ids.filter(Boolean).map((id) => `[aria-controls="${id}"]`).join(", ");
    if (!selector)
      return false;
    return _dom.matches.call(void 0, target, selector);
  }
  return false;
}
var useComboboxPopover = _CWY2PHPRcjs.createHook.call(void 0, 
  (_a) => {
    var _b = _a, {
      store,
      tabIndex,
      alwaysVisible,
      hideOnInteractOutside = true
    } = _b, props = _72I2GWXFcjs.__objRest.call(void 0, _b, [
      "store",
      "tabIndex",
      "alwaysVisible",
      "hideOnInteractOutside"
    ]);
    const baseElement = store.useState("baseElement");
    props = _TQ2AADTYcjs.useComboboxList.call(void 0, _72I2GWXFcjs.__spreadValues.call(void 0, { store, alwaysVisible }, props));
    props = _3ALHBZ3Rcjs.usePopover.call(void 0, _72I2GWXFcjs.__spreadProps.call(void 0, _72I2GWXFcjs.__spreadValues.call(void 0, {
      store,
      alwaysVisible,
      autoFocusOnShow: false,
      autoFocusOnHide: false,
      finalFocus: baseElement
    }, props), {
      // Combobox popovers can't be modal because the focus may be (and is by
      // default) outside of it on the combobox input element.
      modal: false,
      // Make sure we don't hide the popover when the user interacts with the
      // combobox cancel or the combobox disclosure buttons. They will have the
      // aria-controls attribute pointing to either the combobox input or the
      // combobox popover elements.
      hideOnInteractOutside: (event) => {
        const { contentElement, baseElement: baseElement2 } = store.getState();
        const contentId = contentElement == null ? void 0 : contentElement.id;
        const baseId = baseElement2 == null ? void 0 : baseElement2.id;
        if (isController(event.target, contentId, baseId))
          return false;
        const result = typeof hideOnInteractOutside === "function" ? hideOnInteractOutside(event) : hideOnInteractOutside;
        return result;
      }
    }));
    return props;
  }
);
var ComboboxPopover = _CWY2PHPRcjs.createComponent.call(void 0, 
  (props) => {
    const htmlProps = useComboboxPopover(props);
    return _CWY2PHPRcjs.createElement.call(void 0, "div", htmlProps);
  }
);
if (process.env.NODE_ENV !== "production") {
  ComboboxPopover.displayName = "ComboboxPopover";
}



exports.ComboboxPopover = ComboboxPopover; exports.useComboboxPopover = useComboboxPopover;
