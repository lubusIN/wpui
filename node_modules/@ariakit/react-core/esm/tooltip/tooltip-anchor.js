import {
  useHovercardAnchor
} from "../__chunks/Y5XLHDDM.js";
import "../__chunks/MYID4V27.js";
import "../__chunks/BMLNRUFQ.js";
import {
  createComponent,
  createElement,
  createHook
} from "../__chunks/NQJBHION.js";
import {
  useEvent
} from "../__chunks/J7Q2EO23.js";
import "../__chunks/CP3U4HPL.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "../__chunks/PNRLI7OV.js";

// src/tooltip/tooltip-anchor.ts
import { useEffect, useRef } from "react";
import { isFalsyBooleanCallback } from "@ariakit/core/utils/misc";
import { createStore, sync } from "@ariakit/core/utils/store";
var globalStore = createStore({
  activeStore: null
});
var useTooltipAnchor = createHook(
  (_a) => {
    var _b = _a, { store, showOnHover = true } = _b, props = __objRest(_b, ["store", "showOnHover"]);
    const canShowOnHoverRef = useRef(false);
    useEffect(() => {
      return sync(store, ["mounted"], (state) => {
        if (state.mounted)
          return;
        canShowOnHoverRef.current = false;
      });
    }, [store]);
    useEffect(() => {
      return sync(store, ["mounted", "skipTimeout"], (state) => {
        if (state.mounted) {
          const { activeStore } = globalStore.getState();
          if (activeStore !== store) {
            activeStore == null ? void 0 : activeStore.hide();
          }
          return globalStore.setState("activeStore", store);
        }
        const id = setTimeout(() => {
          const { activeStore } = globalStore.getState();
          if (activeStore !== store)
            return;
          globalStore.setState("activeStore", null);
        }, state.skipTimeout);
        return () => clearTimeout(id);
      });
    }, [store]);
    const onMouseEnterProp = props.onMouseEnter;
    const onMouseEnter = useEvent((event) => {
      onMouseEnterProp == null ? void 0 : onMouseEnterProp(event);
      canShowOnHoverRef.current = true;
    });
    const onFocusVisibleProp = props.onFocusVisible;
    const onFocusVisible = useEvent((event) => {
      onFocusVisibleProp == null ? void 0 : onFocusVisibleProp(event);
      if (event.defaultPrevented)
        return;
      store.setAnchorElement(event.currentTarget);
      store.show();
    });
    const onBlurProp = props.onBlur;
    const onBlur = useEvent((event) => {
      onBlurProp == null ? void 0 : onBlurProp(event);
      if (event.defaultPrevented)
        return;
      const { activeStore } = globalStore.getState();
      if (activeStore === store) {
        globalStore.setState("activeStore", null);
      }
    });
    const type = store.useState("type");
    const contentId = store.useState((state) => {
      var _a2;
      return (_a2 = state.contentElement) == null ? void 0 : _a2.id;
    });
    props = __spreadProps(__spreadValues({
      "aria-labelledby": type === "label" ? contentId : void 0,
      "aria-describedby": type === "description" ? contentId : void 0
    }, props), {
      onMouseEnter,
      onFocusVisible,
      onBlur
    });
    props = useHovercardAnchor(__spreadValues({
      store,
      showOnHover: (event) => {
        if (!canShowOnHoverRef.current)
          return false;
        if (isFalsyBooleanCallback(showOnHover, event))
          return false;
        const { activeStore } = globalStore.getState();
        if (!activeStore)
          return true;
        store.show();
        return false;
      }
    }, props));
    return props;
  }
);
var TooltipAnchor = createComponent((props) => {
  const htmlProps = useTooltipAnchor(props);
  return createElement("div", htmlProps);
});
if (process.env.NODE_ENV !== "production") {
  TooltipAnchor.displayName = "TooltipAnchor";
}
export {
  TooltipAnchor,
  useTooltipAnchor
};
