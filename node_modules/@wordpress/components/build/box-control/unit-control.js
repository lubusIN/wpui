"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = BoxUnitControl;
var _element = require("@wordpress/element");
var _react = require("@use-gesture/react");
var _tooltip = _interopRequireDefault(require("../tooltip"));
var _boxControlStyles = require("./styles/box-control-styles");
/**
 * External dependencies
 */

/**
 * Internal dependencies
 */

const noop = () => {};
function BoxUnitControl({
  isFirst,
  isLast,
  isOnly,
  onHoverOn = noop,
  onHoverOff = noop,
  label,
  value,
  ...props
}) {
  const bindHoverGesture = (0, _react.useHover)(({
    event,
    ...state
  }) => {
    if (state.hovering) {
      onHoverOn(event, state);
    } else {
      onHoverOff(event, state);
    }
  });
  return (0, _element.createElement)(_boxControlStyles.UnitControlWrapper, {
    ...bindHoverGesture()
  }, (0, _element.createElement)(Tooltip, {
    text: label
  }, (0, _element.createElement)(_boxControlStyles.UnitControl, {
    "aria-label": label,
    className: "component-box-control__unit-control",
    isFirst: isFirst,
    isLast: isLast,
    isOnly: isOnly,
    isPressEnterToChange: true,
    isResetValueOnUnitChange: false,
    value: value,
    ...props
  })));
}
function Tooltip({
  children,
  text
}) {
  if (!text) return children;

  /**
   * Wrapping the children in a `<div />` as Tooltip as it attempts
   * to render the <UnitControl />. Using a plain `<div />` appears to
   * resolve this issue.
   *
   * Originally discovered and referenced here:
   * https://github.com/WordPress/gutenberg/pull/24966#issuecomment-685875026
   */
  return (0, _element.createElement)(_tooltip.default, {
    text: text,
    placement: "top"
  }, (0, _element.createElement)("div", null, children));
}
//# sourceMappingURL=unit-control.js.map