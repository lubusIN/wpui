import type { As, Options, Props } from "../utils/types.js";
import type { CheckboxStore } from "./checkbox-store.js";
/**
 * Returns props to create a `CheckboxCheck` component, that's usually rendered
 * inside a `Checkbox` component.
 * @see https://ariakit.org/components/checkbox
 * @example
 * ```jsx
 * const props = useCheckboxCheck({ checked: true });
 * <Role {...props} />
 * ```
 */
export declare const useCheckboxCheck: import("../utils/types.js").Hook<CheckboxCheckOptions<"span">>;
/**
 * Renders a check mark icon, usually inside a `Checkbox` component.
 * @see https://ariakit.org/components/checkbox
 * @example
 * ```jsx
 * <CheckboxCheck checked />
 * ```
 */
export declare const CheckboxCheck: import("../utils/types.js").Component<CheckboxCheckOptions<"span">>;
export interface CheckboxCheckOptions<T extends As = "span"> extends Options<T> {
    /**
     * Object returned by the `useCheckboxStore` hook. If not provided, the parent
     * `Checkbox` component's context will be used. If the `checked` prop is
     * provided, it will override this prop.
     */
    store?: CheckboxStore;
    /**
     * Whether the check mark should be shown. This value is automatically
     * inferred from the `store` prop or the parent `Checkbox` component. Manually
     * setting this prop will override the inferred value.
     */
    checked?: boolean;
}
export type CheckboxCheckProps<T extends As = "span"> = Props<CheckboxCheckOptions<T>>;
